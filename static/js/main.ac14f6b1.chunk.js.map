{"version":3,"sources":["lib/assets/icons/Data2.svg","images/logo.svg","lib/assets/icons/Publication.svg","lib/assets/icons/study-active.svg","lib/assets/icons/study.svg","lib/assets/icons/study-complete.svg","lib/assets/icons/DNA_Two.svg","lib/assets/icons/ToolClinical.svg","lib/assets/icons/ToolComputational.svg","lib/assets/icons/ToolExperimental.svg","lib/assets/logos/ctf.svg","lib/assets/logos/dhart.svg","lib/assets/logos/ntap.svg","lib/assets/icons/AMP_AD/consortia-icons/amp-icon-header.svg","lib/assets/icons/AMP_AD/consortia-icons/amp-icon.svg","lib/assets/icons/AMP_AD/consortia-icons/move-icon-header.svg","lib/assets/icons/AMP_AD/consortia-icons/move-icon.svg","lib/assets/icons/AMP_AD/consortia-icons/ModelAD-icon-header.svg","lib/assets/icons/AMP_AD/consortia-icons/ModelAD-icon.svg","lib/assets/icons/AMP_AD/consortia-icons/resilience-icon-header.svg","lib/assets/icons/AMP_AD/consortia-icons/resilience-icon.svg","demo/containers/playground/icons/brain.svg","demo/containers/playground/icons/circle.svg","demo/containers/playground/icons/mouse.svg","demo/containers/playground/icons/resiliencead.svg","lib/assets/ButtonContent.tsx","lib/assets/GoogleIcon.tsx","lib/utils/SynapseConstants.ts","lib/utils/SynapseClient.ts","lib/containers/Login.tsx","lib/containers/EntityForm.tsx","lib/containers/colorPalette.ts","lib/containers/ColorGradient.tsx","lib/utils/modules/rollupCompatibleModules.ts","lib/utils/modules/queryUtils.ts","lib/utils/modules/facetUtils.ts","lib/utils/modules/sqlFunctions.ts","lib/containers/SynapseTable.tsx","lib/containers/TotalQueryResults.tsx","lib/containers/Facets.tsx","lib/containers/QueryCount.tsx","lib/containers/QueryWrapper.tsx","lib/containers/StackedBarChart.tsx","lib/containers/calculateFriendlyFileSize.tsx","lib/containers/row_renderers/utils/CardFooter.tsx","lib/containers/row_renderers/utils/ChipContainer.tsx","lib/containers/row_renderers/utils/Icon.tsx","lib/containers/row_renderers/utils/ShowMore.tsx","lib/containers/row_renderers/Dataset.tsx","lib/containers/row_renderers/Funder.tsx","lib/containers/row_renderers/Publication.tsx","lib/containers/row_renderers/Study.tsx","lib/containers/row_renderers/Tool.tsx","lib/containers/row_renderers/CSBC/CSBCProject.tsx","lib/containers/row_renderers/AMPAD/Consortium.tsx","lib/containers/row_renderers/CSBC/CSBCPublication.tsx","lib/containers/row_renderers/CSBC/CSBCStudy.tsx","lib/containers/row_renderers/CSBC/CSBCDataset.tsx","lib/containers/HeaderCard.tsx","lib/containers/GenericCard.tsx","lib/containers/getUserData.tsx","lib/containers/UserCardSmall.tsx","lib/containers/UserCardContextMenu.tsx","lib/containers/UserCardLarge.tsx","lib/assets/icons/IconCopy.tsx","lib/containers/UserCardMedium.tsx","lib/containers/UserCard.tsx","lib/containers/UserCardList.tsx","lib/containers/CardContainer.tsx","lib/containers/QueryWrapperMenu.tsx","lib/containers/Uploader.tsx","lib/containers/FileContentDownloadUploadDemo.tsx","demo/containers/Demo.tsx","lib/containers/widgets/Bookmarks.tsx","lib/containers/widgets/SynapseImage.tsx","lib/containers/widgets/SynapsePlot.tsx","lib/containers/MarkdownSynapse.tsx","lib/containers/CardContainerLogic.tsx","demo/containers/playground/QueryWrapperMenuDemo.tsx","demo/containers/playground/CardContainerLogicDemo.tsx","demo/containers/playground/SearchDemo.tsx","demo/containers/playground/UserCardDemo.tsx","demo/containers/playground/MarkdownSynapseDemo.tsx","lib/containers/RssFeed.tsx","demo/containers/playground/NewsFeedDemo.tsx","demo/containers/playground/Playground.tsx","demo/containers/App.tsx","index.tsx","lib/assets/icons/project.svg"],"names":["module","exports","__webpack_require__","p","ButtonContent","_ref","children","style","paddingRight","fontWeight","paddingLeft","icon","paddingTop","paddingBottom","textAlign","width","react","GoogleIcon","active","background","borderRadius","height","xmlns","fill","fillRule","d","BUNDLE_MASK_QUERY_RESULTS","BUNDLE_MASK_QUERY_COUNT","BUNDLE_MASK_QUERY_SELECT_COLUMNS","BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE","BUNDLE_MASK_QUERY_COLUMN_MODELS","BUNDLE_MASK_QUERY_FACETS","ENTITY_BUNDLE_MASK_ENTITY","ENTITY_BUNDLE_MASK_ANNOTATIONS","ENTITY_BUNDLE_MASK_PERMISSIONS","ENTITY_BUNDLE_MASK_ENTITY_PATH","ENTITY_BUNDLE_MASK_HAS_CHILDREN","ENTITY_BUNDLE_MASK_ACL","ENTITY_BUNDLE_MASK_FILE_HANDLES","ENTITY_BUNDLE_MASK_TABLE_DATA","ENTITY_BUNDLE_MASK_ROOT_WIKI_ID","ENTITY_BUNDLE_MASK_BENEFACTOR_ACL","ENTITY_BUNDLE_MASK_DOI","ENTITY_BUNDLE_MASK_FILE_NAME","ENTITY_BUNDLE_MASK_THREAD_COUNT","ENTITY_BUNDLE_MASK_RESTRICTION_INFORMATION","STUDY","STUDY_ACTIVE","STUDY_COMPLETE","DATASET","AMP_CONSORTIUM","FUNDER","PUBLICATION","TOOL","CSBC_PROJECT","CSBC_PUBLICATION","CSBC_STUDY","CSBC_DATASET","GENERIC_CARD","COMPUTATIONAL","EXPERIMENTAL","CLINICAL","PROJECT","PAGE_SIZE","SMALL_USER_CARD","MEDIUM_USER_CARD","LARGE_USER_CARD","SEPERATOR","IS_DEV_ENV","DEV_ENV_SESSION_LOCAL_STORAGE_KEY","DEFAULT_ENDPOINT","AUTH_PROVIDER","SYNAPSE_STORAGE_LOCATION_ID","getRootURL","portString","window","location","port","concat","protocol","hostname","delay","t","Promise","resolve","setTimeout","bind","fetchWithExponentialTimeout","url","options","delayMs","retries","fetch","then","resp","status","text","parsedJson","JSON","parse","err","console","log","catch","reject","reason","statusText","statusCode","json","error","ok","doPost","requestJsonObject","sessionToken","initCredentials","endpoint","body","stringify","headers","Accept","Access-Control-Request-Headers","Content-Type","method","mode","credentials","doGet","doPut","putRefreshSessionToken","arguments","length","undefined","getVersion","getQueryTableResultsFromJobId","entityId","jobId","updateParentState","jobState","asyncJobStatus","getQueryTableResults","queryBundleRequest","token","getFullQueryTableResults","Object","asyncToGenerator","regenerator_default","a","mark","_callee3","query","rest","data","maxPageSize","queryRequest","_args3","wrap","_context3","prev","next","objectWithoutProperties","objectSpread","limit","_ref2","_callee2","initData","queryCount","currentQueryCount","getData","_context2","queryResult","queryResults","rows","_ref3","_callee","queryRequestWithMaxPageSize","_context","maxRowsPerPage","offset","postData","_data$queryResult$que","push","apply","toConsumableArray","abrupt","stop","this","_x2","_x","login","username","password","oAuthUrlRequest","provider","redirectUrl","oAuthSessionRequest","authenticationCode","createEntity","entity","createProject","name","concreteType","getUserProfile","getUserProfileById","ownerId","getUserBundle","id","mask","getUserProfiles","list","getEntityChildren","request","lookupChildEntity","getFiles","getEntity","updateEntity","getEntityBundleForVersion","version","partsMask","getEntityWiki","wikiId","getUserFavorites","getUserProjectList","projectDetails","getUserTeamList","getTeamList","fragment","getWikiAttachmentsFromEntity","getWikiAttachmentsFromEvaluation","setSessionTokenCookie","localStorage","setItem","removeItem","getSessionTokenFromCookie","getItem","getPrincipalAliasRequest","alias","type","detectSSOCode","redirectURL","code","URL","href","searchParams","get","synToken","originalUrl","replace","errSetSession","signOut","reload","uploadFile","filename","file","fileUploadResolve","fileUploadReject","partSize","Math","max","size","contentType","fileName","fileSizeBytes","partSizeBytes","storageLocationId","calculateMd5","md5","contentMD5Hex","startMultipartUpload","fileBlob","bmf","browserMd5File","progress","processFilePart","partNumber","multipartUploadStatus","clientSidePartsState","uploadId","presignedUploadUrlRequest","partNumbers","presignedUrlUrl","_ref4","_callee4","presignedUrlResponse","presignedUrl","startByte","endByte","fileSlice","_context4","partPresignedUrls","uploadPresignedUrl","slice","uploadFilePart","addPartUrl","addPartResponse","addPartState","checkUploadComplete","_x3","fileHandleName","every","v","newStatus","fileHandleId","resultFileHandleId","_ref5","_callee5","_context5","_x4","_x5","_x6","_ref6","_callee6","i","_context6","partsState","split","map","bit","_x7","getFileEntityContent","fileEntity","fileHandleAssociationList","associateObjectId","associateObjectType","dataFileHandleId","includeFileHandles","includePreSignedURLs","includePreviewPreSignedURLs","requestedFiles","preSignedURL","fileHandle","contentSize","cache","response","createACL","acl","submitToEvaluation","submission","etag","getEvaluation","evalId","Login","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","email","errorMessage","hasLoginInFailed","isSignedIn","handleChange","assertThisInitialized","handleLogin","getTokenView","getLoginFailureView","onSignIn","event","target","currentTarget","value","newState","defineProperty","setState","clickEvent","_this2","preventDefault","SynapseClient","className","authUrl","authorizationUrl","_this$props","theme","googleTheme","onClick","key","onSubmit","autoComplete","placeholder","onChange","data-lpignore","React","EntityForm","formRef","submitForm","current","submit","refresh","promises","formSchemaEntityId","formUiSchemaEntityId","all","values","userprofile","getTargetContainer","targetContainerId","formSchemaFileEntity","formUiSchemaFileEntity","getSchemaFileContent","onError","targetFolderId","formSchemaContent","formUiSchemaContent","getExistingFileData","formData","currentFileEntity","entityLookupRequest","entityName","title","parentId","initFormData","existingFileData","finally","formSchema","formUiSchema","parentContainerId","sent","containerId","isLoading","t0","Error","finishedProcessing","successfullyUploaded","submissionFileAndForm","Blob","createEntityFile","fileContentsBlob","fileUploadComplete","newFileHandleId","newFileEntity","synIdCallback","prevProps","message","lib_default","schema","uiSchema","showErrorList","ref","display","marginLeft","COLOR_PALETTE_EVEN","COLOR_PALETTE_ODD","getColorPallette","start","end","colorPalleteSelection","textColors","colorPalette","textColor","color","cloneDeep","x","cloneDeepProxy","getNextPageOfData","newData","_oldData$queryResult$","oldData","hasMoreData","SynapseConstants","getIsValueSelected","lastFacetSelection","curFacetSelection","columnName","facetValue","isSelected","selector","SELECT_SINGLE_FACET","readFacetValues","htmlCheckboxes","filter","facetValues","checkbox","checked","newQueryRequest","_newQueryRequest$quer","selectedFacets","specificFacet","find","el","facetColumnValuesRequest","formatSQLFromParser","tokens","synId","findIndex","newSql","parser","toString","splitString","join","MIN_SPACE_FACET_MENU","library","add","faColumns","faSort","faSortAmountUp","faSortAmountDown","faCheck","faTimes","faFilter","faDatabase","NEXT","PREVIOUS","SELECT_ALL","ICON_STATE","SORT_STATE","GROUP_BY_REGEX","SynapseTable","showGroupRowData","selectedRow","_event","queryCopy","getLastQueryRequest","columnModels","parsed","getSqlUnderlyingDataForRow","sql","queryJSON","encodedQuery","btoa","open","handlePaginationClick","eventType","currentOffset","executeQueryRequest","handleColumnSortPress","dict","_","columnIconSortState","Array","getLengthOfPropsData","sortedColumnSelection","index","findSelectionIndex","splice","unshift","column","direction","sort","toggleColumnSelection","isColumnSelected","defaultSelection","_this$props$visibleCo","visibleColumnCount","Infinity","lengthOfPropsData","applyChanges","_ref2$facetValue","_ref2$selector","from","querySelectorAll","isAllFilterSelectedForFacet","toggleFilterDropdown","isCurFilterSelected","refOuterDiv","isFilterSelected","filterClassList","tHeadLeftPosition","parentElement","getBoundingClientRect","left","classNames","isOpen","menuWallIsActive","toggleMenuWall","advancedSearch","download","configureFacetDropdown","closeMenuClickHandler","showPaginationButtons","useFacetAliasIfDefined","renderFacetSelection","facetName","_this$props$facetAlia","facetAliases","testSql","test","unitDescription","facets","backgroundColor","rgbIndex","pastZero","xData","forEach","item","facetType","anyTrue","totalAllFalseCase","totalStandardCase","hasOwnProperty","count","total","_this$state","optionalHiddenClass","addRemoveColClasses","marginRight","tabIndex","data-for","data-tip","onKeyPress","react_fontawesome_index_es","dist_default","delayShow","place","effect","isGroupByInSql","aria-labelledby","renderDropdownColumnMenu","minHeight","createTableHeader","createTableRows","originalSql","indexes","lexer","tokenize","selectIndex","fromIndex","columnIndex","toLowerCase","header","matchingColumnModel","columnModel","rowValue","pop","previous","_this2$props$visibleC","iconStyle","visibility","maybeShowPrimaryColor","listStyle","_this3","rowsFormatted","isColumnSelectedLen","countColumnIndexes","getCountFunctionColumnIndexes","row","rowContent","columnValue","j","_this3$props$visibleC","isColumnActiveInitLoad","isColumnActivePastInitLoad","isCountColumn","includes","rowFormatted","rowId","_this4","columnElements","_this$state2","_this$props$visibleCo2","initRender","subsequentRender","facetIndex","facetColumnResult","isFacetSelection","isSelectedIconClass","sortSpanBackgoundClass","whiteSpace","synTable","synapseId","_this$state3","facetColumnResults","applyPrimary","classList","alignItems","outline","margin","listStyleType","_this5","_this$props2","facetColumnResultValueCount","displayValue","isValueSelected","TotalQueryResults","totalResultsNoFacet","_data$facets","curFacetsIndex","curFacets","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","return","faPlus","CheckboxGroup","showAllFacets","isAllFilterSelected","b","_getColorPallette","facetColumnResultValues","curColor","backgroundClass","childrenView","child","Facets","_this$props$filter","_this$props$isAllFilt","chartSelectionIndex","showButtons","Facets_CheckboxGroup","curFacetsLength","showBarChart","facet","TotalQueryResults_TotalQueryResults","showFacetFilter","QueryCount","calculateRowCount","partMask","toLocaleString","QueryWrapper","executeInitialQueryRequest","initialState","_this$props$loadNow","loadNow","_this$props$loadNow2","loadNowStarted","initQueryRequest","lastQueryRequest","isLoadingNewData","isAllFalse","isAllTrue","isByDefaultSelected","update","childrenWithProps","isQueryWrapperChild","loadingCusrorClass","showMenu","defaultProps","faAngleLeft","faAngleRight","PREVIOUS_ITEM_CLICK","StackedBarChart","handleClick","handleArrowClick","_this$props$chartSele","extractPropsData","keys","handleHover","handleExit","getTextForChartSelection","onMeasureResize","rgba2rgb","dimensions","bounds","top","right","bottom","boxShadow","_this$props$chartSele2","facetValueDisplay","filterDisplay","_this$props$chartSele3","alpha","floor","loadingScreen","_this$props2$filter","progressMessage","originalColor","fontSize","index_esm","onResize","contentRect","measureRef","obj","rectStyle","rgbColor","svgWidth","label","tooltipId","numCharsInValue","svgHeight","onMouseEnter","onMouseLeave","textAnchor","fontFamily","y","getFileCount","link","Link","to","linkText","sufixes","calculateFriendlyFileSize","bytes","pow","toFixed","faLongArrowAltUp","faLongArrowAltDown","CardFooter","isShowMoreOn","isDesktop","toggleShowMore","updatePredicate","addEventListener","removeEventListener","innerWidth","_this$props$secondary","secondaryLabelLimit","valuesFiltered","hasMoreValuesThanLimit","kv","toUpperCase","rel","getDesktopFormattedRows","getMobileFormattedRows","padding","ChipContainer","chipsFormatted","chips","defaultIcons","_defaultIcons","PublicationSvg","Data2Svg","studyActiveSvg","studyCompleteSvg","studySvg","DNA_TwoSvg","ToolExperimentalSvg","ToolComputationalSvg","ToolClinicalSvg","projectSvg","Icon","_ref$value","iconOptions","iconSet","datasetIconClass","src","ShowMore","showMore","summary","summaryView","meetsCharRequirenent","summarySplit","showMoreButton","cursor","Dataset","handleLinkClick","datasetName","tumorType","diseaseFocus","fundingAgency","fileCount","fileSize","utils_Icon","utils_ChipContainer","utils_CardFooter","logoLinks","CTF","ctfSvg","DHART SPORE","dhartSvg","NTAP","ntapSvg","Funder","organizationName","organizationPath","website","abbreviation","logo","orgPath","origin","websiteDisplayName","charAt","substring","showOrgLink","isOnOrgPath","hash","alt","Publication","citation","doi","projectName","Study","hasCreatedIndex","projectLeads","projectStatus","dataStatus","ShowMore_ShowMore","Tool","softwareName","softwareLink","Project","abstract","grantNumber","investigators","keyInvestigators","subtitle","grantType","institution","consortium","Consortium","getIcon","org","isHeader","ampIconHeaderSvg","ampIconSvg","moveIconHeaderSvg","moveIconSvg","ModelADIconHeaderSvg","ModelADIconSvg","resilienceIconHeaderSvg","resilienceIconSvg","description","Program","path","Path","CSBCPublication","Title","authors","Authors","experimentalStrategy","consortum","Consortum","datasets","Journal","Theme","diseaseType","studies","assay","centerName","CSBCDataset","platform","species","HeaderCard","subTitle","iconValue","borderTop","marginTop","DOI_REGEX","SYNAPSE_REGX","GenericCard","toggleShowMoreDescription","showMoreDescription","internalLinkConfiguration","linkDisplay","match","columnValuesLength","columnValues","urlParams","stringEnd","baseURL","genericCardSchema","_this$props$isHeader","_genericCardSchema$li","linkValue","_this$getLink","getLink","secondaryLabels","_genericCardSchema$se","_genericCardSchema$se2","keyValue","marginBottom","containers_HeaderCard","getUserProfileWithProfilePicAttached","principalIds","withProfilePic","profilePicureFileHandleId","fileHandleList","matchingPersonIndex","clientPreSignedURL","getUserProfileWithProfilePic","userProfile","firstElement","COLORS","getColor","userName","hashedUserName","val","reduce","prevHash","currVal","charCodeAt","abs","faCircle","UserCardSmall","img","_ref$hideText","hideText","_ref$hideTooltip","hideTooltip","linkLocation","displayName","firstName","lastName","position","backgroundImage","multiline","UserCardContextMenu","_props$menuActions","menuActions","menuAction","callback","field","role","UserCardLarge","industry","faEllipsisV","faCopy","svg","viewBox","UserCardMedium","htmlDivRef","copyToClipboard","document","createElement","setAttribute","appendChild","select","execCommand","removeChild","showModal","toggleContextMenu","isContextMenuOpen","pageClick","_this$props$isLarge","isLarge","_this$props$hideEmail","hideEmail","_this$props$disableLi","disableLink","company","mediumCard","react_transition_group","timeout","enter","exit","IconCopy","fixedWidth","containers_UserCardContextMenu","border","UserCard","aliasData","principalId","userProfileAtRender","preSignedURLAtRender","_this$props2$loadingS","propsForChild","UserCardSmall_UserCardSmall","UserCardMedium_UserCardMedium","assign","UserCardList","userProfileMap","setA","setB","_difference","Set","_i","_Array$from","elem","delete","priorListOfIds","curListOfIds","difference","internalData","newEntries","firstNameIndex","lastNameIndex","institutionIndex","columnType","_this$props$size","_this$state$userProfi","fauxUserProfilesList","manuallyExtractData","fauxUserProfileIndex","UserCard_UserCard","fauxUserProfile","CardContainer","_React$Component","renderCard","Study_Study","row_renderers_Dataset","Funder_Funder","row_renderers_Publication","Tool_Tool","Consortium_Consortium","CSBCProject_Project","CSBC_CSBCPublication","CSBCStudy","CSBC_CSBCDataset","GenericCard_GenericCard","handleViewMore","inherits","createClass","_this$props$limit","_this$props$showBarCh","element","cards","showViewMore","showViewMoreButton","userIdColumnIndex","listIds","UserCardList_UserCardList","rowData","propsForCard","faMinus","QueryWrapperMenu","handleHoverLogic","info","tagName","hoverWhiteTextClass","remove","switchFacet","menuIndexIn","accordionIndexIn","activeMenuIndex","lastAccordionIndexWithSelection","hasClickedMenuItemOnce","toggleSelectionLevel","visibleAccordionIndex","Number","menuIndex","_prevState","stackedBarChartConfiguration","menuConfig","accordionConfig","menuDropdown","renderMenuDropdown","queryWrapper","renderQueryChildren","QueryCount_QueryCount","queryConfig","_this$props2$rgbIndex","_this$props2$isConsis","isConsistent","_this$props2$unitDesc","cardConfiguration","tableConfiguration","menuIndexFromProps","_searchParams$facetVa","config","QueryWrapper_QueryWrapper","StackedBarChart_StackedBarChart","Facets_Facets","SynapseTable_SynapseTable","containers_CardContainer","_this$props3","renderMenuConfig","_this$props4","doExpand","isLastActiveSelection","isActive","primaryColor","indicatorClasses","borderTopColor","borderLeftColor","hoverEnter","hoverLeave","renderFacetMenu","curLevel","_this$props5","defaultColor","_config$facetAliases","selectedStyling","infoEnter","infoLeave","facetDisplayValue","Uploader","inputOpenFileRef","showOpenFileDlg","click","files","handleFilesChanged","finishedProcessingOneFile","incrementedFilesUploadedCount","filesUploadedCount","isStillUploading","totalFilesToUploadCount","isUploading","handleUploadError","selectorFiles","existingEntity","updateEntityFile","isCreate","multiple","FileContentDownloadUploadDemo","updateFileContent","targetEntity","fileContent","newFileContent","handleContentChange","targetEntityId","content","Demo","entityFormRef","handleCardSelection","cardSql","cardSelection","showMarkdown","showTabOne","tabOne","tabTwo","makeSampleQueryCall","removeHandler","onSubmitEntityForm","onEntityFormSubmitted","userFormDataSynId","QUERY","includeEntityEtag","updatedState","userFormSynLink","aria-hidden","containers_Login","EntityForm_EntityForm","Uploader_Uploader","FileContentDownloadUploadDemo_FileContentDownloadUploadDemo","QueryWrapperMenu_QueryWrapperMenu","Bookmarks","renderBookmarks","matchedGroup","copyFootnotes","String","footnotes","regex","output","exec","isBeforeLastElement","SynapseImage","getSynapseFiles","compareById","isLoaded","comparator","objectList","matchToHandle","fileResults","imgStyle","params","align","float","Plot","createPlotlyComponent","Plotly","SynapsePlot","queryData","fetchPlotlyData","showPlot","widgetparamsMapped","_this$props$widgetpar","xtitle","ytitle","xaxistype","showlegend","isHorizontal","horizontal","layout","xaxis","yaxis","plotData","orientation","rowValues","TOC_CLASS","1","2","3","4","5","6","md","markdownit","html","MarkdownSynapse","markupRef","markdownitSynapse","init_markdown_it","markdownitSub","markdownitSup","markdownitCentertext","markdownitSynapseHeading","markdownitSynapseTable","markdownitStrikethroughAlt","markdownitContainer","markdownitEmphasisAlt","markdownitInlineComments","markdownitBr","use","markdownitMath","fileHandles","handleLinkClicks","processWidgets","processWidgetOrDomElement","processMath","getWikiAttachments","getWikiPageMarkdown","renderWidget","renderSynapseButton","renderSynapseImage","renderSynapsePlot","renderSynapseTOC","getErrorView","createMarkup","addBookmarks","addIdsToReferenceWidgets","addIdsToTocWidgets","anchor","referenceNumber","goTo","querySelector","scrollIntoView","behavior","block","inline","e","getAttribute","idOfContent","initText","render","__html","sanitizeHtml","allowedAttributes","button","div","h1","h2","h3","h4","h5","h6","li","ol","span","table","th","thead","ul","allowedTags","katex","textContent","delimiters","throwOnError","resetFootnotes","footnotesHtml","widgets_Bookmarks","override","markdown","updateLoadState","errorMessageView","errorViewWithProps","referenceCount","tocIdCount","curTocId","markup","widgets","xml","escapedOneToXmlSpecialMap","&amp;","&gt;","&lt;","&quot;","str","widgetMatch","originalMarkup","widgetParamsMatchWithXML","widgetParamsString","decodeXml","questionIndex","indexOf","widgetType","keyPair","_keyPair$split","_keyPair$split2","slicedToArray","decodeURIComponent","widgetsToBe","processWidgetMappings","dangerouslySetInnerHTML","reactKey","renderUserBadge","widgets_SynapsePlot","widgets_SynapseImage","elements","p1","p2","p3","p4","data-anchor","_this$props$hasSynaps","hasSynapseResources","_this$props$hasSynaps2","shouldUpdate","CardContainerLogic","defaultState","sqlUsed","foundIndex","whereClauseIndex","indexAfterWhereClause","searchParamsLen","insertWhereClauseFromURL","queryRequestWithoutCount","QueryWrapperMenuDemo","experimentalSql","computationalSql","0","CardContainerLogicDemo","AMP-AD","circleSvg","M2OVE-AD","brainSvg","MODEL-AD","mouseSvg","Resilience-AD","resilienceadSvg","CardContainerLogic_CardContainerLogic","faSearch","faArrowRight","SearchDemo","searchText","isFocusedOnSearchBar","updateSearchText","setSearchFocus","setSearchUnfocus","handleSearch","htmlFor","onFocus","onBlur","UserBadgeSmallDemo","profiles","MarkdownSynapse_MarkdownSynapse","_el","MarkdownSynapseDemo","RssFeed","rssFeed","isLoadingError","responseData","reactNativeRssParser","rss","items","links","NewsFeedDemo","RssFeed_RssFeed","App","Route","exact","playground_QueryWrapperMenuDemo","SearchDemo_SearchDemo","component","UserCardDemo_UserBadgeSmallDemo","MarkdownSynapseDemo_MarkdownSynapseDemo","NewsFeedDemo_NewsFeedDemo","BrowserRouter","basename","process","logoSvg","Playground","ReactDOM","demo_containers_App","getElementById"],"mappings":"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E,YACXrO,KAAKkK,MAAMoE,eACVtO,KAAKkK,MAAM7O,OACZ7F,EAAA,cAACia,GAAAhS,EAAD,CACEmQ,SAAU5N,KAAKkK,MAAM0D,SACrB8B,OAAQ1P,KAAKkK,MAAMmE,WACnBsB,SAAU3P,KAAKkK,MAAMoE,aACrBtC,SAAUhM,KAAKgM,SACf4D,eAAe,EACfC,IAAK7P,KAAKuM,SAEV/W,EAAA,qBAAKT,MAAO,CAAE+a,QAAS,SACrBta,EAAA,wBAAQ2N,KAAK,SAASqI,UAAU,gBAAhC,aAKHxL,KAAKkK,MAAM7O,OACZ2E,KAAK4J,MAAMxM,OACX4C,KAAKkK,MAAMwE,WACXlZ,EAAA,cAACA,EAAA,SAAD,KACEA,EAAA,0CACAA,EAAA,sBAAMT,MAAO,CAAEgb,WAAY,OAASvE,UAAW,qBA1NjDa,sCCjCJ2D,GAAgC,CACpC,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,iBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,gBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,iBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,iBACA,iBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,iBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,gBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,iBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,iBACA,kBAGIC,GAA+B,CACnC,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBA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","file":"static/js/main.ac14f6b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Data2.1104e430.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/Publication.b630024c.svg\";","module.exports = __webpack_public_path__ + \"static/media/study-active.bc52e72b.svg\";","module.exports = __webpack_public_path__ + \"static/media/study.79d24d74.svg\";","module.exports = __webpack_public_path__ + \"static/media/study-complete.b012f80b.svg\";","module.exports = __webpack_public_path__ + \"static/media/DNA_Two.d8f80972.svg\";","module.exports = __webpack_public_path__ + \"static/media/ToolClinical.ca6b9056.svg\";","module.exports = __webpack_public_path__ + \"static/media/ToolComputational.b3b0a1a1.svg\";","module.exports = __webpack_public_path__ + \"static/media/ToolExperimental.30e19c72.svg\";","module.exports = __webpack_public_path__ + \"static/media/ctf.4eb55044.svg\";","module.exports = __webpack_public_path__ + \"static/media/dhart.e554b25a.svg\";","module.exports = __webpack_public_path__ + \"static/media/ntap.e9543055.svg\";","module.exports = __webpack_public_path__ + \"static/media/amp-icon-header.71a5e101.svg\";","module.exports = __webpack_public_path__ + \"static/media/amp-icon.3593ecd7.svg\";","module.exports = __webpack_public_path__ + \"static/media/move-icon-header.dd07eaeb.svg\";","module.exports = __webpack_public_path__ + \"static/media/move-icon.2f85f6de.svg\";","module.exports = __webpack_public_path__ + \"static/media/ModelAD-icon-header.d2e9fd8e.svg\";","module.exports = __webpack_public_path__ + \"static/media/ModelAD-icon.e37944bf.svg\";","module.exports = __webpack_public_path__ + \"static/media/resilience-icon-header.595fa5fa.svg\";","module.exports = __webpack_public_path__ + \"static/media/resilience-icon.b1a30ae3.svg\";","module.exports = __webpack_public_path__ + \"static/media/brain.c6301611.svg\";","module.exports = __webpack_public_path__ + \"static/media/circle.ed6d433a.svg\";","module.exports = __webpack_public_path__ + \"static/media/mouse.7e294e96.svg\";","module.exports = __webpack_public_path__ + \"static/media/resiliencead.7500217a.svg\";","import * as React from 'react'\n\nexport default ({ children, icon }: { children: any, icon?: any }) => {\n  const style : React.CSSProperties = {\n    paddingRight: 10,\n    fontWeight: 500,\n    paddingLeft: icon ? 0 : 10,\n    paddingTop: 10,\n    paddingBottom: 10,\n    textAlign: 'center',\n    width: '100%'\n  }\n  return (\n    <span\n      style={style}\n    >\n      {children}\n    </span>\n  )\n}\n","import * as React from 'react'\n// @ts-nocheck\nexport default ({ active }: {active : boolean }) => (\n  <div\n    style={{\n      background: active ? '#fff' : '#eee',\n      paddingTop: 7,\n      paddingRight:10,\n      paddingBottom:4,\n      paddingLeft:10,\n      borderRadius: 2 }}\n  >\n    <svg width=\"18\" height=\"18\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g fill=\"#000\" fillRule=\"evenodd\">\n        <path\n          // tslint:disable-next-line:max-line-length\n          d=\"M9 3.48c1.69 0 2.83.73 3.48 1.34l2.54-2.48C13.46.89 11.43 0 9 0 5.48 0 2.44 2.02.96 4.96l2.91 2.26C4.6 5.05 6.62 3.48 9 3.48z\"\n          fill=\"#EA4335\"\n        />\n        <path\n          // tslint:disable-next-line:max-line-length\n          d=\"M17.64 9.2c0-.74-.06-1.28-.19-1.84H9v3.34h4.96c-.1.83-.64 2.08-1.84 2.92l2.84 2.2c1.7-1.57 2.68-3.88 2.68-6.62z\"\n          fill=\"#4285F4\"\n        />\n        <path\n          // tslint:disable-next-line:max-line-length\n          d=\"M3.88 10.78A5.54 5.54 0 0 1 3.58 9c0-.62.11-1.22.29-1.78L.96 4.96A9.008 9.008 0 0 0 0 9c0 1.45.35 2.82.96 4.04l2.92-2.26z\"\n          fill=\"#FBBC05\"\n        />\n        <path\n          // tslint:disable-next-line:max-line-length\n          d=\"M9 18c2.43 0 4.47-.8 5.96-2.18l-2.84-2.2c-.76.53-1.78.9-3.12.9-2.38 0-4.4-1.57-5.12-3.74L.97 13.04C2.45 15.98 5.48 18 9 18z\"\n          fill=\"#34A853\"\n        />\n        <path fill=\"none\" d=\"M0 0h18v18H0z\" />\n      </g>\n    </svg>\n  </div>\n)\n","/** QueryBundleRequest constants */\nexport const BUNDLE_MASK_QUERY_RESULTS: number = 1\nexport const BUNDLE_MASK_QUERY_COUNT: number = 2\nexport const BUNDLE_MASK_QUERY_SELECT_COLUMNS: number = 4\nexport const BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE: number = 8\nexport const BUNDLE_MASK_QUERY_COLUMN_MODELS: number = 16\nexport const BUNDLE_MASK_QUERY_FACETS: number = 32\n/** EntityBundle constants */\nexport const ENTITY_BUNDLE_MASK_ENTITY: number = 1\nexport const ENTITY_BUNDLE_MASK_ANNOTATIONS: number = 2\nexport const ENTITY_BUNDLE_MASK_PERMISSIONS: number = 4\nexport const ENTITY_BUNDLE_MASK_ENTITY_PATH: number = 8\nexport const ENTITY_BUNDLE_MASK_HAS_CHILDREN: number = 32\nexport const ENTITY_BUNDLE_MASK_ACL: number = 64\nexport const ENTITY_BUNDLE_MASK_FILE_HANDLES: number = 2048\nexport const ENTITY_BUNDLE_MASK_TABLE_DATA: number = 4096\nexport const ENTITY_BUNDLE_MASK_ROOT_WIKI_ID: number = 8192\nexport const ENTITY_BUNDLE_MASK_BENEFACTOR_ACL: number = 16384\nexport const ENTITY_BUNDLE_MASK_DOI: number = 32768\nexport const ENTITY_BUNDLE_MASK_FILE_NAME: number = 65536\nexport const ENTITY_BUNDLE_MASK_THREAD_COUNT: number = 131072\nexport const ENTITY_BUNDLE_MASK_RESTRICTION_INFORMATION: number = 262144\n/** Row Types  */\nexport const STUDY: string = 'study'\n// for study icons\nexport const STUDY_ACTIVE: string = 'study active'\nexport const STUDY_COMPLETE: string = 'study complete'\nexport const DATASET: string = 'dataset'\nexport const AMP_CONSORTIUM: string = 'AMP_Consortium'\nexport const FUNDER: string = 'funder'\nexport const PUBLICATION: string = 'publication'\nexport const TOOL: string = 'tool'\nexport const CSBC_PROJECT: string = 'CSBC_PROJECT'\nexport const CSBC_PUBLICATION: string = 'CSBC_PUBLICATION'\nexport const CSBC_STUDY: string = 'CSBC_STUDY'\nexport const CSBC_DATASET: string = 'CSBC_DATSET'\nexport const GENERIC_CARD: string = 'GENERIC_CARD'\nexport const COMPUTATIONAL: string = 'computational'\nexport const EXPERIMENTAL: string = 'experimental'\nexport const CLINICAL: string = 'clinical'\nexport const PROJECT: string = 'Project'\nexport const PAGE_SIZE: number = 25\n// For User Profile Cards\nexport const SMALL_USER_CARD: string = 'SMALL USER CARD'\nexport const MEDIUM_USER_CARD: string = 'MEDIUM USER CARD'\nexport const LARGE_USER_CARD: string = 'LARGE USER CARD'\nexport const SEPERATOR = 'SEPERATOR'\n","import { BatchFileResult } from './jsonResponses/BatchFileResult'\nimport { Entity } from './jsonResponses/Entity'\nimport { FileHandleResults } from './jsonResponses/FileHandleResults'\nimport { SynapseVersion } from './jsonResponses/SynapseVersion'\nimport { QueryResultBundle } from './jsonResponses/Table/QueryResultBundle'\nimport { WikiPage } from './jsonResponses/WikiPage'\nimport { UserBundle } from './jsonResponses/UserBundle'\nimport { AsyncJobId } from './jsonResponses/Table/AsyncJobId'\nimport { MultipartUploadRequest } from './jsonResponses/MultipartUploadRequest'\nimport { BatchPresignedUploadUrlRequest } from './jsonResponses/BatchPresignedUploadUrlRequest'\nimport { BatchPresignedUploadUrlResponse } from './jsonResponses/BatchPresignedUploadUrlResponse'\nimport { MultipartUploadStatus } from './jsonResponses/MultipartUploadStatus'\nimport { FileUploadComplete } from './jsonResponses/FileUploadComplete'\nimport browserMd5File from 'browser-md5-file'\nimport { AddPartResponse } from './jsonResponses/AddPartResponse'\nimport { EntityLookupRequest } from './jsonResponses/EntityLookupRequest'\nimport { FileEntity } from './jsonResponses/FileEntity'\nimport { UserProfile } from './jsonResponses/UserProfile'\nimport { AccessControlList } from './jsonResponses/AccessControlList'\nimport { Submission } from './jsonResponses/Submission'\n\n// TODO: Create JSON response types for all return types\nexport const IS_DEV_ENV = (process.env.NODE_ENV === 'development') ? true : false\nexport const DEV_ENV_SESSION_LOCAL_STORAGE_KEY = 'session-token-dev-mode-only'\nconst DEFAULT_ENDPOINT: string = 'https://repo-prod.prod.sagebase.org/'\nconst DEFAULT_SWC_ENDPOINT = 'https://www.synapse.org/'\n// Max size file that we will allow the caller to read into memory (5MB)\nconst MAX_JS_FILE_DOWNLOAD_SIZE = 5242880\n\nexport const AUTH_PROVIDER = 'GOOGLE_OAUTH_2_0'\n// This corresponds to the Synapse-managed S3 storage location:\nexport const SYNAPSE_STORAGE_LOCATION_ID = 1\nexport const getRootURL = () => {\n  const portString = window.location.port ? `:${window.location.port}` : ''\n  return `${window.location.protocol}//${window.location.hostname}${portString}/`\n}\n\nfunction delay(t: any) {\n  return new Promise((resolve) => {\n    setTimeout(resolve.bind(null, {}), t)\n  })\n}\nfunction parseJSON(response: any) {\n  return response.text()\n  .then((text: string) => {\n    let parsedJson = ''\n    try {\n      parsedJson = JSON.parse(text)\n    } catch (err) {\n      console.log('Caught exception with parsing json ', err)\n      parsedJson = text\n    }\n    return parsedJson ? parsedJson : {}\n  }).catch(\n    // this should never happen!\n    (err: string) => {\n      console.log('Caught exception loading response text ', err)\n      return {}\n    }\n  )\n}\nconst fetchWithExponentialTimeout = (url: string, options: any, delayMs: any, retries: number): Promise<any> => {\n  return fetch(url, options)\n    .then((resp) => {\n      if (resp.status > 199 && resp.status < 300) {\n        if (resp.status === 204) {\n          // the response is empty, don't try to parse an empty response\n          return resp\n        }\n        // ok!\n        return parseJSON(resp)\n      }\n      if (resp.status === 429 || resp.status === 0) {\n        // TOO_MANY_REQUESTS_STATUS_CODE, or network connection is down.  Retry after a couple of seconds.\n        if (retries === 1) {\n          return Promise.reject({\n            reason: resp.statusText,\n            statusCode: resp.status\n          })\n        }\n        return delay(delayMs).then(() => {\n          return fetchWithExponentialTimeout(url, options, delayMs * 2, retries - 1)\n        })\n      }\n      // error status that indicates no more retries\n      return resp\n        .json()\n        .then((json) => {\n          // on okay response return json, o.w. reject with json and\n          // send to catch block\n          const error = {\n            reason: json.reason,\n            status: resp.status\n          }\n          return resp.ok ? json : Promise.reject(error)\n        })\n        .catch((error) => {\n          // call failed above\n          if (error.reason && error.status) {\n            // successfull return from server but invalid call\n            // the call was recieved, but staus wasn't ok-- return the json response from above\n            // from the response directly\n            return Promise.reject({\n              reason: error.reason,\n              statusCode: error.status\n            })\n          }\n          return Promise.reject({\n            reason: resp.statusText,\n            statusCode: resp.status\n          })\n        })\n    })\n    .catch((error) => {\n      // this should never happen\n      return Promise.reject(error)\n    })\n}\n\nexport const doPost = (\n  url: string,\n  requestJsonObject: any,\n  sessionToken: string | undefined,\n  initCredentials: string | undefined,\n  endpoint: string\n  ): Promise<any> => {\n  const options: any = {\n    body: JSON.stringify(requestJsonObject),\n    headers: {\n      Accept: '*/*',\n      'Access-Control-Request-Headers': 'sessiontoken',\n      'Content-Type': 'application/json',\n    },\n    method: 'POST',\n    mode: 'cors',\n    credentials: initCredentials\n  }\n  if (initCredentials) {\n    options.credentials = initCredentials\n  }\n  if (sessionToken) {\n    options.headers.sessionToken = sessionToken\n  }\n  return fetchWithExponentialTimeout(endpoint + url, options, 1000, 5)\n}\nexport const doGet = (\n                      url: string,\n                      sessionToken: string | undefined,\n                      initCredentials: string | undefined,\n                      endpoint: string) => {\n  const options: any = {\n    headers: {\n      Accept: '*/*',\n      'Access-Control-Request-Headers': 'sessiontoken'\n    },\n    method: 'GET',\n    mode: 'cors'\n  }\n  if (initCredentials) {\n    options.credentials = initCredentials\n  }\n  if (sessionToken) {\n    options.headers.sessionToken = sessionToken\n  }\n  return fetchWithExponentialTimeout(endpoint + url, options, 1000, 5)\n}\n\nexport const doPut = (\n  url: string,\n  requestJsonObject: any,\n  sessionToken: string | undefined,\n  initCredentials: string | undefined,\n  endpoint: string\n): Promise<any> => {\n  const options: any = {\n    body: JSON.stringify(requestJsonObject),\n    headers: {\n      Accept: '*/*',\n      'Access-Control-Request-Headers': 'sessiontoken',\n      'Content-Type': 'application/json',\n    },\n    method: 'PUT',\n    mode: 'cors'\n  }\n  if (initCredentials) {\n    options.credentials = initCredentials\n  }\n  if (sessionToken) {\n    options.headers.sessionToken = sessionToken\n  }\n  return fetchWithExponentialTimeout(endpoint + url, options, 1000, 5)\n}\n\nexport const putRefreshSessionToken = (sessionToken: string, endpoint: string = DEFAULT_ENDPOINT) => {\n  return doPut('/auth/v1/session', { sessionToken }, undefined, undefined, endpoint)\n}\n\nexport const getVersion = (endpoint: string = DEFAULT_ENDPOINT): Promise<SynapseVersion> => {\n  return doGet('/repo/v1/version', undefined, undefined, endpoint) as Promise<SynapseVersion>\n}\n\nexport const getQueryTableResultsFromJobId = (\n  entityId: string,\n  jobId: string,\n  sessionToken: string | undefined = undefined,\n  endpoint: string = DEFAULT_ENDPOINT,\n  updateParentState?: any\n): Promise<QueryResultBundle> => {\n  return doGet(`/repo/v1/entity/${entityId}/table/query/async/get/${jobId}`, sessionToken, undefined, endpoint)\n    .then((resp: any) => {\n      // is this the job status?\n      if (resp.jobState && resp.jobState !== 'FAILED') {\n        updateParentState && updateParentState({\n          asyncJobStatus: resp\n        })\n        // still processing, wait for a second and try again\n        return delay(500).then(() => {\n          return getQueryTableResultsFromJobId(entityId, jobId, sessionToken, endpoint, updateParentState)\n        })\n      }\n      // these must be the query results!\n      return resp\n    })\n    .catch((error) => {\n      throw error\n    })\n}\n\n/**\n * http://docs.synapse.org/rest/POST/entity/id/table/query/nextPage/async/start.html\n * @param {*} queryBundleRequest\n * @param {*} sessionToken\n * @param {*} endpoint\n */\nexport const getQueryTableResults = (\n  queryBundleRequest: any,\n  sessionToken: string | undefined = undefined,\n  updateParentState?: any,\n  endpoint: string = DEFAULT_ENDPOINT,\n): Promise<QueryResultBundle> => {\n  return doPost(`/repo/v1/entity/${queryBundleRequest.entityId}/table/query/async/start`, queryBundleRequest, sessionToken, undefined, endpoint)\n  .then((resp: AsyncJobId) => {\n    return getQueryTableResultsFromJobId(\n      queryBundleRequest.entityId, resp.token, sessionToken, endpoint, updateParentState\n    )\n  })\n  .catch((error: any) => {\n    throw error\n  })\n}\n/**\n *  Run and return results from queryBundleRequest, queryBundle request must be of the\n *  form:\n *     {\n *        concreteType: String,\n *        query: {\n *           sql: String,\n *           isConsistent: Boolean,\n *           partMask: Number\n *        }\n *     }\n * @param {*} queryBundleRequest\n * @param {*} [sessionToken=undefined]\n * @param {boolean} [onlyGetFacets=false] Specify if the query only needs facets and no\n * data-- (internally this limits the row count to 1 on the request)\n * @returns Full dataset from synapse table query\n */\nexport const getFullQueryTableResults = async (queryBundleRequest: any,\n                                               sessionToken: string | undefined = undefined)\n                                               : Promise<QueryResultBundle> => {\n  // TODO: Find out why theres a bug causing the query limit\n  const { query, ...rest } = queryBundleRequest\n  let data: any = {}\n  let maxPageSize: number = 150\n  const queryRequest: any = {\n    ...rest,\n    query: { ...query, limit: maxPageSize }\n  }\n  // Have to make two \"sets\" of calls for query, the first one tells us the maximum size per page of data\n  // we can get, the following uses that maximum and offsets to the appropriate location to get the data\n  // afterwards, the process repeats\n  await getQueryTableResults(queryRequest, sessionToken).then(\n    async (initData: QueryResultBundle) => {\n      let queryCount: any = initData.queryResult.queryResults.rows.length\n      let currentQueryCount: number = queryCount\n      data = initData\n      // Get the subsequent data, note- although the function calls itself, it runs\n      // iteratively due to the await\n      const getData = async () => {\n        if (queryCount === maxPageSize) {\n          maxPageSize = initData.maxRowsPerPage!\n          const queryRequestWithMaxPageSize = {\n            ...rest,\n            query: { ...query, limit: maxPageSize, offset: currentQueryCount }\n          }\n          await getQueryTableResults(queryRequestWithMaxPageSize, sessionToken)\n            .then((postData: any) => {\n              queryCount += postData.queryResult.queryResults.rows.length\n              if (queryCount > 0) {\n                currentQueryCount += queryCount\n                data.queryResult.queryResults.rows.push(\n                  ...postData.queryResult.queryResults.rows // ... spread operator to push all elements on\n                )\n              }\n              return getData()\n            })\n            .catch((err) => {\n              console.log('Error on getting table results ', err)\n            })\n        } else {\n          // set data to this plots sql in the query data\n          return data\n        }\n      }\n      return getData()\n    })\n  return data\n}\n\n/**\n *  Log-in using the given username and password.  Will return a session token that must be used in\n *  authenticated requests.\n *  http://docs.synapse.org/rest/POST/login.html\n */\nexport const login = (username: string, password: string, endpoint = DEFAULT_ENDPOINT) => {\n  return doPost('/auth/v1/login', { username, password }, undefined, undefined, endpoint)\n}\n/**\n * Get redirect url\n * https://docs.synapse.org/rest/POST/oauth2/authurl.html\n * @param {*} provider\n * @param {*} redirectUrl\n * @param {*} endpoint\n */\nexport let oAuthUrlRequest = (provider: string, redirectUrl: string, endpoint = DEFAULT_ENDPOINT) => {\n  return doPost('/auth/v1/oauth2/authurl', { provider, redirectUrl }, undefined, undefined, endpoint)\n}\n/**\n * Get session token from SSO\n * https://docs.synapse.org/rest/POST/oauth2/session.html\n * @param {*} provider\n * @param {*} authenticationCode\n * @param {*} redirectUrl\n * @param {*} endpoint\n */\nexport let oAuthSessionRequest = (provider: string,\n                                  authenticationCode: string | number,\n                                  redirectUrl: string,\n                                  endpoint: any = DEFAULT_ENDPOINT) => {\n  return doPost(\n    '/auth/v1/oauth2/session',\n    { provider, authenticationCode, redirectUrl }, undefined, undefined, endpoint)\n}\n/**\n * Create an entity (Project, Folder, File, Table, View)\n * http://docs.synapse.org/rest/POST/entity.html\n */\nexport const createEntity = (entity: any, sessionToken: string | undefined, endpoint: string = DEFAULT_ENDPOINT) => {\n  return doPost('/repo/v1/entity', entity, sessionToken, undefined, endpoint)\n}\n/**\n * Create a project with the given name.\n * http://docs.synapse.org/rest/POST/entity.html\n */\nexport const createProject = (name: string,\n                              sessionToken: string | undefined,\n                              endpoint: string = DEFAULT_ENDPOINT)\n                              : Promise<Response> => {\n  return createEntity(\n    {\n      name,\n      concreteType: 'org.sagebionetworks.repo.model.Project'\n    },\n    sessionToken,\n    endpoint\n  )\n}\n\n/**\n * Return this user's UserProfile\n * http://docs.synapse.org/rest/GET/userProfile.html\n */\nexport const getUserProfile = (sessionToken: string | undefined, endpoint = DEFAULT_ENDPOINT) => {\n  return doGet('/repo/v1/userProfile', sessionToken, undefined, endpoint)\n}\n\n/**\n * Return this user's UserProfile\n * http://docs.synapse.org/rest/GET/userProfile.html\n */\nexport const getUserProfileById = (\n  sessionToken: string | undefined, ownerId: string, endpoint = DEFAULT_ENDPOINT) => {\n  return doGet(`/repo/v1/userProfile/${ownerId}`, sessionToken, undefined, endpoint)\n}\n\n/**\n * Return this user's profile bundle\n * https://docs.synapse.org/rest/org/sagebionetworks/repo/model/UserBundle.html\n */\nexport const getUserBundle = (\n  id: string, mask: number, sessionToken: string | undefined, endpoint = DEFAULT_ENDPOINT\n): Promise<UserBundle> => {\n  return doGet(`repo/v1/user/${id}/bundle?mask=${mask}`, sessionToken, undefined, endpoint)\n}\n\nexport type UserProfileList = { list: UserProfile [] }\n/**\n * Return the User Profiles for the given list of user IDs\n * http://docs.synapse.org/rest/POST/userProfile.html\n */\nexport const getUserProfiles =\n  (\n    list: string[],\n    sessionToken: string | undefined = undefined,\n    endpoint: string = DEFAULT_ENDPOINT\n  ): Promise<UserProfileList> => {\n    return doPost('/repo/v1/userProfile', { list }, sessionToken, undefined, endpoint)\n  }\n\n/**\n * Return the children (Files/Folders) of the given entity (Project or Folder).\n * http://docs.synapse.org/rest/POST/entity/children.html\n */\nexport const getEntityChildren = (request: any,\n                                  sessionToken: string | undefined = undefined,\n                                  endpoint: string = DEFAULT_ENDPOINT) => {\n  return doPost('/repo/v1/entity/children', request, sessionToken, undefined, endpoint)\n}\n/**\n * Retrieve an entityId for a given parent ID and entity name.\n * https://docs.synapse.org/rest/POST/entity/child.html\n */\nexport const lookupChildEntity = (\n  request: EntityLookupRequest,\n  sessionToken: string | undefined = undefined,\n  endpoint: string = DEFAULT_ENDPOINT) => {\n  return doPost('/repo/v1/entity/child', request, sessionToken, undefined, endpoint)\n}\n\n/**\n * Get a batch of pre-signed URLs and/or FileHandles for the given list of FileHandleAssociations.\n * http://docs.synapse.org/rest/POST/fileHandle/batch.html\n */\nexport const getFiles = (request: any,\n                         sessionToken: string | undefined = undefined,\n                         endpoint: string = DEFAULT_ENDPOINT): Promise<BatchFileResult> => {\n  return doPost('/file/v1/fileHandle/batch', request, sessionToken, undefined, endpoint)\n}\n/**\n * Bundled access to Entity and related data components.\n * An EntityBundle can be used to create, fetch, or update an Entity and associated\n * objects with a single web service request.\n * See SynapseClient.test.js for an example partsMask.\n * https://docs.synapse.org/rest/org/sagebionetworks/repo/model/Entity.html\n */\ntype GetEntity = <T extends Entity>(sessionToken: string | undefined, entityId: string | number, endpoint?: string) => Promise<T>\n\nexport const getEntity: GetEntity = <T>(sessionToken: string | undefined = undefined,\n                          entityId: string | number,\n                          endpoint: string = DEFAULT_ENDPOINT) => {\n  const url = `/repo/v1/entity/${entityId}`\n  return doGet(url, sessionToken, undefined, endpoint) as Promise<T>\n}\n\nexport const updateEntity = (\n  entity: Entity,\n  sessionToken: string | undefined = undefined,\n  endpoint = DEFAULT_ENDPOINT): Promise<Entity> => {\n  const url = `/repo/v1/entity/${entity.id}`\n  return doPut(url, entity, sessionToken, undefined, endpoint)\n}\n\n/**\n * Bundled access to Entity and related data components.\n * An EntityBundle can be used to create, fetch, or update an Entity and\n * associated objects with a single web service request.\n * See SynapseClient.test.js for an example partsMask.\n * http://docs.synapse.org/rest/GET/entity/id/version/versionNumber/bundle.html\n */\nexport const getEntityBundleForVersion = (\n  entityId: string | number,\n  version: string | number | undefined,\n  partsMask: string | number,\n  sessionToken: string | undefined = undefined,\n  endpoint = DEFAULT_ENDPOINT\n) => {\n  let url = `/repo/v1/entity/${entityId}`\n  if (version) {\n    url += `/version/ + ${version}`\n  }\n  url += `/bundle?mask= ${partsMask}`\n  return doGet(url, sessionToken, undefined, endpoint)\n}\n/**\n * Get Wiki page contents, call is of the form:\n * http://docs.synapse.org/rest/GET/entity/ownerId/wiki.html\n */\nexport const getEntityWiki = (sessionToken: string | undefined,\n                              ownerId: string | undefined,\n                              wikiId: string | undefined,\n                              endpoint: string = DEFAULT_ENDPOINT) => {\n  const url = `/repo/v1/entity/${ownerId}/wiki/${wikiId}`\n  return doGet(url, sessionToken, undefined, endpoint) as Promise<WikiPage>\n}\n\n/**\n * Returns synapse user favorites list given their session token\n * http://docs.synapse.org/rest/GET/favorite.html\n */\nexport const getUserFavorites = (sessionToken: string | undefined, endpoint = DEFAULT_ENDPOINT) => {\n  const url = 'repo/v1/favorite?offset=0&limit=200'\n  return doGet(url, sessionToken, undefined, endpoint)\n}\n/**\n *  http://docs.synapse.org/rest/GET/projects/type.html\n *  @param {String} projectDetails Can be \"MY_PROJECTS\", \"MY_CREATED_PROJECTS\" or \"MY_PARTICIPATED_PROJECTS\"\n */\nexport const getUserProjectList = (sessionToken: string | undefined,\n                                   projectDetails: string,\n                                   endpoint = DEFAULT_ENDPOINT) => {\n  const url = `repo/v1/projects/${projectDetails}?offset=0&limit=200`\n  return doGet(url, sessionToken, undefined, endpoint)\n}\n/**\n * Get the user's list of teams they are on\n *\n * @param {*} id ownerID of the synapse user see - http://docs.synapse.org/rest/org/sagebionetworks/repo/model/UserProfile.html\n */\nexport const getUserTeamList = (sessionToken: string | undefined, id: string | number, endpoint = DEFAULT_ENDPOINT) => {\n  const url = `repo/v1/user/${id}/team?offset=0&limit=200`\n  return doGet(url, sessionToken, undefined, endpoint)\n}\n/**\n * Get the user's list of teams they are on\n *\n * @param {*} id ownerID of the synapse user see -https://docs.synapse.org/rest/GET/teamMembers/id.html\n * @param {*} fragment (optional) a prefix of the user's first or last name or email address (optional)\n * @param {*} limit    (optional) the maximum number of members to return (default 10, max limit 50)\n * @param {*} offset   (optional) the starting index of the returned results (default 0)\n *\n */\nexport const getTeamList = (\n  sessionToken: string | undefined,\n  id: string | number,\n  fragment: string = '',\n  limit: number = 10,\n  offset: number = 0,\n  endpoint: string = DEFAULT_ENDPOINT\n) => {\n  const url = `repo/v1/teamMembers/${id}?limit=${limit}&offset=${offset}${fragment ? `&fragment=${fragment}` : ''}`\n  return doGet(url, sessionToken, undefined, endpoint)\n}\n\nexport const getWikiAttachmentsFromEntity =\n    (\n      sessionToken: string | undefined,\n      id: string | number,\n      wikiId: string | number,\n      endpoint: string = DEFAULT_ENDPOINT): Promise<FileHandleResults> => {\n      const url = `repo/v1/entity/${id}/wiki/${wikiId}/attachmenthandles`\n      return doGet(url, sessionToken, undefined, endpoint)\n    }\nexport const getWikiAttachmentsFromEvaluation = (sessionToken: string | undefined,\n                                                 id: string | number,\n                                                 wikiId: string | number,\n                                                 endpoint: string = DEFAULT_ENDPOINT) => {\n  const url = `repo/v1/evaluation/${id}/wiki/${wikiId}/attachmenthandles`\n  return doGet(url, sessionToken, undefined, endpoint)\n}\n/**\n * Set the session token cookie.  Note that this will only succeed if your app is running on\n * a .synapse.org subdomain.\n *\n * @param {*} token Session token.  If undefined, then call should instruct the browser to delete the cookie.\n */\nexport const setSessionTokenCookie = (token: string | undefined) => {\n  if (!IS_DEV_ENV) {\n    return doPost('Portal/sessioncookie', { sessionToken: token }, undefined, 'include', DEFAULT_SWC_ENDPOINT)\n  }\n  // else (is in dev env)\n  if (token) {\n    localStorage.setItem(DEV_ENV_SESSION_LOCAL_STORAGE_KEY, token)\n  } else {\n    localStorage.removeItem(DEV_ENV_SESSION_LOCAL_STORAGE_KEY)\n  }\n  return Promise.resolve()\n}\n/**\n * Get the current session token from a cookie.  Note that this will only succeed if your app is running on\n * a .synapse.org subdomain.\n */\nexport const getSessionTokenFromCookie = () => {\n  if (!IS_DEV_ENV) {\n    return doGet('Portal/sessioncookie', undefined, 'include', DEFAULT_SWC_ENDPOINT)\n  }\n  // else (is in dev env)\n  const sessionToken = localStorage.getItem(DEV_ENV_SESSION_LOCAL_STORAGE_KEY)\n  return Promise.resolve(sessionToken)\n}\n\nexport const getPrincipalAliasRequest = (sessionToken: string | undefined,\n                                         alias: string,\n                                         type: string,\n                                         endpoint: string = DEFAULT_ENDPOINT) => {\n  const url = 'repo/v1/principal/alias'\n  return doPost(url, { alias, type }, sessionToken, undefined, endpoint)\n}\n\n/*\nDuring SSO login, the authorization provider (Google) will\nsend the user back to the portal with an authorization code,\nwhich can be exchanged for a Synapse user session.\nThis function should be called whenever the root App is initialized\n(to look for this code parameter and complete the round-trip).\n*/\nexport const detectSSOCode = () => {\n  const redirectURL = getRootURL()\n  // 'code' handling (from SSO) should be preformed on the root page, and then redirect to original route.\n  let code: URL | null | string = new URL(window.location.href)\n  // in test environment the searchParams isn't defined\n  const { searchParams } = code\n  if (!searchParams) {\n    return\n  }\n  code = searchParams.get('code')\n  if (code) {\n    oAuthSessionRequest(AUTH_PROVIDER, code, `${redirectURL}?provider=${AUTH_PROVIDER}`)\n              .then((synToken: any) => {\n                setSessionTokenCookie(synToken.sessionToken).then(() => {\n                  // go back to original route after successful SSO login\n                  const originalUrl = localStorage.getItem('after-sso-login-url')\n                  localStorage.removeItem('after-sso-login-url')\n                  if (originalUrl) {\n                    window.location.replace(originalUrl)\n                  }\n                }).catch((errSetSession) => {\n                  console.error('Error on set sesion token cookie ', errSetSession)\n                })\n              })\n              .catch((err: any) => {\n                if (err.statusCode === 404) {\n                  // Synapse account not found, send to registration page\n                  window.location.replace('https://www.synapse.org/#!RegisterAccount:0')\n                }\n                console.error('Error on sso sign in ', err)\n              })\n  }\n}\n\nexport const signOut = () => {\n  setSessionTokenCookie(undefined).then(() => {\n    window.location.reload()\n  }).catch((err) => {\n    console.error('err when clearing the session cookie ', err)\n  })\n}\n\n/**\n * Upload file.  Note that this currently only supports Synapse storage (Sage s3 bucket)\n * @param sessionToken\n * @param file\n * @param endpoint\n */\nexport const uploadFile = (\n  sessionToken: string | undefined,\n  filename: string,\n  file: Blob,\n  endpoint: string = DEFAULT_ENDPOINT,\n) => {\n  return new Promise<FileUploadComplete>((fileUploadResolve, fileUploadReject) => {\n    const partSize: number = Math.max(5242880, (file.size / 10000))\n    const request: MultipartUploadRequest = {\n      contentType: file.type,\n      fileName: filename,\n      fileSizeBytes: file.size,\n      partSizeBytes: partSize,\n      storageLocationId: SYNAPSE_STORAGE_LOCATION_ID\n    }\n    calculateMd5(file).then((md5: string) => {\n      request.contentMD5Hex = md5\n      startMultipartUpload(sessionToken, filename, file, request, fileUploadResolve, fileUploadReject, endpoint)\n    })\n  })\n}\n\nconst calculateMd5 = (\n  fileBlob: File | Blob\n): Promise<string> => {\n  const bmf = new browserMd5File()\n  return new Promise((resolve, reject) => {\n    bmf.md5(\n      fileBlob,\n      (error: any, md5: string) => {\n        if (md5) {\n          resolve(md5)\n        } else if (error) {\n          reject(error)\n        }\n      },\n      (progress: number) => {\n        // console.log('progress: ', progress)\n      }\n    )\n  })\n}\n\nconst processFilePart = (\n  partNumber: number,\n  multipartUploadStatus: MultipartUploadStatus,\n  sessionToken: string | undefined,\n  fileName: string,\n  file: Blob,\n  request: MultipartUploadRequest,\n  fileUploadResolve: (fileUpload: FileUploadComplete) => void,\n  fileUploadReject: (reason: any) => void,\n  endpoint: string = DEFAULT_ENDPOINT\n) => {\n  if (multipartUploadStatus.clientSidePartsState![partNumber - 1]) {\n    // no-op. this part has already been processed!\n    return\n  }\n\n  const uploadId = multipartUploadStatus.uploadId\n  const presignedUploadUrlRequest: BatchPresignedUploadUrlRequest = {\n    uploadId,\n    contentType: 'application/octet-stream', // each part is binary\n    partNumbers: [partNumber],\n  }\n  const presignedUrlUrl = `/file/v1/file/multipart/${uploadId}/presigned/url/batch`\n  doPost(presignedUrlUrl, presignedUploadUrlRequest, sessionToken, undefined, endpoint).then(\n    async (presignedUrlResponse: BatchPresignedUploadUrlResponse) => {\n      const presignedUrl = presignedUrlResponse.partPresignedUrls[0].uploadPresignedUrl\n      // calculate the byte range\n      const startByte = (partNumber - 1) * request.partSizeBytes\n      let endByte = partNumber * request.partSizeBytes - 1\n      if (endByte >= request.fileSizeBytes) {\n        endByte = request.fileSizeBytes - 1\n      }\n      const fileSlice = file.slice(startByte, endByte + 1, presignedUploadUrlRequest.contentType)\n      await uploadFilePart(presignedUrl, fileSlice, presignedUploadUrlRequest.contentType)\n      // uploaded the part.  calculate md5 of the part and add the part to the upload\n      calculateMd5(fileSlice).then((md5: string) => {\n        const addPartUrl = `/file/v1/file/multipart/${uploadId}/add/${partNumber}?partMD5Hex=${md5}`\n        doPut(addPartUrl, undefined, sessionToken, undefined, endpoint).then(\n          (addPartResponse: AddPartResponse) => {\n            if (addPartResponse.addPartState === 'ADD_SUCCESS') {\n              // done with this part!\n              multipartUploadStatus.clientSidePartsState![partNumber - 1] = true\n              checkUploadComplete(\n                multipartUploadStatus,\n                fileName,\n                sessionToken,\n                fileUploadResolve,\n                fileUploadReject,\n                endpoint)\n            } else {\n              // retry after a brief delay\n              delay(1000).then(() => {\n                processFilePart(\n                  partNumber,\n                  multipartUploadStatus,\n                  sessionToken,\n                  fileName,\n                  file,\n                  request,\n                  fileUploadResolve,\n                  fileUploadReject,\n                  endpoint)\n              })\n            }\n          })\n      })\n    })\n}\nexport const checkUploadComplete = (\n  status: MultipartUploadStatus,\n  fileHandleName: string,\n  sessionToken: string | undefined,\n  fileUploadResolve: (fileUpload: FileUploadComplete) => void,\n  fileUploadReject: (reason: any) => void,\n  endpoint: string = DEFAULT_ENDPOINT) => {\n  // if all client-side parts are true (uploaded), then complete the upload and get the file handle!\n  if (status.clientSidePartsState!.every((v) => { return v })) {\n    const url = `/file/v1/file/multipart/${status.uploadId}/complete`\n    doPut(url, undefined, sessionToken, undefined, endpoint).then((newStatus: MultipartUploadStatus) => {\n      // success!\n      fileUploadResolve({ fileHandleId: newStatus.resultFileHandleId, fileName: fileHandleName })\n    }).catch((error) => {\n      fileUploadReject(error)\n    })\n  }\n}\nconst uploadFilePart = async (presignedUrl: string, file: any, contentType: string) => {\n  // TODO: could try using axios to get upload progress, then update the client-side part state (change to numbers from 0-1)\n  // This would give progress for the single file (across all parts).\n  // The parent would still need to figure out progress (for the total file set).\n  await fetch(presignedUrl, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': contentType\n    },\n    body: file\n  })\n}\nexport const startMultipartUpload = (\n  sessionToken: string | undefined,\n  fileName: string,\n  file: Blob,\n  request: MultipartUploadRequest,\n  fileUploadResolve: (fileUpload: FileUploadComplete) => void,\n  fileUploadReject: (reason: any) => void,\n  endpoint: string = DEFAULT_ENDPOINT) => {\n  const url = 'file/v1/file/multipart'\n  doPost(url, request, sessionToken, undefined, endpoint).then(async (status: MultipartUploadStatus) => {\n    // started the upload\n    // keep track of the part state client-side\n    const clientSidePartsState: boolean[] = status.partsState.split('').map(bit => bit === '1')\n    status.clientSidePartsState = clientSidePartsState\n    for (let i = 0; i < clientSidePartsState.length; i = i + 1) {\n      if (!clientSidePartsState[i]) {\n        // upload this part.  note that partNumber is always the index+1\n        await processFilePart(\n          i + 1,\n          status,\n          sessionToken,\n          fileName,\n          file,\n          request,\n          fileUploadResolve,\n          fileUploadReject,\n          endpoint)\n      }\n    }\n    // in case there is no upload work to do!\n    checkUploadComplete(status, fileName, sessionToken, fileUploadResolve, fileUploadReject, endpoint)\n  }).catch((error) => {\n    fileUploadReject(error)\n  })\n}\n\n/**\n * Return the content of the file (latest version) associated to the given FileEntity.\n * Be aware that if the target file size > 5MB, this method will throw an error.\n * @param sessionToken\n * @param fileEntity\n * @param endpoint\n */\nexport const getFileEntityContent = (\n  sessionToken: string,\n  fileEntity: FileEntity,\n  endpoint: string = DEFAULT_ENDPOINT\n): Promise<any> => {\n  // get the presigned URL, download the data, and send that back (via resolve())\n  return new Promise((resolve, reject) => {\n    const fileHandleAssociationList = [\n      {\n        associateObjectId: fileEntity.id,\n        associateObjectType: 'FileEntity',\n        fileHandleId: fileEntity.dataFileHandleId\n      }\n    ]\n    const request: any = {\n      includeFileHandles: true,\n      includePreSignedURLs: true,\n      includePreviewPreSignedURLs: false,\n      requestedFiles: fileHandleAssociationList\n    }\n    getFiles(request, sessionToken, endpoint).then(\n      (data: BatchFileResult) => {\n        const presignedUrl = data.requestedFiles[0].preSignedURL\n        const fileHandle = data.requestedFiles[0].fileHandle\n        // sanity check!  must be less than 5MB\n        if (fileHandle.contentSize < MAX_JS_FILE_DOWNLOAD_SIZE) {\n          fetch(presignedUrl, {\n            method: 'GET',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {\n              'Content-Type': fileHandle.contentType,\n            }\n          }).then((response) => {\n            response.text().then((text) => {\n              resolve(text)\n            })\n          })\n        } else {\n          reject('File size exceeds max (5MB)')\n        }\n      }\n    ).catch((err) => {\n      reject(err)\n    })\n  })\n}\n\n/**\n * Create an ACL\n * https://docs.synapse.org/rest/POST/entity/id/acl.html\n */\nexport const createACL = (\n  entityId: string,\n  acl: AccessControlList,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) => {\n  return doPost(`/repo/v1/entity/${entityId}/acl`, acl, sessionToken, undefined, endpoint)\n}\n\n/**\n * Submit an entity to an evaluation queue\n * https://docs.synapse.org/rest/POST/evaluation/submission.html\n */\nexport const submitToEvaluation = (\n  submission: Submission,\n  etag: string,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) => {\n  return doPost(`/repo/v1/evaluation/submission?etag=${etag}`, submission, sessionToken, undefined, endpoint)\n}\n\n/**\n * Get an evaluation queue\n * https://docs.synapse.org/rest/GET/evaluation/evalId.html\n */\nexport const getEvaluation = (\n  evalId: string,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) => {\n  return doGet(`/repo/v1/evaluation/${evalId}`, sessionToken, undefined, endpoint)\n}\n","import * as React from 'react'\nimport ButtonContent from '../assets/ButtonContent'\nimport GoogleIcon from '../assets/GoogleIcon'\nimport { SynapseClient } from '../utils'\n\ntype State = {\n  username: string\n  password: string\n  email: string\n  isSignedIn: boolean\n  hasLoginInFailed: boolean\n  errorMessage: string\n}\n\ntype Props = {\n  token: string | undefined\n  theme: string\n  icon: boolean\n}\n\n/**\n *  Demo of user session, show login screen and handling user login submission.\n *\n *  To support Google SSO in your portal, you must add your domain to the Authorized Redirect URIs\n *  for Synapse authentication.\n *  This can be done by contacting synapseInfo@sagebionetworks.org to form a collaboration.\n *  Synapse engineers must add your redirect URL in the Google API console found at https://console.cloud.google.com/ for this functionality to work.\n *\n * @class Login\n * @extends {React.Component}\n */\nclass Login extends React.Component<Props, State> {\n\n    /**\n     * Creates a user session, maintaining credentials\n     * @param {*} props\n     * @memberof Login\n     */\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      email: '',\n      errorMessage: '',\n      hasLoginInFailed: false,\n      isSignedIn: false,\n      password: '',\n      username: ''\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleLogin = this.handleLogin.bind(this)\n    this.getTokenView = this.getTokenView.bind(this)\n    this.getLoginFailureView = this.getLoginFailureView.bind(this)\n    this.onSignIn = this.onSignIn.bind(this)\n  }\n    /**\n     * Updates internal state with the event that was triggered\n     *\n     * @param {*} event Form update\n     */\n  public handleChange(event: React.FormEvent<HTMLInputElement>): void {\n    const target = event.currentTarget\n    const name = target.name\n    const value = target.value\n    const newState: (Pick<any, any>) = { [name]: value }\n    this.setState(newState)\n  }\n    /**\n     * Handle user login on click\n     *\n     * @param {*} clickEvent Userclick event\n     */\n  public handleLogin(clickEvent: React.FormEvent<HTMLElement>) {\n    clickEvent.preventDefault() // avoid page refresh\n    SynapseClient.login(this.state.username, this.state.password)\n            .then((data: any) => {\n              SynapseClient.setSessionTokenCookie(data.sessionToken).then(() => {\n                // on session change, reload the page so that all components get the new token from the cookie\n                window.location.reload()\n              }).catch((errSetSession) => {\n                console.log('Could not set session token cookie!', errSetSession)\n                this.setState({\n                  errorMessage: errSetSession.reason,\n                  hasLoginInFailed: true,\n                  isSignedIn: false\n                })\n              })\n            })\n            .catch((err: any) => {\n              console.log('Handle login failed with err = ', err)\n              this.setState({\n                errorMessage: err.reason,\n                hasLoginInFailed: true,\n                isSignedIn: false\n              })\n            })\n  }\n\n    /**\n     * Shows user session token if they've signed in\n     *\n     * @returns View displaying user session on login, otherwise null.\n     */\n  public getTokenView(): (JSX.Element | boolean) {\n    if (this.state.isSignedIn && this.props.token !== '' && !this.state.hasLoginInFailed) {\n      return <p> Your session token is {this.props.token} </p>\n    }\n    return false\n  }\n    /**\n     * Shows user login failure view on login failure\n     *\n     * @returns view to be displayed on user sign in error.\n     */\n  public getLoginFailureView(): (JSX.Element | boolean) {\n    if (this.state.hasLoginInFailed) {\n      return (\n                <div>\n                    <small className=\"form-text text-danger\"> {this.state.errorMessage} </small>\n                    <div className=\"invalid-feedback\" />\n                </div>\n      )\n    }\n    return false\n  }\n    /**\n     * Show whether user is signed in or not, display banner on login success\n     *\n     * @returns View corresponding to whether the user is signed in, whether they've dismissed\n     * sign in banner\n     */\n  public getSignInStateView(): (JSX.Element | boolean) {\n    if (!this.state.isSignedIn) {\n      return (\n                <p>\n                    {' '}\n                    You are currently{' '}\n                    <strong>\n                        {' '}\n                        <i> not </i>{' '}\n                    </strong>{' '}\n                    signed in to Synpase{' '}\n                </p>\n      )\n    }\n    return false\n  }\n  public onSignIn(event: React.MouseEvent<HTMLButtonElement>) {\n    // save current route (so that we can go back here after SSO)\n    localStorage.setItem('after-sso-login-url', window.location.href)\n    event.preventDefault()\n    SynapseClient.oAuthUrlRequest(SynapseClient.AUTH_PROVIDER, `${SynapseClient.getRootURL()}?provider=${SynapseClient.AUTH_PROVIDER}`)\n            .then((data: any) => {\n              const authUrl = data.authorizationUrl\n              window.location = authUrl // ping the url\n            })\n            .catch((err: any) => {\n              console.log('Error on oAuth url ', err)\n            })\n  }\n  public render() {\n    const { theme, icon } = this.props\n    const googleTheme = theme === 'dark' ? 'SRC-google-button-dark-color' : 'SRC-google-button-light-color'\n    return (\n            <div id=\"loginPage\" className=\"container loginContainer SRC-syn-border-spacing\">\n                  <form>\n                    {/* tslint:disable-next-line */}\n                    <button onClick={this.onSignIn} className={`SRC-google-button ${googleTheme} SRC-marginBottomTen`}>\n                        <GoogleIcon key={1} active={true} />\n                        <ButtonContent icon={icon} key={2}>\n                            Sign in with Google\n                        </ButtonContent>\n                    </button>\n                </form>\n                <div className=\"SRC-center-text SRC-deemphasized-text SRC-marginBottomTen\">or</div>\n                <div className=\"SRC-center-text SRC-marginBottomTen\">Sign in with your Synapse account</div>\n                <form onSubmit={this.handleLogin}>\n                    <div className=\"form-group\">\n                        <input\n                                autoComplete=\"email\"\n                                placeholder=\"username or email\"\n                                className=\"form-control\"\n                                id=\"exampleEmail\"\n                                name=\"username\"\n                                type=\"text\"\n                                value={this.state.username}\n                                onChange={this.handleChange}\n                                data-lpignore=\"true\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                                autoComplete=\"password\"\n                                placeholder=\"password\"\n                                className=\"form-control\"\n                                id=\"examplePassword\"\n                                name=\"password\"\n                                type=\"password\"\n                                value={this.state.password}\n                                onChange={this.handleChange}\n                                data-lpignore=\"true\"\n                        />\n                    </div>\n                    {this.getLoginFailureView()}\n                    <button\n                      onSubmit={this.handleLogin}\n                      type=\"submit\"\n                      className=\"btn SRC-primary-background-color SRC-hoverWhiteText\n                        SRC-whiteText m-1 SRC-google-button SRC-marginBottomTen\"\n                    >\n                      <ButtonContent icon={icon}>\n                        Sign in\n                      </ButtonContent>\n                    </button>\n                </form>\n                <div>\n                  <a\n                    href=\"https://www.synapse.org/#!PasswordReset:0\"\n                    className=\"SRC-floatLeft SRC-primary-text-color\"\n                  >\n                    Forgot password?\n                  </a>\n                  <span className=\"SRC-deemphasized-text SRC-floatRight\">&nbsp;It's free!</span>\n                  <a\n                    href=\"https://www.synapse.org/#!RegisterAccount:0\"\n                    className=\"SRC-floatRight SRC-primary-text-color\"\n                  >\n                    Register\n                  </a>\n                </div>\n            </div>\n    )\n  }\n}\nexport default Login\n","// EntityForm:\n// Will generate a Form (based on your schema files).\n// Gathers user input (including files)\n// Will give you the Synapse ID of the FileEntity that contains the user form data.\nimport * as React from 'react'\nimport Form from 'react-jsonschema-form'\nimport { UserProfile } from '../utils/jsonResponses/UserProfile'\nimport { SynapseClient } from '../utils'\nimport { FileEntity } from '../utils/jsonResponses/FileEntity'\nimport { EntityId } from '../utils/jsonResponses/EntityId'\nimport { EntityLookupRequest } from '../utils/jsonResponses/EntityLookupRequest'\n\nexport type EntityFormProps = {\n  // Provide the parent container (folder/project), that should contain a folder (named <user_id>) that this user can write to.\n  parentContainerId: string,\n  formSchemaEntityId: string, // Synapse file that contains the form schema.\n  formUiSchemaEntityId: string, // Synapse file that contains the form ui schema.\n  initFormData: boolean // If true, it indicates that you’d like to download and pre-fill the form with the user's previous response.\n  token?: string, // user's session token\n  synIdCallback: (synId: string) => void, // callback.  Once the form output has been saved to a FileEntity, will send synID back\n}\ntype EntityFormState = {\n  error?: any,\n  isLoading?: boolean,\n  successfullyUploaded: boolean,\n  containerId?: string,\n  userprofile?: UserProfile,\n  currentFileEntity?: FileEntity, // file holding user form data\n  formData?: any, // form data that prepopulates the form\n  formSchema?: any, // schema that drives the form\n  formUiSchema?: any, // ui schema that directs how to render the form elements\n}\n\nexport default class EntityForm\n  extends React.Component<EntityFormProps, EntityFormState> {\n  formRef: any\n\n  constructor(props: EntityFormProps) {\n    super(props)\n    this.formRef = React.createRef()\n    this.state = {\n      isLoading: true,\n      successfullyUploaded: false,\n    }\n  }\n\n  componentDidMount() {\n    this.refresh()\n  }\n\n  componentDidUpdate(prevProps: any) {\n    const shouldUpdate = this.props.token !== prevProps.token\n    if (shouldUpdate) {\n      this.refresh()\n    }\n  }\n\n  submitForm = () => {\n    this.formRef.current.submit()\n  }\n\n  refresh = () => {\n    if (this.props.token) {\n      const promises = [\n        SynapseClient.getUserProfile(this.props.token),\n        SynapseClient.getEntity(this.props.token, this.props.formSchemaEntityId),\n        SynapseClient.getEntity(this.props.token, this.props.formUiSchemaEntityId),\n      ]\n      Promise.all(promises).then((values) => {\n        const userprofile: UserProfile = values[0]\n        this.getTargetContainer(userprofile, this.props.token!).then((targetContainerId: string) => {\n          const formSchemaFileEntity: FileEntity = values[1]\n          const formUiSchemaFileEntity: FileEntity = values[2]\n          this.getSchemaFileContent(targetContainerId, formSchemaFileEntity, formUiSchemaFileEntity)\n        })\n      }).catch((error) => {\n        this.onError(error)\n      })\n    }\n  }\n\n  getSchemaFileContent = (\n    targetFolderId: string,\n    formSchemaFileEntity: FileEntity,\n    formUiSchemaFileEntity: FileEntity\n  ) => {\n    const promises = [\n      SynapseClient.getFileEntityContent(this.props.token!, formSchemaFileEntity),\n      SynapseClient.getFileEntityContent(this.props.token!, formUiSchemaFileEntity),\n    ]\n    Promise.all(promises).then((values) => {\n      const formSchemaContent = JSON.parse(values[0])\n      const formUiSchemaContent = JSON.parse(values[1])\n      this.getExistingFileData(targetFolderId, formSchemaContent, formUiSchemaContent)\n    }).catch((error) => {\n      this.onError(error)\n    })\n  }\n\n  getExistingFileData = (targetFolderId: string, formSchemaContent: any, formUiSchemaContent: any) => {\n    // if data already exists, save a reference to the existing entity and prefill the form\n    const fileName = `${formSchemaContent.title}.json`\n    const entityLookupRequest = { entityName: fileName, parentId: targetFolderId }\n    let formData: any\n    let currentFileEntity: FileEntity\n    SynapseClient.lookupChildEntity(entityLookupRequest, this.props.token).then((entityId:EntityId) => {\n      // ok, found the existing file\n      return SynapseClient.getEntity<FileEntity>(this.props.token, entityId.id).then((entity) => {\n        currentFileEntity = entity\n        if (this.props.initFormData) {\n          return SynapseClient.getFileEntityContent(this.props.token!, currentFileEntity).then((existingFileData) => {\n            formData = JSON.parse(existingFileData)\n          })\n        }\n        // else we're done\n        return Promise.resolve()\n      })\n    }).finally(() => {\n      this.setState(\n        {\n          formData,\n          currentFileEntity,\n          formSchema: formSchemaContent,\n          formUiSchema: formUiSchemaContent\n        })\n    })\n  }\n\n  getTargetContainer = async (userprofile: UserProfile, token: string) => {\n    const entityLookupRequest: EntityLookupRequest = {\n      entityName: userprofile.ownerId,\n      parentId: this.props.parentContainerId\n    }\n    try {\n      const entityId = await SynapseClient.lookupChildEntity(entityLookupRequest, token)\n      // ok, found an entity of the same name.\n      console.log(`EntityForm uploading to https://www.synapse.org/#!Synapse:${entityId.id}`)\n      this.setState({\n        userprofile,\n        containerId: entityId.id,\n        isLoading: false\n      })\n      return entityId.id\n    } catch (error) {\n      if (error.statusCode === 404) {\n        return this.onError(new Error('Your folder has not yet been set up, please retry in a few minutes.'))\n      }\n      // else\n      return this.onError(error)\n    }\n  }\n\n  finishedProcessing = () => {\n    this.setState(\n      {\n        isLoading: false,\n        successfullyUploaded: true,\n      })\n  }\n\n  onError = (error: any) => {\n    this.setState({\n      error,\n      isLoading: false,\n      successfullyUploaded: false\n    })\n  }\n\n  onSubmit = ({ formData }: any) => {\n    this.setState(\n      {\n        isLoading: true,\n        successfullyUploaded: false\n      })\n\n    const submissionFileAndForm: Blob = new Blob([JSON.stringify(formData)], {\n      type: 'text/json'\n    })\n    this.createEntityFile(submissionFileAndForm)\n  }\n\n  createEntityFile = (fileContentsBlob: Blob) => {\n    const fileName = `${this.state.formSchema.title}.json`\n    SynapseClient.uploadFile(this.props.token, fileName, fileContentsBlob).then(\n      (fileUploadComplete: any) => {\n        // do we need to create a new file entity, or update an existing file entity?\n        const newFileHandleId = fileUploadComplete.fileHandleId\n        if (this.state.currentFileEntity) {\n          this.state.currentFileEntity.dataFileHandleId = newFileHandleId\n          return SynapseClient.updateEntity(this.state.currentFileEntity, this.props.token)\n        }\n        // else, it's a new file entity\n        const newFileEntity: FileEntity = {\n          parentId: this.state.containerId!,\n          name: fileName,\n          concreteType: 'org.sagebionetworks.repo.model.FileEntity',\n          dataFileHandleId: newFileHandleId,\n        }\n        return SynapseClient.createEntity(newFileEntity, this.props.token)\n      }).then((fileEntity: FileEntity) => {\n        // by this point we've either found and updated the existing file entity, or created a new one.\n        this.finishedProcessing()\n        if (this.props.synIdCallback) {\n          this.props.synIdCallback(fileEntity.id!)\n        }\n      }).catch((error: any) => {\n        this.onError(error)\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        {\n          this.state.error &&\n          <div className=\"panel panel-danger errors\">\n            <div className=\"panel-heading\">\n              <h3 className=\"panel-title\">Error</h3>\n            </div>\n            <ul className=\"list-group\">\n              <li className=\"list-group-item text-danger\">\n                {this.state.error.name} {this.state.error.reason} {this.state.error.message}\n              </li>\n            </ul>\n          </div>\n        }\n        {\n          this.props.token &&\n          !this.state.isLoading &&\n          !this.state.successfullyUploaded &&\n          this.state.formSchema &&\n          this.state.formUiSchema &&\n          !this.state.error &&\n          <Form\n            formData={this.state.formData}\n            schema={this.state.formSchema}\n            uiSchema={this.state.formUiSchema}\n            onSubmit={this.onSubmit}\n            showErrorList={true}\n            ref={this.formRef}\n          >\n            <div style={{ display: 'none' }}>\n              <button type=\"submit\" className=\"btn btn-info\">Submit</button>\n            </div>\n          </Form>\n        }\n        {\n          !this.state.error &&\n          this.props.token &&\n          this.state.isLoading &&\n          <React.Fragment>\n            <span>Saving&hellip;</span>\n            <span style={{ marginLeft: '2px' }} className={'spinner'} />\n          </React.Fragment>\n        }\n      </div>\n    )\n  }\n}\n","\nconst COLOR_PALETTE_EVEN: string [] = [\n  'rgb(91,176,181)',\n  'rgb(124,192,196)',\n  'rgb(157,208,211)',\n  'rgb(189,223,225)',\n  'rgb(222,239,240)',\n  'rgb(217,229,236)',\n  'rgb(179,202,217)',\n  'rgb(140,176,198)',\n  'rgb(102,149,179)',\n  'rgb(64,123,160)',\n  'rgb(201,66,129)',\n  'rgb(212,104,154)',\n  'rgb(223,142,179)',\n  'rgb(233,179,205)',\n  'rgb(244,217,230)',\n  'rgb(218,214,229)',\n  'rgb(181,173,203)',\n  'rgb(145,133,177)',\n  'rgb(108,92,151)',\n  'rgb(71,51,125)',\n  'rgb(222,154,31)',\n  'rgb(229,174,76)',\n  'rgb(235,194,121)',\n  'rgb(242,215,165)',\n  'rgb(248,235,210)',\n  'rgb(207,234,231)',\n  'rgb(159,212,207)',\n  'rgb(112,191,184)',\n  'rgb(64,169,160)',\n  'rgb(16,148,136)',\n  'rgb(60,74,99)',\n  'rgb(99,110,130)',\n  'rgb(138,146,161)',\n  'rgb(177,183,193)',\n  'rgb(216,219,224)',\n  'rgb(246,226,210)',\n  'rgb(238,197,165)',\n  'rgb(229,167,120)',\n  'rgb(221,138,75)',\n  'rgb(212,109,30)',\n  'rgb(88,161,88)',\n  'rgb(121,180,121)',\n  'rgb(155,199,155)',\n  'rgb(188,217,188)',\n  'rgb(222,236,222)',\n  'rgb(220,227,242)',\n  'rgb(185,198,230)',\n  'rgb(151,170,217)',\n  'rgb(116,141,205)',\n  'rgb(81,113,192)',\n  'rgb(178,36,42)',\n  'rgb(193,80,85)',\n  'rgb(209,124,127)',\n  'rgb(224,167,170)',\n  'rgb(240,211,212)',\n  'rgb(222,239,240)',\n  'rgb(189,223,225)',\n  'rgb(157,208,211)',\n  'rgb(124,192,196)',\n  'rgb(91,176,181)',\n  'rgb(64,123,160)',\n  'rgb(102,149,179)',\n  'rgb(140,176,198)',\n  'rgb(179,202,217)',\n  'rgb(217,229,236)',\n  'rgb(244,217,230)',\n  'rgb(233,179,205)',\n  'rgb(223,142,179)',\n  'rgb(212,104,154)',\n  'rgb(201,66,129)',\n  'rgb(71,51,125)',\n  'rgb(108,92,151)',\n  'rgb(145,133,177)',\n  'rgb(181,173,203)',\n  'rgb(218,214,229)',\n  'rgb(248,235,210)',\n  'rgb(242,215,165)',\n  'rgb(235,194,121)',\n  'rgb(229,174,76)',\n  'rgb(222,154,31)',\n  'rgb(16,148,136)',\n  'rgb(64,169,160)',\n  'rgb(112,191,184)',\n  'rgb(159,212,207)',\n  'rgb(207,234,231)',\n  'rgb(216,219,224)',\n  'rgb(177,183,193)',\n  'rgb(138,146,161)',\n  'rgb(99,110,130)',\n  'rgb(60,74,99)',\n  'rgb(212,109,30)',\n  'rgb(221,138,75)',\n  'rgb(229,167,120)',\n  'rgb(238,197,165)',\n  'rgb(246,226,210)',\n  'rgb(222,236,222)',\n  'rgb(188,217,188)',\n  'rgb(155,199,155)',\n  'rgb(121,180,121)',\n  'rgb(88,161,88)',\n  'rgb(81,113,192)',\n  'rgb(116,141,205)',\n  'rgb(151,170,217)',\n  'rgb(185,198,230)',\n  'rgb(220,227,242)',\n  'rgb(240,211,212)',\n  'rgb(224,167,170)',\n  'rgb(209,124,127)',\n  'rgb(193,80,85)',\n  'rgb(178,36,42)'\n]\n\nconst COLOR_PALETTE_ODD: string [] = [\n  'rgb(64,123,160)',\n  'rgb(102,149,179)',\n  'rgb(140,176,198)',\n  'rgb(179,202,217)',\n  'rgb(217,229,236)',\n  'rgb(244,217,230)',\n  'rgb(233,179,205)',\n  'rgb(223,142,179)',\n  'rgb(212,104,154)',\n  'rgb(201,66,129)',\n  'rgb(71,51,125)',\n  'rgb(108,92,151)',\n  'rgb(145,133,177)',\n  'rgb(181,173,203)',\n  'rgb(218,214,229)',\n  'rgb(248,235,210)',\n  'rgb(242,215,165)',\n  'rgb(235,194,121)',\n  'rgb(229,174,76)',\n  'rgb(222,154,31)',\n  'rgb(16,148,136)',\n  'rgb(64,169,160)',\n  'rgb(112,191,184)',\n  'rgb(159,212,207)',\n  'rgb(207,234,231)',\n  'rgb(216,219,224)',\n  'rgb(177,183,193)',\n  'rgb(138,146,161)',\n  'rgb(99,110,130)',\n  'rgb(60,74,99)',\n  'rgb(212,109,30)',\n  'rgb(221,138,75)',\n  'rgb(229,167,120)',\n  'rgb(238,197,165)',\n  'rgb(246,226,210)',\n  'rgb(222,236,222)',\n  'rgb(188,217,188)',\n  'rgb(155,199,155)',\n  'rgb(121,180,121)',\n  'rgb(88,161,88)',\n  'rgb(81,113,192)',\n  'rgb(116,141,205)',\n  'rgb(151,170,217)',\n  'rgb(185,198,230)',\n  'rgb(220,227,242)',\n  'rgb(240,211,212)',\n  'rgb(224,167,170)',\n  'rgb(209,124,127)',\n  'rgb(193,80,85)',\n  'rgb(178,36,42)',\n  'rgb(91,176,181)',\n  'rgb(124,192,196)',\n  'rgb(157,208,211)',\n  'rgb(189,223,225)',\n  'rgb(222,239,240)',\n  'rgb(217,229,236)',\n  'rgb(179,202,217)',\n  'rgb(140,176,198)',\n  'rgb(102,149,179)',\n  'rgb(64,123,160)',\n  'rgb(201,66,129)',\n  'rgb(212,104,154)',\n  'rgb(223,142,179)',\n  'rgb(233,179,205)',\n  'rgb(244,217,230)',\n  'rgb(218,214,229)',\n  'rgb(181,173,203)',\n  'rgb(145,133,177)',\n  'rgb(108,92,151)',\n  'rgb(71,51,125)',\n  'rgb(222,154,31)',\n  'rgb(229,174,76)',\n  'rgb(235,194,121)',\n  'rgb(242,215,165)',\n  'rgb(248,235,210)',\n  'rgb(207,234,231)',\n  'rgb(159,212,207)',\n  'rgb(112,191,184)',\n  'rgb(64,169,160)',\n  'rgb(16,148,136)',\n  'rgb(60,74,99)',\n  'rgb(99,110,130)',\n  'rgb(138,146,161)',\n  'rgb(177,183,193)',\n  'rgb(216,219,224)',\n  'rgb(246,226,210)',\n  'rgb(238,197,165)',\n  'rgb(229,167,120)',\n  'rgb(221,138,75)',\n  'rgb(212,109,30)',\n  'rgb(88,161,88)',\n  'rgb(121,180,121)',\n  'rgb(155,199,155)',\n  'rgb(188,217,188)',\n  'rgb(222,236,222)',\n  'rgb(220,227,242)',\n  'rgb(185,198,230)',\n  'rgb(151,170,217)',\n  'rgb(116,141,205)',\n  'rgb(81,113,192)',\n  'rgb(178,36,42)',\n  'rgb(193,80,85)',\n  'rgb(209,124,127)',\n  'rgb(224,167,170)',\n  'rgb(240,211,212)',\n  'rgb(222,239,240)',\n  'rgb(189,223,225)',\n  'rgb(157,208,211)',\n  'rgb(124,192,196)',\n  'rgb(91,176,181)'\n]\n\nexport { COLOR_PALETTE_EVEN, COLOR_PALETTE_ODD }\n","import { COLOR_PALETTE_EVEN, COLOR_PALETTE_ODD } from './colorPalette'\n\nexport function getColorPallette(start: number, end: number): {colorPalette: string [], textColors: string []} {\n  let colorPalleteSelection = []\n  const textColors = []\n  let offset = -1\n\n  if (start % 2 === 0) {\n    colorPalleteSelection = COLOR_PALETTE_EVEN\n    offset = start * 5\n  } else {\n    colorPalleteSelection = COLOR_PALETTE_ODD\n    offset = (start - 1) * 5\n  }\n\n  const colorPalette: string [] = []\n\n  for (let i = 0; i < end; i += 1) {\n    const textColor: string = i % 10 < 2 || i % 10 > 7 ? 'white' : 'black'\n    const color: string =  `${colorPalleteSelection[(offset + i) % colorPalleteSelection.length]}`\n    colorPalette.push(color)\n    textColors.push(textColor)\n  }\n  return { colorPalette, textColors }\n}\n\nexport default getColorPallette\n","// This file is used for any import modules that have to be\n// rewritten due rollup import nuances\n\nimport * as cloneDeepProxy from 'lodash.clonedeep'\n\n// wonky syntax explained here - https://github.com/rollup/rollup/issues/670#issuecomment-281139978\nexport function cloneDeep <T>(x : T): T {\n  const fn = ((cloneDeepProxy as any).default) || cloneDeepProxy\n  return fn(x)\n}\n","import { QueryBundleRequest } from '../jsonResponses/Table/QueryBundleRequest'\nimport { SynapseClient, SynapseConstants } from '../'\nimport { QueryResultBundle } from '../jsonResponses/Table/QueryResultBundle'\nimport { cloneDeep } from './rollupCompatibleModules'\n\ntype PartialStateObject = {\n  hasMoreData: boolean,\n  data: QueryResultBundle,\n}\n\n/**\n * Grab the next page of data, pulling in 25 more rows.\n *\n * @param {*} queryRequest Query request as specified by\n *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n */\nexport const getNextPageOfData = async (queryRequest: QueryBundleRequest, data: QueryResultBundle, token?: string) => {\n  return await SynapseClient.getQueryTableResults(queryRequest, token)\n    .then(\n    (newData: QueryResultBundle) => {\n      const oldData: QueryResultBundle = cloneDeep(data)!\n      // push on the new data retrieved from the API call\n      const hasMoreData = newData\n                          .queryResult\n                          .queryResults\n                          .rows\n                          .length === SynapseConstants.PAGE_SIZE\n      oldData.queryResult.queryResults.rows.push(...newData.queryResult.queryResults.rows)\n      const newState: PartialStateObject = {\n        hasMoreData,\n        data: oldData,\n      }\n      return newState\n    }\n    ).catch((err) => {\n      console.log('Failed to get data ', err)\n      return {} as PartialStateObject\n    })\n}\n","import { FacetSelection } from '../../containers/QueryWrapper'\nimport { QueryBundleRequest } from '../jsonResponses/Table/QueryBundleRequest'\nimport { FacetColumnValuesRequest } from '../jsonResponses/Table/FacetColumnRequest'\nimport { SELECT_SINGLE_FACET } from '../../containers/Facets'\nimport { FacetColumnResultValueCount } from '../jsonResponses/Table/FacetColumnResult'\n\n/**\n *  Calculates the state of a specific facet value given the current state\n *  of the application.\n *\n * @param\n *     isLoading: boolean | undefined,\n *     lastFacetSelection: FacetSelection | undefined,\n *     curFacetSelection: any,\n *     columnName: string\n * @returns boolean\n */\n\nexport const getIsValueSelected = ({\n  isLoading,\n  lastFacetSelection,\n  curFacetSelection,\n  columnName\n} : {\n  isLoading: boolean | undefined,\n  lastFacetSelection: FacetSelection | undefined,\n  curFacetSelection: FacetColumnResultValueCount,\n  columnName: string\n}) => {\n  if (isLoading && columnName === lastFacetSelection!.columnName) {\n    // indicates there is a selection made with this current facet value\n    if (lastFacetSelection!.facetValue === curFacetSelection.value) {\n      return !curFacetSelection.isSelected\n    }\n    if (lastFacetSelection!.selector === SELECT_SINGLE_FACET) {\n      return false\n    }\n  }\n  /*\n    else, the information has come back from the server and we can\n    rely on that\n  */\n  return curFacetSelection.isSelected\n\n}\n\nexport type SyntheticHTMLInputElement = {\n  value: string\n  checked: boolean\n}\n\n/**\n * Function reads over a set of checkboxes and then returns a corresponding\n * queryRequest given the state of the prior queryRequest\n *   htmlCheckboxes: any,\n *   selector : string,\n *   queryRequest: QueryBundleRequest,\n *   filter: string,\n *   value?: string\n * }\n * @returns\n */\nexport const readFacetValues = ({\n  htmlCheckboxes,\n  selector,\n  queryRequest,\n  filter,\n  value\n}: {\n  htmlCheckboxes: SyntheticHTMLInputElement [],\n  selector : string,\n  queryRequest: QueryBundleRequest,\n  filter: string,\n  value?: string\n}) => {\n  const facetValues: string[] = []\n\n  if (!selector) {\n    // no selector was clicked -- read over facet values as normal and see what was clicked\n    for (let i = 0; i < htmlCheckboxes.length; i += 1) {\n      const checkbox = htmlCheckboxes[i]\n      const isSelected = checkbox.checked\n      if (isSelected) {\n        facetValues.push(checkbox.value)\n      }\n    }\n  } else if (selector === SELECT_SINGLE_FACET) {\n    // SELECT_SINGLE_FACET acts as a radio selection, thats the only selection\n    facetValues.push(value!)\n  } // else selector === SELECT_ALL, we don't add any values, empty is treated as SELECT_ALL\n  const newQueryRequest: QueryBundleRequest = queryRequest\n  const { selectedFacets = [] } = newQueryRequest.query\n\n  const specificFacet = selectedFacets!.find(el => el.columnName === filter)!\n  if (!specificFacet) {\n    const facetColumnValuesRequest: FacetColumnValuesRequest =  {\n      facetValues,\n      concreteType: 'org.sagebionetworks.repo.model.table.FacetColumnValuesRequest',\n      columnName: filter\n    }\n    selectedFacets.push(facetColumnValuesRequest)\n    // align the reference to selectedFacets\n    newQueryRequest.query.selectedFacets = selectedFacets\n  } else {\n    specificFacet.facetValues = facetValues\n  }\n\n  return { newQueryRequest }\n}\n","import { lexer, parser } from 'sql-parser'\n\nexport type KeyValue = {\n  [index: string]: string\n}\n\n// This will construct a sql query by adding the conditions in searchParams\n// to the WHERE clause, preserving all other clauses\n\nexport const insertWhereClauseFromURL = (searchParams: KeyValue, sql: string) => {\n  const tokens: string[][] = lexer.tokenize(sql)\n  // we want to either create a where clause or insert into the where clause\n  const foundIndex = tokens.findIndex(el => el[0] === 'WHERE')\n  const whereClauseIndex = foundIndex === -1 ? (tokens.findIndex(el => el[0] === 'FROM') + 2) : foundIndex\n  const indexAfterWhereClause = whereClauseIndex + 1\n  if (foundIndex === -1) {\n    // insert a where clause\n    tokens.splice(whereClauseIndex, 0, ['WHERE', 'WHERE', '1'])\n  } else {\n    // if this is inserting into a where clause then we have to make sure that the logic is chained\n    tokens.splice(indexAfterWhereClause, 0, ['CONDITIONAL', 'AND', '1'])\n  }\n  const searchParamsLen = Object.keys(searchParams).length\n  Object.keys(searchParams).forEach(\n    (key, index) => {\n      const token = [\n        ['LITERAL', key, '1'],\n        ['OPERATOR', 'LIKE', '1'],\n        ['STRING', `%${searchParams[key]}%`, '1'],\n      ]\n      if (index < searchParamsLen - 1) {\n        // make sure to chain the ANDs until the last one\n        token.unshift(['CONDITIONAL', 'AND', '1'])\n      }\n      tokens.splice(indexAfterWhereClause, 0, ...token)\n    }\n  )\n  return formatSQLFromParser(tokens)\n}\n\nexport const formatSQLFromParser = (tokens: string [][]) => {\n  // remove backtick from output sql (for table name): `syn1234` becomes syn1234\n  const synId = tokens[tokens.findIndex(el => el[0] === 'FROM') + 1][1]\n  const newSql = parser.parse(tokens).toString()\n  const splitString = `\\`${synId}\\``\n  return newSql.split(splitString).join(synId)\n}\n","import { IconProp, library } from '@fortawesome/fontawesome-svg-core'\nimport { faCheck,\n         faColumns,\n         faDatabase,\n         faFilter,\n         faSort,\n         faSortAmountDown,\n         faSortAmountUp,\n         faTimes } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as React from 'react'\n// tslint:disable-next-line\nimport ReactTooltip from \"react-tooltip\"\nimport { FacetColumnResult,\n         FacetColumnResultValueCount,\n         FacetColumnResultValues\n} from '../utils/jsonResponses/Table/FacetColumnResult'\nimport { QueryBundleRequest } from '../utils/jsonResponses/Table/QueryBundleRequest'\nimport { Row } from '../utils/jsonResponses/Table/QueryResult'\nimport { SelectColumn } from '../utils/jsonResponses/Table/SelectColumn'\nimport { getColorPallette } from './ColorGradient'\nimport { QueryWrapperChildProps, FacetSelection } from './QueryWrapper'\nimport { cloneDeep } from '../utils/modules/'\nimport { SortItem } from '../utils/jsonResponses/Table/Query'\nimport { getIsValueSelected, readFacetValues } from '../utils/modules/facetUtils'\nimport { lexer } from 'sql-parser'\nimport { ColumnModel } from '../utils/jsonResponses/Table/ColumnModel'\nimport { formatSQLFromParser } from '../utils/modules/sqlFunctions'\n\nconst MIN_SPACE_FACET_MENU = 700\n\n// Add all icons to the library so you can use it in your page\nlibrary.add(faColumns)\nlibrary.add(faSort)\nlibrary.add(faSortAmountUp)\nlibrary.add(faSortAmountDown)\nlibrary.add(faCheck)\nlibrary.add(faTimes)\nlibrary.add(faFilter)\nlibrary.add(faDatabase)\n// Hold constants for next and previous button actions\nconst NEXT = 'NEXT'\nconst PREVIOUS = 'PREVIOUS'\nexport const SELECT_ALL = 'SELECT_ALL'\nexport const DESELECT_ALL = 'DESELECT_ALL'\n// double check these icons!\nexport const ICON_STATE: string [] = ['sort-amount-down', 'sort-amount-down', 'sort-amount-up']\ntype direction = ''|'ASC'|'DESC'\nexport const SORT_STATE: direction [] = ['', 'DESC', 'ASC']\ntype Info = {\n  index: number\n  name: string\n}\n// look for \"group by\", multi-line and case insensitive\nconst GROUP_BY_REGEX = /group by/mi\nexport type SynapseTableState = {\n  sortedColumnSelection: SortItem []\n  offset: number\n  isOpen: boolean\n  isColumnSelected: boolean[]\n  columnIconSortState: number[],\n  isFilterSelected: boolean []\n  filterClassList: string [],\n  menuWallIsActive: boolean,\n}\nexport type SynapseTableProps = {\n  visibleColumnCount?: number\n  synapseId: string\n  title: string\n}\n\nexport default class SynapseTable extends React.Component<QueryWrapperChildProps &\n                                                          SynapseTableProps, SynapseTableState> {\n\n  constructor(props: QueryWrapperChildProps & SynapseTableProps) {\n    super(props)\n    this.handleColumnSortPress = this.handleColumnSortPress.bind(this)\n    this.handlePaginationClick = this.handlePaginationClick.bind(this)\n    this.findSelectionIndex = this.findSelectionIndex.bind(this)\n    this.toggleColumnSelection = this.toggleColumnSelection.bind(this)\n    this.toggleMenuWall = this.toggleMenuWall.bind(this)\n    this.advancedSearch = this.advancedSearch.bind(this)\n    this.download = this.download.bind(this)\n    this.getLengthOfPropsData = this.getLengthOfPropsData.bind(this)\n    this.configureFacetDropdown = this.configureFacetDropdown.bind(this)\n    this.closeMenuClickHandler = this.closeMenuClickHandler.bind(this)\n    this.showPaginationButtons = this.showPaginationButtons.bind(this)\n    this.useFacetAliasIfDefined = this.useFacetAliasIfDefined.bind(this)\n    this.applyChanges = this.applyChanges.bind(this)\n    this.toggleFilterDropdown = this.toggleFilterDropdown.bind(this)\n    // store the offset and sorted selection that is currently held\n    this.state = {\n      /* columnIconSortState tells what icon to display for a table\n         header. There are three states for a particular header-\n          0 - show descending icon but *deselected*\n          1 - show descending icon selected\n          2 - show ascending icon selected\n      */\n      columnIconSortState: [],\n      filterClassList: Array(100).fill(''),\n      isColumnSelected: [],\n      isFilterSelected: Array(100).fill(false),\n      isOpen: false,\n      menuWallIsActive: false,\n      offset: 0,\n      // sortedColumnSelection contains the columns which are\n      // selected currently and their sort status as eithet\n      // off, desc, or asc.\n      sortedColumnSelection: [],\n    }\n    this.renderFacetSelection = this.renderFacetSelection.bind(this)\n  }\n\n  public useFacetAliasIfDefined(facetName: string) {\n    const { facetAliases = {} } = this.props\n    return facetAliases[facetName] || facetName\n  }\n\n  public isGroupByInSql(sql?: string): boolean {\n    const testSql = sql ? sql : this.props.getLastQueryRequest!().query.sql\n    return GROUP_BY_REGEX.test(testSql)\n  }\n    /**\n     * Display the view\n     */\n  public render() {\n    if (this.props.data === undefined) {\n      return (<div/>)\n    }\n    // unpack all the data\n    const { data, filter, isLoading, unitDescription } = this.props\n    const { queryResult } = data\n    const { queryResults } = queryResult\n    const { rows } = queryResults\n    const { headers } = queryResults\n    const { facets } = data\n    const { colorPalette } = getColorPallette(this.props.rgbIndex!, 1)\n    const backgroundColor = colorPalette[0]\n    // handle displaying the previous button -- if offset is zero then it\n    // shouldn't be displayed\n    const pastZero: boolean = this.props.getLastQueryRequest!().query.offset! > 0\n\n    const xData: any[] = []\n    data.facets.forEach((item: any) => {\n      if (item.facetType === 'enumeration' && item.columnName === filter) {\n        item.facetValues.forEach(\n          (facetValue: any) => {\n            if (item.columnName) {\n              xData.push({ columnName: item.columnName, ...facetValue })\n            }\n          })\n      }\n    })\n    // edge case -- if they are all false then they are considered all true..\n    // sum up the counts of data\n    let anyTrue = false\n    let totalAllFalseCase = 0\n    let totalStandardCase = 0\n    for (const key in xData) {\n      if (xData.hasOwnProperty(key)) {\n        anyTrue = anyTrue || xData[key].isSelected\n        totalAllFalseCase += xData[key].count\n        totalStandardCase += xData[key].isSelected ? xData[key].count : 0\n      }\n    }\n    let total = anyTrue ? totalStandardCase : totalAllFalseCase\n\n    if (rows.length === 0) {\n      total = 0\n    }\n\n    const tooltipIdOne = 'openAdvancedSearch'\n    const tooltipIdTwo = 'addAndRemoveColumns'\n    const { menuWallIsActive, isOpen } = this.state\n    const optionalHiddenClass: string = !menuWallIsActive ? 'hidden' : ''\n    let addRemoveColClasses  = 'SRC-extraPadding SRC-primary-background-color-hover dropdown-toggle SRC-hand-cursor'\n    addRemoveColClasses += (isOpen ? 'SRC-primary-background-color' : '')\n    return (\n      <React.Fragment>\n        <button onClick={this.closeMenuClickHandler} className={`SRC-menu-wall ${optionalHiddenClass}`} />\n        <div className=\"SRC-marginBottomTen\">\n          <p style={{ height:'20px' }}>\n            {!isLoading && <strong> Showing {total} {unitDescription} </strong>}\n            {isLoading &&\n              <React.Fragment>\n                <span className={'spinner'}/>\n                <strong> {'    '} Table results updating...</strong>\n              </React.Fragment>\n            }\n          </p>\n        </div>\n        <div className=\"SRC-padding SRC-centerContent\" style={{ background: backgroundColor }}>\n            <h3 className=\"SRC-tableHeader\"> {this.props.title}</h3>\n            <span style={{ marginLeft: 'auto', marginRight: '10px' }}>\n                <span className={` dropdown ${this.state.isOpen ? 'open' : ''}`}>\n                    <span\n                        tabIndex={0}\n                        data-for={tooltipIdOne}\n                        data-tip=\"Open Advanced Search in Synapse\"\n                        className=\"SRC-primary-background-color-hover SRC-extraPadding SRC-hand-cursor\"\n                        onKeyPress={this.advancedSearch}\n                        onClick={this.advancedSearch}\n                    >\n                        <FontAwesomeIcon size=\"1x\" color=\"white\"  icon=\"database\"/>\n                    </span>\n                    <ReactTooltip\n                        delayShow={1500}\n                        place=\"bottom\"\n                        type=\"dark\"\n                        effect=\"solid\"\n                        id={tooltipIdOne}\n                    />\n                    {\n                      !this.isGroupByInSql() &&\n                      <React.Fragment>\n                        <span\n                            tabIndex={0}\n                            data-for={tooltipIdTwo}\n                            data-tip=\"Add / Remove Columns\"\n                            style={{ marginLeft: '10px' }}\n                            className={addRemoveColClasses}\n                            onKeyPress={this.toggleMenuWall}\n                            onClick={this.toggleMenuWall}\n                            id=\"dropdownMenu1\"\n                        >\n                            <FontAwesomeIcon color=\"white\" icon=\"columns\"/>\n                        </span>\n                        <ReactTooltip\n                            delayShow={1500}\n                            place=\"bottom\"\n                            type=\"dark\"\n                            effect=\"solid\"\n                            id={tooltipIdTwo}\n                        />\n                        <ul className=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownMenu1\">\n                            {this.renderDropdownColumnMenu(headers)}\n                        </ul>\n                      </React.Fragment>\n                    }\n                </span>\n            </span>\n        </div>\n        {/* min height ensure if no rows are selected that a dropdown menu is still accessible */}\n        <div style={{ minHeight: '300px' }} className=\"SRC-overflowAuto\">\n            <table className=\"table table-striped table-condensed\">\n                <thead className=\"SRC_borderTop\">\n                    <tr>\n                        {this.createTableHeader(headers, facets)}\n                    </tr>\n                </thead>\n                {<tbody>{this.createTableRows(rows, headers)}</tbody>}\n            </table>\n            {total > 0 && this.showPaginationButtons(pastZero)}\n        </div>\n      </React.Fragment>\n    )\n  }\n\n  private showGroupRowData = (selectedRow: Row) => (_event: React.MouseEvent<HTMLAnchorElement>) => {\n    // magic happens - parse query, deep copy query bundle request, modify, encode, send to Synapse.org.  Easy!\n    const queryCopy = cloneDeep(this.props.getLastQueryRequest!().query)\n    // unpack all the data\n    const { data } = this.props\n    const { queryResult, columnModels } = data!\n    const { queryResults } = queryResult\n    const { headers } = queryResults\n    const parsed = this.getSqlUnderlyingDataForRow(\n      selectedRow,\n      queryCopy.sql,\n      headers,\n      columnModels)\n    queryCopy.sql = parsed.newSql\n    const queryJSON = JSON.stringify(queryCopy)\n    // encode this copy of the query (json)\n    const encodedQuery = btoa(queryJSON)\n    // open this in a new window on synapse.org\n    window.open(`https://www.synapse.org/#!Synapse:${parsed.synId}/tables/query/${encodedQuery}`, '_self')\n  }\n\n  /**\n   * Return the select column indexes for columns that use the aggregate count function.\n   * If sql does not have a GROUP BY, this returns an empty array.\n   * @param originalSql\n   */\n  public getCountFunctionColumnIndexes(originalSql: string): number[] {\n    const indexes: number[] = []\n    if (this.isGroupByInSql(originalSql)) {\n      const tokens: string[][] = lexer.tokenize(originalSql)\n      const selectIndex = tokens.findIndex(el => el[0] === 'SELECT')\n      const fromIndex = tokens.findIndex(el => el[0] === 'FROM')\n      let columnIndex = 0\n      for (let index = selectIndex + 1; index < fromIndex - selectIndex - 1; index += 1) {\n        const token = tokens[index]\n        if (token[0] === 'FUNCTION' && token[1].toLowerCase() === 'count') {\n          // found a count column!\n          indexes.push(columnIndex)\n        } else if (token[0] === 'SEPARATOR') {\n          // next column\n          columnIndex += 1\n        }\n      }\n    }\n    return indexes\n  }\n\n  public getSqlUnderlyingDataForRow(\n    selectedRow: Row,\n    originalSql: string,\n    headers: SelectColumn[],\n    columnModels: ColumnModel[]\n  ): { synId: string, newSql: string } {\n    let tokens: string[][] = lexer.tokenize(originalSql)\n    // remove all tokens after (and including) group\n    tokens = tokens.slice(0, tokens.findIndex(el => el[0] === 'GROUP'))\n    // replace all columns with *\n    const selectIndex = tokens.findIndex(el => el[0] === 'SELECT')\n    const fromIndex = tokens.findIndex(el => el[0] === 'FROM')\n    tokens.splice(selectIndex + 1, fromIndex - selectIndex - 1, ['STAR', '*', '1'])\n    // add new items to where clause, but only if the column name corresponds to a real column in the table/view!\n    // use row.values\n    if (this.props.data === undefined) {\n      return { synId: '', newSql: '' }\n    }\n    const whereIndex = tokens.findIndex(el => el[0] === 'WHERE')\n    if (whereIndex === -1) {\n      // does not contain a where clause\n      tokens.push(\n        ['WHERE', 'WHERE', '1'],\n      )\n    } else {\n      // alreay contains a where clause, add the first AND\n      tokens.push(\n        ['CONDITIONAL', 'AND', '1'],\n      )\n    }\n    // look for headers in column models, if they match then add a where clause\n    headers.forEach((header: any, index: number) => {\n      const matchingColumnModel = columnModels!.find(columnModel => columnModel.name === header.name)\n      if (matchingColumnModel) {\n        const rowValue = selectedRow.values[index]\n        tokens.push(\n          ['LITERAL', matchingColumnModel.name, '1'],\n          ['OPERATOR', '=', '1'],\n          ['STRING', rowValue, '1'],\n          ['CONDITIONAL', 'AND', '1'],\n        )\n      }\n    })\n    // remove the last AND\n    tokens.pop()\n    // remove backtick from output sql (for table name): `syn1234` becomes syn1234\n    const synId = tokens[tokens.findIndex(el => el[0] === 'FROM') + 1][1]\n    tokens.push(['EOF', '', '1'])\n    return { synId, newSql: formatSQLFromParser(tokens) }\n  }\n\n  /**\n   * Handle a click on next or previous\n   *\n   * @memberof SynapseTable\n   */\n  private handlePaginationClick = (eventType: string) => (_event: React.MouseEvent<HTMLButtonElement>) => {\n    const queryRequest = this.props.getLastQueryRequest!()\n    let currentOffset = queryRequest.query.offset!\n        // if its a \"previous\" click subtract from the offset\n        // otherwise its next and we paginate forward\n    if (eventType === PREVIOUS) {\n      currentOffset -= 25\n    }\n    if (eventType === NEXT) {\n      currentOffset += 25\n    }\n    queryRequest.query.offset = currentOffset\n    this.props.executeQueryRequest!(queryRequest)\n  }\n  /**\n   * Handle a column having been selected\n   *\n   * @memberof SynapseTable\n   */\n  public handleColumnSortPress = (dict: Info) => (_: React.SyntheticEvent) => {\n    // by using Synthetic event we can use the handler on both key press and mouse click\n    let columnIconSortState = cloneDeep(this.state.columnIconSortState)\n    if (columnIconSortState.length === 0) {\n      columnIconSortState = Array(this.getLengthOfPropsData()).fill(0)\n    }\n    // get currently sorted items and remove/insert/update this selection\n    const sortedColumnSelection = cloneDeep(this.state.sortedColumnSelection)\n    const index = this.findSelectionIndex(sortedColumnSelection, dict.name)\n    // if its present then remove it\n    if (index !== -1) {\n      sortedColumnSelection.splice(index, 1)\n    }\n    columnIconSortState[dict.index] = (columnIconSortState[dict.index] + 1) % ICON_STATE.length\n    if (columnIconSortState[dict.index] > 0) {\n      sortedColumnSelection.unshift({\n        column: dict.name,\n        direction: SORT_STATE[columnIconSortState[dict.index]]\n      })\n    }\n    const queryRequest = this.props.getLastQueryRequest!()\n    queryRequest.query.sort = sortedColumnSelection\n    this.props.executeQueryRequest!(queryRequest)\n    this.setState({\n      columnIconSortState,\n      sortedColumnSelection\n    })\n  }\n\n  private showPaginationButtons(pastZero: boolean): any {\n\n    const previous = (\n      <button\n        onClick={this.handlePaginationClick(PREVIOUS)}\n        className=\"SRC-primary-background-color-hover SRC-viewMoreButton pull-right\"\n        type=\"button\"\n      >\n        Previous\n      </button>\n    )\n\n    const next = (\n      (\n        <button\n          onClick={this.handlePaginationClick(NEXT)}\n          className=\"SRC-primary-background-color-hover SRC-viewMoreButton pull-right\"\n          type=\"button\"\n        >\n          Next\n        </button>\n      )\n    )\n\n    return (\n      <React.Fragment>\n        {next}\n        {pastZero && previous}\n      </React.Fragment>\n    )\n  }\n\n  /**\n   * Renders the dropdown menu to the top right of table that allows users\n   * to toggle a columnn from the view of the table\n   *\n   * @private\n   * @param {SelectColumn[]} headers\n   * @returns {React.ReactNode}\n   * @memberof SynapseTable\n   */\n  private renderDropdownColumnMenu(headers: SelectColumn[]): React.ReactNode {\n    return headers.map((header: any, index: number) => {\n      let isColumnSelected: boolean | undefined = this.state.isColumnSelected[index]\n      // if visibleColumnCount is not defined then show all columns\n      const { visibleColumnCount = Infinity } = this.props\n      if (isColumnSelected === undefined) {\n        isColumnSelected = (index < visibleColumnCount)\n      }\n      const iconStyle: any = { width: '11px', marginRight: '10px' }\n      if (!isColumnSelected) {\n        iconStyle.visibility = 'hidden'\n      }\n      const maybeShowPrimaryColor = isColumnSelected ? 'SRC-primary-text-color' : ''\n\n      return (\n        <li\n          style={{ listStyle: 'none' }}\n          className=\"SRC-table-dropdown-list SRC-primary-background-color-hover\"\n          key={header.name}\n          onClick={this.toggleColumnSelection(index)}\n        >\n          <a className=\"SRC-no-focus\" href=\"\">\n            <FontAwesomeIcon\n              style={iconStyle}\n              className={maybeShowPrimaryColor}\n              icon=\"check\"\n            />\n            {header.name}\n          </a>\n        </li>\n      )\n    })\n  }\n\n  private createTableRows(rows: Row [], headers: SelectColumn[]) {\n    const rowsFormatted: JSX.Element[] = []\n    const { isColumnSelected } = this.state\n    const isColumnSelectedLen = isColumnSelected.length\n    // find column indices that are COUNT type\n    const countColumnIndexes = this.getCountFunctionColumnIndexes(this.props.getLastQueryRequest!().query.sql)\n\n    rows.forEach((row: any, i: any) => {\n      const rowContent = row.values.map(\n        (columnValue: string, j: number) => {\n          const columnName = headers[j].name\n          const index = this.findSelectionIndex(this.state.sortedColumnSelection, columnName)\n          const { visibleColumnCount = Infinity } = this.props\n          // on iniital load isColumnSelected is null and we by default show all columns that come\n          // before visibileColumnCount\n          const isColumnActiveInitLoad: boolean = j < visibleColumnCount && isColumnSelectedLen === 0\n          // past the initial load -- when a user has started clicking items, then isColumnSelected is\n          // not null and we verify that this column is part of the selection.\n          const isColumnActivePastInitLoad = isColumnSelectedLen !== 0 && this.state.isColumnSelected[j]\n          const isCountColumn = countColumnIndexes.includes(j)\n          if (isColumnActiveInitLoad || isColumnActivePastInitLoad) {\n            return (\n              <td className=\"SRC_noBorderTop\" key={`(${i}${columnValue}${j})`}>\n                  {\n                    isCountColumn &&\n                    <a href=\"\" onClick={this.showGroupRowData(row)}>\n                      <p className={`${index === -1 ? '' : 'SRC-boldText'}`}>{columnValue}</p>\n                    </a>\n                  }\n                  {\n                    !isCountColumn &&\n                    <p className={`${index === -1 ? '' : 'SRC-boldText'}`}>{columnValue}</p>\n                  }\n              </td>\n            )\n          }\n          return (<td className=\"SRC-hidden\" key={`(${i},${j})`}/>)\n        })\n      const rowFormatted = (\n        <tr key={row.rowId}>{rowContent}</tr>\n      )\n      rowsFormatted.push(rowFormatted)\n    })\n    return rowsFormatted\n  }\n\n  private createTableHeader(headers: SelectColumn[], facets: FacetColumnResult[]) {\n    const columnElements: JSX.Element[] = []\n    const { isColumnSelected, sortedColumnSelection, columnIconSortState } = this.state\n    const { visibleColumnCount = Infinity } = this.props\n    headers.map((column: SelectColumn, index: number) => {\n      // two cases when rendering the column headers on init load\n      // of the page we have to show only this.props.visibleColumnCount many\n      // columns, afterwards we rely on the isColumnSelected to get choices\n      const initRender: boolean = index < visibleColumnCount && isColumnSelected.length === 0\n      const subsequentRender = isColumnSelected[index] && isColumnSelected.length !== 0\n      if (initRender || subsequentRender) {\n        // for background color\n        const isSelected: boolean = this.findSelectionIndex(sortedColumnSelection, column.name) !== -1\n        // for icon state\n        const columnIndex: number = columnIconSortState[index] === undefined ? 0 : columnIconSortState[index]\n        // we have to figure out if the current column is a facet selection\n        const facetIndex: number = facets.findIndex((facetColumnResult: FacetColumnResult) => {\n          return this.useFacetAliasIfDefined(facetColumnResult.columnName) === column.name\n        })\n        // the header must be included in the facets and it has to be enumerable for current rendering capabilities\n        const isFacetSelection: boolean = facetIndex !== -1 && facets[facetIndex].facetType === 'enumeration'\n        const isSelectedSpanClass = (isSelected ? 'SRC-primary-background-color SRC-anchor-light' : '')\n        const isSelectedIconClass = isSelected ? 'SRC-selected-table-icon' : 'SRC-primary-text-color'\n        const sortSpanBackgoundClass = `SRC-tableHead SRC-hand-cursor SRC-sortPadding SRC-primary-background-color-hover ${isSelectedSpanClass}`\n        columnElements.push(\n          <th key={column.name}>\n            <div className=\"SRC-centerContent\">\n              <span style={{ whiteSpace: 'nowrap' }}>\n              {column.name}\n              </span>\n              {isFacetSelection && this.configureFacetDropdown(index, facets, facetIndex)}\n              <span\n                tabIndex={0}\n                className={sortSpanBackgoundClass}\n                onKeyPress={this.handleColumnSortPress({ index, name: column.name })}\n                onClick={this.handleColumnSortPress({ index, name: column.name })}\n              >\n                <FontAwesomeIcon\n                  className={`SRC-primary-background-color-hover  ${isSelectedIconClass}`}\n                  icon={ICON_STATE[columnIndex] as IconProp}\n                />\n              </span>\n            </div>\n          </th>\n        )\n      } else {\n        columnElements.push(<th className=\"SRC-hidden\" key={column.name} />)\n      }\n    })\n    return columnElements\n  }\n\n  /**\n   * Utility to search through array of objects and find object with key \"column\"\n   * equal to input parameter \"name\"\n   *\n   * @param {*} sortedColumnSelection\n   * @param {*} name\n   * @returns -1 if not present, otherwise the index of the object\n   * @memberof SynapseTable\n   */\n  private findSelectionIndex(sortedColumnSelection: SortItem [], name: string) {\n    if (sortedColumnSelection.length !== 0) {\n      // find if the current selection exists already and remove it\n      return sortedColumnSelection.findIndex((el: SortItem) => el.column === name)\n    }\n    return -1\n  }\n\n  // TODO: implement this method\n  private download() {\n    return\n  }\n\n  // Direct user to synapse corresponding synapse table\n  private advancedSearch(event: React.SyntheticEvent) {\n    event.preventDefault()\n    const lastQueryRequest = this.props.getLastQueryRequest!()\n    const { query } = lastQueryRequest\n        // base 64 encode the json of the query and go to url with the encoded object\n    const encodedQuery = btoa(JSON.stringify(query))\n    const synTable = this.props.synapseId\n    window.open(`https://www.synapse.org/#!Synapse:${synTable}/tables/query/${encodedQuery}`, '_blank')\n  }\n\n  /**\n   * Handles the opening and closing of the column select menu, this method\n   * is only necessary because react overrides the behavior that bootstrap\n   * embeds in its menus\n   *\n   * @memberof SynapseTable\n   */\n  public toggleMenuWall() {\n    const { isOpen, isFilterSelected } = this.state\n\n    if (!isOpen) {\n      // the dropdown was closed coming into this method, so now it will be opened\n      // so we activate the menu wall.\n      for (let i = 0; i < isFilterSelected.length; i += 1) {\n        isFilterSelected[i] = false\n      }\n      this.setState({ menuWallIsActive: true })\n    } else {\n      // dropdown was open coming into this method, so we activate the menu wall\n      // to allow the dropdown to be closed\n      this.setState({ menuWallIsActive: false })\n    }\n\n    this.setState({ isFilterSelected, isOpen: !isOpen })\n  }\n\n  private getLengthOfPropsData() {\n    const { data } = this.props\n    return data!.queryResult.queryResults.headers.length\n  }\n  /**\n   * Handles the toggle of a column select, this will cause the table to\n   * either show the column or hide depending on the prior state of the column\n   *\n   * @memberof SynapseTable\n   */\n  public toggleColumnSelection = (index: number) => (event: React.MouseEvent<HTMLLIElement>) => {\n    event.preventDefault()\n    let isColumnSelected: boolean []\n    // lazily initialize isColumnSelected, at first it's empty\n    // and then on first column click we set it\n    if (this.state.isColumnSelected.length === 0) {\n      const { visibleColumnCount = Infinity } = this.props\n      // unpack all the data\n      const lengthOfPropsData = this.getLengthOfPropsData()\n      let defaultSelection\n      // fill up to visibleColumnCount with true and the rest as false\n      if (visibleColumnCount === Infinity) {\n        // if set to zero then its all true\n        defaultSelection = Array(lengthOfPropsData).fill(true)\n      } else {\n        // fill in whole array as false\n        defaultSelection = Array(lengthOfPropsData).fill(false)\n        // then fill in up until lengthOfPropsData with true\n        defaultSelection.fill(true, 0, visibleColumnCount)\n      }\n      isColumnSelected = defaultSelection\n    } else {\n      isColumnSelected = cloneDeep(this.state.isColumnSelected)\n    }\n    isColumnSelected[index] = !isColumnSelected[index]\n    this.setState({ isColumnSelected })\n  }\n\n  /**\n   * Show the dropdown menu for a column that has been faceted\n   *\n   * @param {number} index this is column index of the query table data\n   * @param {string} columnName this is the name of the column\n   * @param {FacetColumnResult[]} facetColumnResults\n   * @param {number} facetIndex\n   * @returns\n   * @memberof SynapseTable\n   */\n  public configureFacetDropdown(index: number, facetColumnResults: FacetColumnResult[], facetIndex: number) {\n\n    // this grabs the specific facet selection\n    const facetColumnResult = facetColumnResults[facetIndex] as FacetColumnResultValues\n    const columnName = facetColumnResult.columnName\n\n    // this is related to whether we've selected this column or not\n    const isCurFilterSelected = this.state.isFilterSelected[index]\n\n    const ref: React.RefObject<HTMLSpanElement> = React.createRef()\n    const refOuterDiv: React.RefObject<HTMLDivElement> = React.createRef()\n\n    const applyPrimary = isCurFilterSelected ? 'SRC-primary-background-color' : 'SRC-primary-text-color'\n    const classList = this.state.filterClassList[index]\n    const style = { alignItems: 'center', marginLeft: '10px', marginRight: '3px', color: 'black', display: 'flex' }\n\n    return (\n      <div\n        ref={refOuterDiv}\n        style={style}\n        className={`SRC-table-facet-dropdown btn-group SRC-tableHead ${isCurFilterSelected ? 'open SRC-anchor-light' : ''}`}\n      >\n        <span\n          tabIndex={0}\n          className={`SRC-padding SRC-hand-cursor SRC-primary-background-color-hover ${applyPrimary}`}\n          onKeyPress={this.toggleFilterDropdown(index, isCurFilterSelected, refOuterDiv)}\n          onClick={this.toggleFilterDropdown(index, isCurFilterSelected, refOuterDiv)}\n          style={{ outline: 'none' }}\n        >\n          <FontAwesomeIcon\n            style={{ margin: 'auto' }}\n            size={'1x'}\n            className={applyPrimary}\n            color={isCurFilterSelected ? 'white' : ''}\n            icon=\"filter\"\n          />\n        </span>\n\n        <div className={`dropdown-menu SRC-minDropdownWidth ${classList}`}>\n          <div className=\"paddingMenuDropdown\">\n            <ul style={{ listStyleType: 'none' }} className=\"scrollable\">\n              <br />\n              <label\n                style={{ paddingBottom: '8px' }}\n                className=\"dropdownList SRC-border-bottom-only SRC-overflowWrap SRC-base-font containerCheckbox\"\n              >\n                All\n                <input\n                  onClick={this.applyChanges({ ref, columnName, selector: SELECT_ALL })}\n                  checked={this.props.isAllFilterSelectedForFacet![columnName]}\n                  className=\"SRC-facet-checkboxes\"\n                  type=\"checkbox\"\n                />\n                <span className=\"checkmark\" />\n              </label>\n              <span ref={ref}>\n                {this.renderFacetSelection(facetColumnResult, ref, columnName)}\n              </span>\n            </ul>\n\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  public closeMenuClickHandler(_: React.SyntheticEvent) {\n    const { menuWallIsActive } = this.state\n    const isFilterSelected = cloneDeep(this.state.isFilterSelected)\n    const filterClassList = cloneDeep(this.state.filterClassList)\n\n    if (menuWallIsActive) {\n      // need to close the menus and column select menu\n      for (let i = 0; i < isFilterSelected.length; i += 1) {\n        isFilterSelected[i] = false\n        filterClassList[i] = ''\n      }\n\n      this.setState({\n        filterClassList,\n        isFilterSelected,\n        isOpen: false,\n        menuWallIsActive: false\n      })\n    }\n  }\n\n  public renderFacetSelection(\n    facetColumnResult: FacetColumnResultValues,\n    ref: React.RefObject<HTMLSpanElement>,\n    columnName: string,\n  ): React.ReactNode {\n\n    const { lastFacetSelection, isLoading, isAllFilterSelectedForFacet } = this.props\n    return facetColumnResult.facetValues.map(\n      (facetColumnResultValueCount: FacetColumnResultValueCount) => {\n        const { value: facetValue, count } = facetColumnResultValueCount\n        let displayValue = facetValue\n        if (displayValue === 'org.sagebionetworks.UNDEFINED_NULL_NOTSET') {\n          displayValue = 'unannotated'\n        }\n        const key = columnName + facetValue + count\n        const isValueSelected = isAllFilterSelectedForFacet![columnName] ? false :  getIsValueSelected({\n          columnName,\n          isLoading,\n          lastFacetSelection,\n          curFacetSelection: facetColumnResultValueCount,\n        })\n        return (\n          <li key={key}>\n            <label className=\"dropdownList SRC-overflowWrap SRC-base-font containerCheckbox\">\n              {displayValue}\n              <span style={{ color: '#DDDDDF', marginLeft: '3px' }}> ({count}) </span>\n              <input\n                onChange={this.applyChanges({ ref, columnName, facetValue })}\n                checked={isValueSelected}\n                className=\"SRC-facet-checkboxes\"\n                type=\"checkbox\"\n                value={facetValue}\n              />\n              <span className=\"checkmark\" />\n            </label>\n          </li>\n        )\n      })\n  }\n\n  /**\n   * When the user decides to submit their changes for the dropdown menu with the facet, they have an\n   * apply button, this method handles that submission.\n   *\n   * @memberof SynapseTable\n   */\n  public applyChanges = ({\n      ref,\n      columnName,\n      facetValue = '',\n      selector = '',\n    }: {\n      ref: React.RefObject<HTMLSpanElement>,\n      columnName: string,\n      facetValue?: string,\n      selector?: string,\n    }) => (_: React.SyntheticEvent<HTMLElement>) => {\n      const htmlCheckboxes = Array.from(ref.current!.querySelectorAll('.SRC-facet-checkboxes')) as HTMLInputElement []\n      const queryRequest: QueryBundleRequest = this.props.getLastQueryRequest!()\n      const { isAllFilterSelectedForFacet } = this.props\n      const { newQueryRequest } = readFacetValues({\n        htmlCheckboxes,\n        queryRequest,\n        selector,\n        filter: columnName\n      })\n\n      const lastFacetSelection = {\n        columnName,\n        facetValue,\n        selector\n      } as FacetSelection\n      isAllFilterSelectedForFacet![columnName] = selector === SELECT_ALL\n      this.props.updateParentState!({\n        lastFacetSelection,\n        isAllFilterSelectedForFacet\n      })\n\n      this.props.executeQueryRequest!(newQueryRequest)\n    }\n\n  public toggleFilterDropdown =\n   (index: number, isCurFilterSelected: boolean, refOuterDiv: React.RefObject<HTMLDivElement>) => (_event?: any) => {\n     const isFilterSelected = cloneDeep(this.state.isFilterSelected)\n     const filterClassList = cloneDeep(this.state.filterClassList)\n     isFilterSelected[index] = !isCurFilterSelected\n     // close all the other filters menus\n     for (let i = 0; i < isFilterSelected.length; i += 1) {\n       if (i !== index) {\n         isFilterSelected[i] = false\n       }\n     }\n     // The dropdown is located inside of a scrollable, to know whether the current filter menu item is near the\n     // front of the scrollable we can examine its parent bounding rect -- this gives a relative value\n     // (that changes on scroll) of the filter to a fixed left most point.\n     const tHeadLeftPosition = refOuterDiv.current!.parentElement!.getBoundingClientRect().left\n     let classNames = '' //  the classes to be applied to the filter dropdown menu\n     if (isFilterSelected[index]) {\n       classNames = tHeadLeftPosition < MIN_SPACE_FACET_MENU ?\n         'SRC-forceLeftDropdown dropdown-menu-left' : 'dropdown-menu-right'\n     } else {\n       classNames = ''\n     }\n     // set the class names for this dropdown item\n     filterClassList[index] = classNames\n     this.setState({\n       filterClassList,\n       isFilterSelected,\n       isOpen: false,\n       menuWallIsActive: !isCurFilterSelected\n     })\n   }\n}\n","import * as React from 'react'\nimport { QueryResultBundle } from '../utils/jsonResponses/Table/QueryResultBundle'\n\nexport type TotalQueryResultsProps = {\n  data: QueryResultBundle\n  filter?: string\n  totalResultsNoFacet?: number\n  isLoading: boolean\n  unitDescription: string\n}\n\nexport const TotalQueryResults: React.FunctionComponent<TotalQueryResultsProps> =\n  ({ data, filter, totalResultsNoFacet, isLoading, unitDescription }) => {\n    const { facets = [] } = data\n    let total = 0\n    if (filter) {\n      const curFacetsIndex = facets.findIndex(el => el.facetType === 'enumeration' && el.columnName === filter)\n      // calculate the values chosen\n      const curFacets = data.facets[curFacetsIndex]\n      // edge case -- if they are all false then they are considered all true..\n      // sum up the counts of data\n      let anyTrue = false\n      let totalAllFalseCase = 0\n      let totalStandardCase = 0\n\n      if (curFacets) {\n        for (const key of curFacets.facetValues) {\n          anyTrue = anyTrue || key.isSelected\n          totalAllFalseCase += key.count\n          totalStandardCase += key.isSelected ? key.count : 0\n        }\n      }\n      total = anyTrue ? totalStandardCase : totalAllFalseCase\n\n      if (data.queryResult.queryResults.rows.length === 0) {\n        // we override the statements above if there are zero results because the current UI\n        // would be showing zero cards\n        total = 0\n      }\n\n    } else {\n      // If the user isn't drilling down with a facet then we look at the total\n      // count passed into the view\n      if (!totalResultsNoFacet) {\n        throw Error('Error calculating total, did not specify total for unfaceted view')\n      }\n      total = totalResultsNoFacet\n    }\n    return (\n      <p className=\"SRC-boldText SRC-text-title SRC-centerContent\">Displaying {total} {unitDescription}\n          {/*\n            add loading spinner if isLoading\n          */}\n          {isLoading && <span style={{ marginLeft: '2px' }} className={'spinner'}/>}\n        </p>\n    )\n  }\n","import { library } from '@fortawesome/fontawesome-svg-core'\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons'\nimport * as React from 'react'\nimport {\n  FacetColumnResultValueCount,\n  FacetColumnResultValues,\n  FacetColumnResult\n} from '../utils/jsonResponses/Table/FacetColumnResult'\nimport { QueryBundleRequest } from '../utils/jsonResponses/Table/QueryBundleRequest'\nimport { getColorPallette } from './ColorGradient'\nimport { QueryWrapperChildProps, FacetSelection } from './QueryWrapper'\n\nimport { SELECT_ALL } from './SynapseTable'\nimport { getIsValueSelected, readFacetValues } from '../utils/modules/facetUtils'\nimport { TotalQueryResults } from './TotalQueryResults'\n\nexport const SELECT_SINGLE_FACET = 'SELECT_SINGLE_FACET'\n// Add all icons to the library so you can use it in your page\nlibrary.add(faTimes)\nlibrary.add(faPlus)\n\ntype CheckboxGroupProps = {\n  isAllFilterSelected: boolean\n  rgbIndex: number\n  facetColumnResult: FacetColumnResultValues\n  applyChanges: (\n    ref: React.RefObject<HTMLSpanElement>,\n    facetValue: string,\n    selector: string,\n  ) =>\n  (\n    _event: React.MouseEvent<HTMLSpanElement>\n  ) => void\n  showAllFacets: boolean\n  lastFacetSelection: FacetSelection\n  isLoading: boolean\n}\n\nexport const FACET_SELECTED_CLASS = 'FACET_SELECTED_CLASS'\nexport const FACET_NOT_SELECTED_CLASS = 'FACET_NOT_SELECTED_CLASS'\n\n/**\n * Checkbox group represents one column's set of checkbox filters\n *\n * @class CheckboxGroup\n * @extends {React.Component}\n */\nconst CheckboxGroup: React.FunctionComponent<CheckboxGroupProps> = (props: CheckboxGroupProps) => {\n\n  const {\n    facetColumnResult,\n    showAllFacets,\n    lastFacetSelection,\n    isLoading,\n    rgbIndex,\n    isAllFilterSelected,\n  } = props\n  const children: any = []\n  const ref: React.RefObject<HTMLSpanElement> = React.createRef()\n  // Note: this actually sorts the data when it appears in the\n  // table as it stands currently, this may change depending on\n  // if that arrangment is no longer desired\n  facetColumnResult.facetValues.sort((a: any, b: any) => {\n    return b.count - a.count\n  })\n  const { colorPalette, textColors } = getColorPallette(rgbIndex, facetColumnResult.facetValues.length)\n  facetColumnResult.facetValues.forEach((facetColumnResultValues: FacetColumnResultValueCount, index: number) => {\n\n    const key = facetColumnResult.columnName + facetColumnResultValues.value + facetColumnResultValues.count\n    const textColor = textColors[index]\n    const curColor = colorPalette[index]\n    let style: any = {}\n\n    const isSelected = isAllFilterSelected ? true : getIsValueSelected({\n      isLoading,\n      lastFacetSelection,\n      columnName: facetColumnResult.columnName,\n      curFacetSelection: facetColumnResultValues\n    })\n\n    if (isSelected) {\n      style = {\n        background: curColor\n      }\n    } else {\n      style = {\n        background: '#C4C4C4'\n      }\n    }\n    // we add this class for testability\n    const backgroundClass = isSelected ? FACET_SELECTED_CLASS : FACET_NOT_SELECTED_CLASS\n    style.color = textColor\n    const { value, count } = facetColumnResultValues\n    const displayValue = value === 'org.sagebionetworks.UNDEFINED_NULL_NOTSET' ? 'unannotated' : value\n\n    children.push(\n      <label\n        style={style}\n        className=\"SRC-facets SRC-primary-background-color-hover SRC-nested-color\"\n        key={key}\n      >\n        <span className=\"SRC-facets-text\">\n          {displayValue} ({count}){' '}\n        </span>\n        <input\n          // @ts-ignore\n          onChange={props.applyChanges(ref, value , SELECT_SINGLE_FACET)}\n          checked={isSelected}\n          type=\"checkbox\"\n          value={value}\n          className={`SRC-hidden SRC-facet-checkboxes ${backgroundClass}`}\n        />\n      </label>\n    )\n  })\n  // By default only show 5 facets unless the user has clicked a facet, in which case\n  // showAllFacets will be true.\n  const childrenView = children.map((child: any, index: number) => !showAllFacets && index > 4 ? false : child)\n  return (\n    // need a span so that we can have a ref attachable\n    <span ref={ref}>\n      {childrenView}\n    </span>\n  )\n}\n\ntype FacetsState = {\n  showAllFacets: boolean\n}\n\nclass Facets extends React.Component<QueryWrapperChildProps, FacetsState> {\n\n  constructor(props: QueryWrapperChildProps) {\n    super(props)\n    this.applyChanges = this.applyChanges.bind(this)\n    this.state = {\n      showAllFacets: false\n    }\n    this.showAllFacets = this.showAllFacets.bind(this)\n    this.showButtons = this.showButtons.bind(this)\n  }\n  /**\n   * Display the view of the facets\n   *\n   * @returns\n   * @memberof Facets\n   */\n  public showFacetFilter() {\n    //  find the facetcolumn result according to the input filter\n    const facetColumnResult = this.props.data!.facets.\n      find((el: FacetColumnResult) => el.columnName === this.props.filter && el.facetType === 'enumeration')!\n\n    return (\n      <CheckboxGroup\n        isAllFilterSelected={this.props.isAllFilterSelectedForFacet![this.props.filter!]}\n        showAllFacets={this.state.showAllFacets}\n        rgbIndex={this.props.rgbIndex!}\n        key={facetColumnResult.columnName}\n        facetColumnResult={facetColumnResult}\n        applyChanges={this.applyChanges}\n        isLoading={this.props.isLoading!}\n        lastFacetSelection={this.props.lastFacetSelection!}\n      />\n    )\n  }\n\n  /**\n   * Handle checkbox click event\n   */\n  public applyChanges = (\n    ref: React.RefObject<HTMLSpanElement>,\n    facetValue: string,\n    selector :string,\n    index?: number\n  ) =>\n  (event: React.MouseEvent<HTMLSpanElement>) => {\n    event.preventDefault()\n    if (!this.state.showAllFacets) {\n      this.setState({\n        showAllFacets: true\n      })\n    }\n\n    const { filter = '', isAllFilterSelectedForFacet = {} } = this.props\n\n    const lastFacetSelection = {\n      facetValue,\n      selector,\n      columnName: filter,\n    } as FacetSelection\n    isAllFilterSelectedForFacet[filter] = selector === SELECT_ALL\n\n    this.props.updateParentState!({\n      lastFacetSelection,\n      isAllFilterSelectedForFacet,\n      chartSelectionIndex: index\n    })\n\n    // read input and fetch data\n    const htmlCheckboxes = Array.from(ref.current!.querySelectorAll('.SRC-facet-checkboxes')) as HTMLInputElement[]\n    // queryRequest is a deep clone\n    const queryRequest: QueryBundleRequest = this.props.getLastQueryRequest!()\n    const { newQueryRequest } = readFacetValues({\n      htmlCheckboxes,\n      queryRequest,\n      selector,\n      filter,\n      value: facetValue,\n    })\n\n    queryRequest.query.offset = 0\n    this.props.executeQueryRequest!(newQueryRequest)\n  }\n\n  public showAllFacets(event: React.MouseEvent<HTMLAnchorElement>) {\n    event.preventDefault()\n    this.setState({\n      showAllFacets: true\n    })\n  }\n\n  public showButtons(showAllFacets: boolean, curFacetsLength: number, ref: React.RefObject<HTMLDivElement>) {\n    if (showAllFacets) {\n      // this is hidden if there are > 5 facets, wait for user to make\n      // an action for this to appear\n      return (\n        <a\n          href={''}\n          className=\"SRC-primary-text-color SRC-facet-select-all SRC-no-text-decor\"\n          onClick={this.applyChanges(ref, '', SELECT_ALL)}\n        >\n          Select All\n        </a>\n      )\n    }\n\n    return (\n      <a\n        href={''}\n        id=\"showAllFacetsButton\"\n        className=\"SRC-primary-text-color SRC-no-text-decor\"\n        onClick={this.showAllFacets}\n      >\n        {' '}\n        Show All ({curFacetsLength}){' '}\n      </a>\n    )\n  }\n\n  public render() {\n    if (!this.props.data) {\n      return (<div/>)\n    }\n    let { showAllFacets } = this.state\n    const { data, filter, unitDescription, isLoading, showBarChart } = this.props\n    const { facets } = data\n\n    const curFacetsIndex = facets.findIndex(facet => facet.columnName === filter && facet.facetType === 'enumeration')\n    // cast is necessary because filter returns an array of arrays\n    const facetColumnResultValues = facets[curFacetsIndex] as FacetColumnResultValues\n\n    if (!facetColumnResultValues) {\n      return (<div/>)\n    }\n\n    if (facetColumnResultValues.facetValues.length < 5) {\n      // override\n      showAllFacets = true\n    }\n    const ref: React.RefObject<HTMLDivElement> = React.createRef()\n    return (\n      <div className=\"SRC-syn-border-spacing\">\n        {\n          !showBarChart\n          &&\n          <TotalQueryResults\n            data={data}\n            filter={filter}\n            unitDescription={unitDescription!}\n            isLoading={isLoading!}\n          />\n        }\n        <form>\n          <div ref={ref} className=\"SRC-marginFive form-group\">\n            {this.showFacetFilter()}\n            <span className=\"SRC-inlineBlock\">\n              {this.showButtons(showAllFacets, facetColumnResultValues.facetValues.length, ref)}\n            </span>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport { Facets, CheckboxGroup }\n","import { SynapseConstants, SynapseClient } from '../utils/'\nimport * as React from 'react'\nimport { QueryBundleRequest } from '../utils/jsonResponses/Table/QueryBundleRequest'\n\nexport type QueryCountProps = {\n  sql: string\n  name: string\n  token?: string\n}\n\ntype QueryCountState = {\n  [index: string]: number\n}\n\n\n/**\n * QueryCount shows a query count\n *\n * @export\n * @class QueryCount\n * @extends {React.Component<QueryCountProps, QueryCountState>}\n */\nexport default class QueryCount extends React.Component<QueryCountProps, QueryCountState> {\n\n  constructor(props: QueryCountProps) {\n    super(props)\n    this.state = {}\n    this.calculateRowCount = this.calculateRowCount.bind(this)\n  }\n\n  componentDidMount() {\n    this.calculateRowCount()\n  }\n  \n  componentDidUpdate() {\n    this.calculateRowCount()\n  }\n  \n  calculateRowCount() {\n    const { sql, token } = this.props\n    if (this.state[sql]) {\n      return\n    }\n    const request: QueryBundleRequest = {\n      concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n      query: {\n        sql,\n      },\n      partMask: SynapseConstants.BUNDLE_MASK_QUERY_COUNT\n    }\n    SynapseClient.getQueryTableResults(request, token).then(\n      (data) => {\n        this.setState({ [sql]: data.queryCount! })\n      }\n    )\n  }\n\n  render () {\n    const { sql, name } = this.props\n    const count = this.state[sql]\n    /* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString#Using_toLocaleString */\n    return <React.Fragment> {name} ({count && count.toLocaleString()}) </React.Fragment>\n  }\n}\n","import * as React from 'react'\nimport { QueryBundleRequest } from '../utils/jsonResponses/Table/QueryBundleRequest'\nimport { QueryResultBundle } from '../utils/jsonResponses/Table/QueryResultBundle'\nimport { SynapseClient, SynapseConstants } from '../utils/'\nimport { cloneDeep } from '../utils/modules'\nimport { getNextPageOfData } from '../utils/modules/queryUtils'\nimport { AsynchronousJobStatus } from '../utils/jsonResponses/Table/AsynchronousJobStatus'\nimport { FacetColumnResultValues } from '../utils/jsonResponses/Table/FacetColumnResult'\n\nexport type QueryWrapperProps = {\n  initQueryRequest?: QueryBundleRequest\n  rgbIndex?: number\n  token?: string\n  showMenu?: boolean\n  facetName: string\n  loadingScreen?: JSX.Element\n  unitDescription?: string\n  facetAliases?: {}\n  loadNow?: boolean\n  showBarChart?: boolean\n}\n\nexport type QueryWrapperState = {\n  /*\n    isAllFilterSelectedForFacet tracks whether for a particular\n     facet if the 'All' button has been selected, this tracks the\n     click event and syncs Facets.tsx and SynapseTable.tsx\n  */\n  isAllFilterSelectedForFacet: {}\n  data: QueryResultBundle | undefined\n  isLoadingNewData: boolean  // occurs when props change\n  isLoading: boolean         // occurs when state changes\n  lastQueryRequest: QueryBundleRequest\n  hasMoreData: boolean\n  lastFacetSelection: FacetSelection\n  chartSelectionIndex: number\n  asyncJobStatus?: AsynchronousJobStatus\n  facetAliases?: {}\n  loadNowStarted: boolean\n}\n\nexport type FacetSelection = {\n  columnName: string\n  facetValue: string\n  selector: string\n}\n\n// Since the component is an HOC we export the props passed down\nexport type QueryWrapperChildProps = {\n  isAllFilterSelectedForFacet?: {}\n  isLoading?: boolean\n  isLoadingNewData?: boolean\n  executeQueryRequest?: (param: QueryBundleRequest) => void\n  executeInitialQueryRequest?: () => void\n  getNextPageOfData?: (queryRequest: QueryBundleRequest) => void\n  getLastQueryRequest?: () => QueryBundleRequest\n  data?: QueryResultBundle\n  filter?: string\n  updateParentState?: (param: any) => void\n  rgbIndex?: number\n  unitDescription?: string\n  facetAliases?: {}\n  lastFacetSelection?: FacetSelection\n  chartSelectionIndex?: number\n  asyncJobStatus?: AsynchronousJobStatus\n  showBarChart?: boolean\n}\n\n/**\n * Class wraps around any Synapse views that are dependent on a query bundle\n * Those classes then take in as props:\n *\n * @class QueryWrapper\n * @extends {React.Component}\n */\nexport default class QueryWrapper extends React.Component<QueryWrapperProps, QueryWrapperState> {\n\n  public static defaultProps = {\n    token: ''\n  }\n\n  public static initialState = {\n    data: undefined,\n    isLoading: true,\n    isLoadingNewData: true,\n    lastQueryRequest: {} as QueryBundleRequest,\n    hasMoreData: true,\n    lastFacetSelection: {\n      columnName: '',\n      facetValue: '',\n      selector: ''\n    },\n    chartSelectionIndex: 0,\n    isAllFilterSelectedForFacet: {},\n    loadNowStarted: false\n  } as QueryWrapperState\n\n  constructor(props: QueryWrapperProps) {\n    super(props)\n    this.executeInitialQueryRequest = this.executeInitialQueryRequest.bind(this)\n    this.executeQueryRequest = this.executeQueryRequest.bind(this)\n    this.getLastQueryRequest = this.getLastQueryRequest.bind(this)\n    this.getNextPageOfData = this.getNextPageOfData.bind(this)\n    this.updateParentState = this.updateParentState.bind(this)\n    this.state = QueryWrapper.initialState as QueryWrapperState\n  }\n\n  /**\n   * Compute default query request\n   *\n   * @memberof QueryWrapper\n   */\n  public componentDidMount() {\n    const { loadNow = true } = this.props\n    if (loadNow) {\n      this.executeInitialQueryRequest()\n    }\n  }\n\n  /**\n   * @memberof QueryWrapper\n   */\n  public componentDidUpdate(prevProps: any) {\n    /**\n     *  If component updates and the token has changed (they signed in) then the data should be pulled in. Or if the\n     *  sql query has changed of the component then perform an update.\n     */\n\n    const { loadNow = true } = this.props\n    if (loadNow && !this.state.loadNowStarted) {\n      this.executeInitialQueryRequest()\n    } else if (this.props.token !== '' && prevProps.token === '') {\n      this.executeInitialQueryRequest()\n    } else if (prevProps.initQueryRequest.query.sql !== this.props.initQueryRequest!.query.sql) {\n      this.executeInitialQueryRequest()\n    }\n  }\n\n  /**\n   * Pass down a deep clone (so no side affects on the child's part) of the\n   * last query request made\n   *\n   * @returns\n   * @memberof QueryWrapper\n   */\n  public getLastQueryRequest(): QueryBundleRequest {\n    return cloneDeep(this.state.lastQueryRequest)\n  }\n\n  /**\n   * Execute the given query\n   *\n   * @param {*} queryRequest Query request as specified by\n   *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n   * @memberof QueryWrapper\n   */\n  public executeQueryRequest(queryRequest: QueryBundleRequest) {\n    this.setState({\n      isLoading: true\n    })\n    SynapseClient.getQueryTableResults(\n      queryRequest,\n      this.props.token,\n      this.updateParentState\n    )\n    .then(\n      (data: QueryResultBundle) => {\n        const hasMoreData = data.queryResult.queryResults.rows.length === SynapseConstants.PAGE_SIZE\n        const newState: any = {\n          hasMoreData,\n          data,\n          isLoading: false,\n          lastQueryRequest: cloneDeep(queryRequest),\n          asyncJobStatus: undefined\n        }\n        this.setState(newState)\n      }\n    ).catch((err: string) => {\n      console.log('Failed to get data ', err)\n    })\n  }\n\n  /**\n   * Grab the next page of data, pulling in 25 more rows.\n   *\n   * @param {*} queryRequest Query request as specified by\n   *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n   * @memberof QueryWrapper\n   */\n  public async getNextPageOfData(queryRequest: QueryBundleRequest) {\n    this.setState({\n      isLoading: true\n    })\n\n    await getNextPageOfData(queryRequest, this.state.data!, this.props.token)\n    .then(\n      (newState) => {\n        this.setState({\n          ...newState,\n          isLoading: false,\n          lastQueryRequest: cloneDeep(queryRequest)\n        })\n      }\n    )\n  }\n\n  /**\n   * Execute the initial query passed into the component\n   *\n   * @param {*} queryRequest Query request as specified by\n   *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n   * @memberof QueryWrapper\n   */\n  public executeInitialQueryRequest() {\n    this.setState({\n      isLoading: true,\n      isLoadingNewData: true,\n      chartSelectionIndex: 0,\n      loadNowStarted: true\n    })\n    SynapseClient\n      .getQueryTableResults(this.props.initQueryRequest, this.props.token, this.updateParentState)\n      .then(\n        (data: QueryResultBundle) => {\n          const lastQueryRequest: QueryBundleRequest = cloneDeep(this.props.initQueryRequest!)\n          const hasMoreData = data.queryResult.queryResults.rows.length === SynapseConstants.PAGE_SIZE\n          const isAllFilterSelectedForFacet = cloneDeep(this.state.isAllFilterSelectedForFacet)\n          let { chartSelectionIndex } = this.state\n          data.facets.forEach((el: FacetColumnResultValues) => {\n            if (el.facetType === 'enumeration') {\n              // isAll is only true iff there are no facets selected or all elements are selected\n              const { facetValues } = el\n              const isAllFalse = facetValues.every(facet => !facet.isSelected)\n              const isAllTrue =  facetValues.every(facet => facet.isSelected)\n              const isByDefaultSelected = isAllFalse || isAllTrue\n              isAllFilterSelectedForFacet[el.columnName] = isByDefaultSelected\n              if (el.columnName === this.props.facetName && !isAllFalse) {\n                // Note - this picks the first selected facet\n                chartSelectionIndex = facetValues.sort((a, b) => b.count - a.count).findIndex(facet => facet.isSelected)\n              }\n            }\n          })\n          const newState = {\n            isAllFilterSelectedForFacet,\n            hasMoreData,\n            data,\n            chartSelectionIndex,\n            lastQueryRequest,\n            isLoading: false,\n            isLoadingNewData: false,\n            asyncJobStatus: undefined\n          }\n          this.setState(newState)\n        }\n      ).catch((err) => {\n        console.log('Failed to get data ', err)\n      })\n  }\n\n  public updateParentState (update: QueryWrapperState) {\n    this.setState(update)\n  }\n\n  /**\n   * Render the children without any formatting\n   */\n  public render() {\n    const { isLoading } = this.state\n    const { facetAliases = {} } = this.props\n    // inject props in children of this component\n    const childrenWithProps = (React.Children.map(this.props.children, (child: any) => {\n      return React.cloneElement(child, {\n        facetAliases,\n        isAllFilterSelectedForFacet: this.state.isAllFilterSelectedForFacet,\n        data: this.state.data,\n        executeInitialQueryRequest: this.executeInitialQueryRequest,\n        executeQueryRequest: this.executeQueryRequest,\n        getLastQueryRequest: this.getLastQueryRequest,\n        getNextPageOfData: this.getNextPageOfData,\n        isLoading: this.state.isLoading,\n        isLoadingNewData: this.state.isLoadingNewData,\n        filter: this.props.facetName,\n        rgbIndex: this.props.rgbIndex,\n        unitDescription: this.props.unitDescription,\n        updateParentState: this.updateParentState,\n        isQueryWrapperChild: true,\n        hasMoreData: this.state.hasMoreData,\n        lastFacetSelection: this.state.lastFacetSelection,\n        chartSelectionIndex: this.state.chartSelectionIndex,\n        asyncJobStatus: this.state.asyncJobStatus,\n        showBarChart: this.props.showBarChart\n      })\n    }))\n\n    const loadingCusrorClass = isLoading ? 'SRC-logo-cursor' : ''\n    if (this.props.showMenu) {\n      // menu is to the left of the child components so we let that add its\n      // own html\n      return (\n        <div className={`${loadingCusrorClass}`}>\n          {childrenWithProps}\n        </div>\n      )\n    }\n    return (\n      <div className={`${loadingCusrorClass}`}>\n        {childrenWithProps}\n      </div>\n    )\n  }\n}\n","import { library } from '@fortawesome/fontawesome-svg-core'\nimport { faAngleLeft, faAngleRight } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as React from 'react'\nimport ReactMeasure from \"react-measure\"\nimport ReactTooltip from \"react-tooltip\"\nimport { getColorPallette } from './ColorGradient'\nimport { QueryWrapperChildProps } from './QueryWrapper'\nimport { FacetColumnResultValueCount } from '../utils/jsonResponses/Table/FacetColumnResult'\nimport { getIsValueSelected } from '../utils/modules/facetUtils'\nimport { Link } from 'react-router-dom'\nlibrary.add(faAngleLeft)\nlibrary.add(faAngleRight)\n\nexport const PREVIOUS_ITEM_CLICK = 'left click'\nexport const NEXT_CLICK = 'right click'\n\ntype Rect = {\n  height: number\n  width: number\n  top: number\n  left: number\n  right: number\n  bottom: number\n}\n\ntype MeasureRect = {\n  bounds: Rect\n}\n\nexport type StackedBarChartState = {\n  selectedFacets: {}\n  dimensions: MeasureRect\n}\n\nexport type StackedBarChartProps = {\n  loadingScreen: React.FunctionComponent | JSX.Element\n  link?: string\n  linkText?: string\n}\n\ntype Info = {\n  value: string\n  count: number\n  index: number\n}\n\n/**\n * Make a simple stacked bar chart\n *\n * @class StackedBarChart\n * @extends {React.Component}\n */\nexport default class StackedBarChart extends\n    React.Component<StackedBarChartProps & QueryWrapperChildProps, StackedBarChartState> {\n\n  constructor(props: StackedBarChartProps & QueryWrapperChildProps) {\n    super(props)\n    this.handleHover = this.handleHover.bind(this)\n    this.handleExit = this.handleExit.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleArrowClick = this.handleArrowClick.bind(this)\n    this.getTextForChartSelection = this.getTextForChartSelection.bind(this)\n    this.onMeasureResize = this.onMeasureResize.bind(this)\n    this.rgba2rgb = this.rgba2rgb.bind(this)\n    // the text currently under the cursor\n    this.state = {\n      // the dimensions of the bar chart itself\n      dimensions: { bounds: { height: 1, width: 1, top: 0, left: 0, right: 0, bottom: 0 } },\n      // the text of the current slice\n      // the count of this facet value occurence\n      selectedFacets: {}\n    }\n    this.extractPropsData = this.extractPropsData.bind(this)\n  }\n\n  /**\n   * Updates the hover text and update the view\n   *\n   * @memberof StackedBarChart\n   */\n  public handleHover(event: React.MouseEvent<SVGRectElement>) {\n    // add box shadow\n    event.currentTarget.style.boxShadow = '25px 20px'\n  }\n\n  /**\n   * Update the hover text and the view\n   *\n   * @param {*} event\n   * @memberof StackedBarChart\n   */\n  public handleExit(event: React.MouseEvent<SVGRectElement>) {\n    // remove box shadow\n    event.currentTarget.style.boxShadow = ''\n  }\n\n  /**\n   * Handle column click event\n   */\n  public handleClick = (dict: Info) => (_event: React.MouseEvent<SVGElement>) => {\n    // https://medium.freecodecamp.org/reactjs-pass-parameters-to-event-handlers-ca1f5c422b9\n    this.props.updateParentState!({ chartSelectionIndex: dict.index })\n  }\n\n  public handleArrowClick = (direction: string) => (_event: React.MouseEvent) => {\n    let { chartSelectionIndex = 0 } = this.props\n    let dict: any = this.extractPropsData(this.props.data)\n    const length = Object.keys(dict).length\n    if (direction === PREVIOUS_ITEM_CLICK) {\n      chartSelectionIndex -= 1\n      // if its at zero then we want to wrap around to the end\n      chartSelectionIndex = chartSelectionIndex < 0 ? length - 1 : chartSelectionIndex\n    } else {\n      chartSelectionIndex += 1\n    }\n    chartSelectionIndex = chartSelectionIndex % length\n\n    dict = dict[chartSelectionIndex]\n    this.props.updateParentState!({ chartSelectionIndex })\n    // return is only for testing purposes\n    return chartSelectionIndex\n  }\n\n  public getTextForChartSelection(xData: any) {\n    const { chartSelectionIndex = 0 } = this.props\n    const { facetAliases = {}, filter } = this.props\n    const facetValueDisplay = xData[chartSelectionIndex] && xData[chartSelectionIndex].value\n    const filterDisplay = facetAliases[filter!] || filter\n    return (\n      <span>\n        <span className=\"SRC-text-title SRC-filter-display\">\n          {filterDisplay}\n        </span> :\n        <span className=\"SRC-facet-view SRC-text-title\">\n          {' '}\n          {facetValueDisplay === 'org.sagebionetworks.UNDEFINED_NULL_NOTSET' ? 'unannotated' : facetValueDisplay}\n        </span>\n      </span>\n    )\n  }\n\n  public getFileCount(xData: any) {\n    const { chartSelectionIndex = 1 } = this.props\n    return xData[chartSelectionIndex] && xData[chartSelectionIndex].count\n  }\n\n  public rgba2rgb(background: number[], color: number[]) {\n    const alpha = color[3]\n    return [\n      Math.floor((1 - alpha) * background[0] + alpha * color[0] + 0.5),\n      Math.floor((1 - alpha) * background[1] + alpha * color[1] + 0.5),\n      Math.floor((1 - alpha) * background[2] + alpha * color[2] + 0.5)\n    ]\n  }\n\n  public render() {\n    const {\n      data,\n      isLoadingNewData,\n      loadingScreen,\n      rgbIndex,\n      filter = '',\n      unitDescription,\n      isLoading,\n      lastFacetSelection,\n      isAllFilterSelectedForFacet,\n      chartSelectionIndex,\n      asyncJobStatus\n    } = this.props\n    // while loading\n    if (isLoadingNewData) {\n      return (\n        <div className=\"SRC-loadingContainer SRC-centerContentColumn\">\n          {/*\n            check loading screen is not undefined or null and show\n            it if so\n          */}\n          {!!loadingScreen && loadingScreen}\n          <div>\n            {asyncJobStatus && asyncJobStatus.progressMessage}\n          </div>\n        </div>\n      )\n    }\n    const xData = this.extractPropsData(data)\n    let total: number = 0\n    const width: number = this.state.dimensions.bounds!.width\n    // sum up the counts of data\n    for (const key in xData) {\n      if (xData.hasOwnProperty(key)) {\n        total += xData[key].count\n      }\n    }\n    const { colorPalette, textColors } = getColorPallette(rgbIndex!, xData.length)\n    const originalColor = colorPalette[0]\n\n    return (\n      <React.Fragment>\n        <div className=\"SRC-chart SRC-chart-nav SRC-center-text\">\n          <button\n            className=\"SRC-chart-btn btn btn-default btn-sm SRC-floatRight\"\n            onClick={this.handleArrowClick(NEXT_CLICK)}\n          >\n            <FontAwesomeIcon\n              style={{ fontSize: '11px' }}\n              className=\"SRC-primary-text-color\"\n              icon=\"angle-right\"\n            />\n          </button>\n          <button\n            className=\"SRC-chart-btn btn btn-default btn-sm SRC-floatRight\"\n            onClick={this.handleArrowClick(PREVIOUS_ITEM_CLICK)}\n          >\n            <FontAwesomeIcon\n              style={{ fontSize: '11px' }}\n              className=\"SRC-primary-text-color\"\n              icon=\"angle-left\"\n            />\n          </button>\n        </div>\n        {/* TODO: Refactor the chart into its own component */}\n        <div className=\"SRC-bar-border SRC-bar-marginTop SRC-bar-border-top\">\n          <ReactMeasure\n            bounds={true}\n            onResize={(contentRect: any) => {\n              this.setState({ dimensions: contentRect })\n            }}\n          >\n            {({ measureRef }) => (\n              <div className=\"SRC-flex\" ref={measureRef}>\n                {xData.map((obj: FacetColumnResultValueCount, index) => {\n                  const textColor: string = textColors[index]\n                  const rgbColor: string = colorPalette[index]\n                  let rectStyle: any\n                  const isValueSelected = isAllFilterSelectedForFacet![filter] ? true : getIsValueSelected({\n                    isLoading,\n                    lastFacetSelection,\n                    columnName: filter,\n                    curFacetSelection: obj\n                  })\n                  if (isValueSelected) {\n                    rectStyle = {\n                      fill: rgbColor\n                    }\n                  } else {\n                    rectStyle = {\n                      fill: '#C4C4C4'\n                    }\n                  }\n                  const svgHeight = 80\n                  const svgWidth = obj.count / total * width\n                  const style: any = {}\n                  if (chartSelectionIndex === index) {\n                    style.filter = 'drop-shadow(5px 5px 5px rgba(0,0,0,0.5))'\n                  }\n                  const label: string = `${filter}: ${obj.value}  - ${obj.count} ${unitDescription}`\n                  // there was one bug where a new line character was in the obj.value, making data-for\n                  // break because its a special character, below we remove that\n                  const tooltipId = obj.value.replace(/(\\r\\n|\\n|\\r)/gm, '')\n                  // basic heuristic to calculate the number of pixels needed to show the value on the bar chart\n                  const value = obj.count as number\n                  const numCharsInValue = value.toString().length * 4.5 // represents width of a character\n\n                  return (\n                    // each svg represents one of the bars\n                    // will need to change this to be responsive\n                    <React.Fragment key={label}>\n                      <span data-for={tooltipId} data-tip={label}>\n                        <svg\n                          className=\"SRC-hoverBox\"\n                          height={svgHeight + 15}\n                          width={svgWidth}\n                          style={style}\n                          onClick={this.handleClick({ ...obj, index })}\n                        >\n                          <rect\n                            onMouseEnter={this.handleHover}\n                            onMouseLeave={this.handleExit}\n                            height={svgHeight}\n                            width={svgWidth}\n                            className=\"SRC-chart-rect-style\"\n                            // can't remove inline style due to dynamic fill\n                            style={rectStyle}\n                          />\n                          {/* tslint:disable-next-line */}\n                          {index < 3 && svgWidth > numCharsInValue &&\n                            <text\n                              textAnchor=\"middle\"\n                              className=\"SRC-text-title\"\n                              fontFamily={'bold sans-serif'}\n                              fill={textColor}\n                              x={'50%'}\n                              y={'50%'}\n                            >\n                              {obj.count}\n                            </text>}\n                          {\n                            (chartSelectionIndex === index) &&\n                              (\n                                <text\n                                  fill={originalColor}\n                                  x={0}\n                                  y={svgHeight + 15}\n                                  className=\"SRC-text-shadow SRC-text-large\"\n                                >\n                                  {'\\u25BE'}\n                                </text>\n                              )\n                          }\n                        </svg>\n                      </span>\n                      <ReactTooltip delayShow={1000} id={tooltipId} />\n                    </React.Fragment>)\n                })}\n              </div>)}\n          </ReactMeasure>\n        </div>\n        <div className=\"SRC-bar-border SRC-bar-border-bottom\">\n          <p className=\"SRC-noMargin SRC-padding-chart SRC-text-title\">\n            <strong>{this.getTextForChartSelection(xData)}</strong>\n          </p>\n          <p id=\"fileCount\" className=\"SRC-noMargin SRC-padding-chart SRC-text-chart\">\n            {this.getFileCount(xData)} {unitDescription}\n          </p>\n          {\n            this.props.link &&\n              <div className=\"SRC-chart-link\">\n                <Link to={this.props.link}> { this.props.linkText } </Link>\n              </div>\n          }\n        </div>\n      </React.Fragment>\n    )\n  }\n  public extractPropsData(data: any) {\n    const xData: any[] = []\n    const { filter } = this.props\n    // pull out the data corresponding to the filter in question\n    data.facets.forEach(\n      (item: any) => {\n        if (item.facetType === 'enumeration' && item.columnName === filter) {\n          item.facetValues.forEach(\n            (facetValue: any) => {\n              if (item.columnName) {\n                xData.push({ columnName: item.columnName, ...facetValue })\n              }\n            }\n          )\n        }\n      }\n    )\n    // sort the data so that the largest bars are at the front\n    xData.sort((a, b) => {\n      return b.count - a.count\n    })\n    return xData\n  }\n\n  public onMeasureResize(contentRect: any) {\n    this.setState({ dimensions: contentRect })\n  }\n}\n","const sufixes: string [] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n\nexport default function calculateFriendlyFileSize(bytes: number) {\n  if (!bytes) {\n    return ''\n  }\n    // https://stackoverflow.com/questions/10420352/converting-file-size-in-bytes-to-human-readable-string\n  const i = Math.floor(Math.log(bytes) / Math.log(1024))\n  // tslint:disable-next-line\n  return (!bytes && '0 Bytes') || (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sufixes[i]\n}\n","import * as React from 'react'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faLongArrowAltUp, faLongArrowAltDown } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nlibrary.add(faLongArrowAltUp)\nlibrary.add(faLongArrowAltDown)\n\nconst getDesktopFormattedRows = (values: string [][]) => {\n  return values.map((kv, index) => {\n    if (kv[0].toUpperCase() === 'DOI') {\n      return (\n        <tr className=\"SRC-cardRowDesktop\" key={index}>\n          <td className={'SRC-verticalAlignTop SRC-row-label SRC-cardCell'}> {kv[0]} </td>\n          <td className=\"SRC-row-data SRC-limitMaxWidth SRC-cardCell\">\n            <a target=\"_blank\" rel=\"noopener noreferrer\"  href={`https://dx.doi.org/${kv[1]}`}>\n              {kv[1]}\n            </a>\n          </td>\n        </tr>\n      )\n    }\n    return (\n      <tr className=\"SRC-cardRowDesktop\" key={index}>\n        <td className={'SRC-verticalAlignTop SRC-row-label'}> {kv[0]} </td>\n        <td className=\"SRC-row-data SRC-limitMaxWidth\"> {kv[1]} </td>\n      </tr>\n    )\n  })\n}\n\nconst getMobileFormattedRows = (values: string [][]) => {\n  return values.map((kv, index) => {\n    if (kv[0].toUpperCase() === 'DOI') {\n      return (\n        <React.Fragment key={index}>\n          <tr className=\"SRC-cardRowMobile\">\n            <td className={'SRC-verticalAlignTop SRC-row-label'}> {kv[0]} </td>\n          </tr>\n          <tr className=\"SRC-cardRowMobile\">\n            <td className=\"SRC-row-data SRC-limitMaxWidth\">\n              <a target=\"_blank\" rel=\"noopener noreferrer\"  href={`https://dx.doi.org/${kv[1]}`}>\n                {kv[1]}\n              </a>\n            </td>\n          </tr>\n        </React.Fragment>\n      )\n    }\n    return (\n      <React.Fragment key={index}>\n        <tr className=\"SRC-cardRowMobile\">\n          <td className={'SRC-verticalAlignTop SRC-row-label'}> {kv[0]} </td>\n        </tr>\n        <tr className=\"SRC-cardRowMobile\">\n          <td className=\"SRC-row-data SRC-limitMaxWidth\"> {kv[1]} </td>\n        </tr>\n      </React.Fragment>\n    )\n  })\n}\n\ntype State = {\n  isShowMoreOn: boolean\n  isDesktop: boolean\n}\n\ntype CardFooterProps = {\n  values: any [],\n  secondaryLabelLimit?: number\n}\n\nclass CardFooter extends React.Component<CardFooterProps, State> {\n\n  constructor(props: CardFooterProps) {\n    super(props)\n    this.state = {\n      isShowMoreOn: false,\n      isDesktop: false\n    }\n    this.toggleShowMore = this.toggleShowMore.bind(this)\n    this.updatePredicate = this.updatePredicate.bind(this)\n  }\n\n  toggleShowMore() {\n    this.setState({\n      isShowMoreOn: !this.state.isShowMoreOn\n    })\n  }\n\n  componentDidMount() {\n    this.updatePredicate()\n    window.addEventListener('resize', this.updatePredicate)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updatePredicate)\n  }\n\n  updatePredicate() {\n    this.setState({ isDesktop: window.innerWidth > 600 })\n  }\n\n  render() {\n    const { values, secondaryLabelLimit = 3 } = this.props\n    const { isShowMoreOn, isDesktop } = this.state\n    let valuesFiltered = values.filter(el => el[1])\n    const hasMoreValuesThanLimit = valuesFiltered.length > secondaryLabelLimit\n    // don't slice if the number of values < limit or if they've clicked showMore\n    if (!hasMoreValuesThanLimit || isShowMoreOn) {\n      valuesFiltered = valuesFiltered.slice(0, Infinity)\n    } else {\n      valuesFiltered = valuesFiltered.slice(0, secondaryLabelLimit)\n    }\n    return (\n      <div className=\"SRC-cardMetadata\">\n        <table>\n          <tbody>\n            {isDesktop ? getDesktopFormattedRows(valuesFiltered) : getMobileFormattedRows(valuesFiltered)}\n            {\n              hasMoreValuesThanLimit &&\n                <tr className=\"SRC-cardRow\">\n                  <td>\n                  <button\n                    style={{ textAlign: 'left', margin: 0, padding: 0 }}\n                    className=\"SRC-primary-text-color SRC-basicButton\"\n                    onClick={this.toggleShowMore}\n                  >\n                    Show {isShowMoreOn ?  'Less' : 'More'}\n                    <FontAwesomeIcon\n                      style={{ marginLeft: '5px' }}\n                      icon={isShowMoreOn ? 'long-arrow-alt-up' : 'long-arrow-alt-down'}\n                    />\n                  </button>\n                  </td>\n                </tr>\n            }\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\nexport default CardFooter\n","import * as React from 'react'\n\ntype ChipContainerProps = {\n  chips: any []\n}\n\nconst ChipContainer: React.SFC<ChipContainerProps> = ({ chips }) => {\n  const chipsFormatted = chips.map((el, index) => {\n    if (!el) {\n      return false\n    }\n    return <span key={index}> {el}</span>\n  })\n  return (\n        <React.Fragment>\n            {chipsFormatted}\n        </React.Fragment>\n  )\n}\nexport default ChipContainer\n","import * as React from 'react'\nimport {\n  DATASET,\n  FUNDER,\n  PUBLICATION,\n  STUDY_ACTIVE,\n  STUDY_COMPLETE,\n  TOOL,\n  STUDY,\n  EXPERIMENTAL,\n  COMPUTATIONAL,\n  CLINICAL,\n  PROJECT\n} from '../../../utils/SynapseConstants'\n\nimport PublicationSvg from '../../../assets/icons/Publication.svg'\nimport Data2Svg from '../../../assets/icons/Data2.svg'\nimport studyActiveSvg from '../../../assets/icons/study-active.svg'\nimport studySvg from '../../../assets/icons/study.svg'\nimport studyCompleteSvg from '../../../assets/icons/study-complete.svg'\nimport DNA_TwoSvg from '../../../assets/icons/DNA_Two.svg'\nimport ToolClinicalSvg from '../../../assets/icons/ToolClinical.svg'\nimport ToolComputationalSvg from '../../../assets/icons/ToolComputational.svg'\nimport ToolExperimentalSvg from '../../../assets/icons/ToolExperimental.svg'\nimport projectSvg from '../../../assets/icons/project.svg'\n\nimport { KeyValue } from '../../../../lib/utils/modules/sqlFunctions'\n\ntype IconProps = {\n  type: string\n  iconOptions?: KeyValue\n  value?: string\n}\n\nconst defaultIcons = {\n  [PUBLICATION]: PublicationSvg,\n  [DATASET]: Data2Svg,\n  [FUNDER]: Data2Svg,\n  [STUDY_ACTIVE]: studyActiveSvg,\n  [STUDY_COMPLETE]: studyCompleteSvg,\n  [STUDY]: studySvg,\n  [TOOL]: DNA_TwoSvg,\n  [EXPERIMENTAL]: ToolExperimentalSvg,\n  [COMPUTATIONAL]: ToolComputationalSvg,\n  [CLINICAL]: ToolClinicalSvg,\n  [PROJECT]: projectSvg\n}\nconst Icon: React.FunctionComponent<IconProps> = ({ type, value = '', iconOptions }) => {\n  const iconSet = { ...defaultIcons, ...iconOptions }\n  // see if the value has a corresponding icon, e.g. 'Active' in a studies table\n  // or if the type of card has a corresponding icon, e.g. 'Publication'\n  const icon = iconSet[value] || iconSet[type]\n  // TODO: get rid of dataset icon class, none of the icons should be special cased\n  const datasetIconClass = (value === DATASET) || (type === DATASET) ? 'SRC-datasetIcon' : ''\n  return (<img className={`iconImg  ${datasetIconClass}`} src={icon} />)\n}\nexport default Icon\n","import * as React from 'react'\nconst CHAR_COUNT_CUTOFF = 400\n\ntype ShowMoreState = {\n  showMore: boolean\n}\n\ntype ShowMoreProps = {\n  onClick?: (val: any) => void\n  summary?: string\n}\n\nexport default class ShowMore extends React.Component<ShowMoreProps, ShowMoreState> {\n\n  constructor(props: ShowMoreProps) {\n    super(props)\n    this.state = {\n      showMore: false\n    }\n    this.toggleShowMore = this.toggleShowMore.bind(this)\n  }\n\n  public toggleShowMore(event: React.MouseEvent<HTMLAnchorElement>) {\n    event.preventDefault()\n    let { showMore } = this.state\n    showMore = !showMore\n    this.props.onClick!({\n      showMore\n    })\n    this.setState({\n      showMore\n    })\n  }\n\n  public render() {\n      // CHAR_COUNT_CUTOFF if show more is false and if its reasonably long enough\n    const { summary } = this.props\n    let summaryView = ''\n    const meetsCharRequirenent = summary && summary.length >= CHAR_COUNT_CUTOFF\n    if (!this.state.showMore && meetsCharRequirenent) {\n      const summarySplit = summary!.split(' ')\n            // find num words to join such that its >= char_count_cutoff\n      let i = 0\n      while (summaryView.length < CHAR_COUNT_CUTOFF) {\n        summaryView += `${summarySplit[i]} `\n        i += 1\n      }\n    } else if (!meetsCharRequirenent) {\n      summaryView = summary!\n    }\n    const showMoreButton =  (\n            meetsCharRequirenent &&\n           (\n            <a\n                style={{ fontSize: '14px', cursor: 'pointer' }}\n                className=\"SRC-primary-text-color\"\n                onClick={this.toggleShowMore}\n            >\n                ...Show More{' '}\n            </a>)\n        )\n    return (\n      <React.Fragment>\n        {!this.state.showMore && summaryView}\n        {this.state.showMore && summary}\n        {!this.state.showMore && showMoreButton}\n      </React.Fragment>\n    )\n  }\n}\n","import * as React from 'react'\nimport { DATASET } from '../../utils/SynapseConstants'\nimport calculateFriendlyFileSize from '../calculateFriendlyFileSize'\nimport * as Utils from './utils'\n\ntype DatasetProps = {\n  data?: any\n  schema?: any\n  secondaryLabelLimit?:number\n}\n\nclass Dataset extends React.Component<DatasetProps, {}> {\n\n  constructor(props: DatasetProps) {\n    super(props)\n    this.handleLinkClick = this.handleLinkClick.bind(this)\n  }\n\n  public handleLinkClick = (link: string) => (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    window.open(`https://www.synapse.org/#!Synapse:${link}`, '_blank')\n  }\n\n  public render() {\n    const { data, schema } = this.props\n    const datasetName = data[schema.datasetName]\n    const summary = data[schema.summary]\n    const tumorType = data[schema.tumorType]\n    const diseaseFocus = data[schema.diseaseFocus]\n    const id = data[schema.id]\n    const fundingAgency = data[schema.fundingAgency]\n    const fileCount = data[schema.fileCount]\n    const fileSize = calculateFriendlyFileSize(data[schema.fileSize])\n    const values = [['FUNDER', fundingAgency], ['SIZE', fileSize], ['FILES', fileCount]]\n    return (\n      <div className=\"SRC-portalCard SRC-typeDataset  \">\n        <div className=\"SRC-cardThumbnail\">\n          <Utils.Icon type={DATASET} />\n          <div>{fileSize}</div>\n        </div>\n        <div className=\"SRC-cardContent SRC-dataset\">\n          <div className=\"SRC-type\">Dataset </div>\n          <div className=\"SRC-title\">\n            <h3>\n              <a target=\"_self\" href={`https://www.synapse.org/#!Synapse:${id}`}>\n                {datasetName}\n              </a>\n            </h3>\n          </div>\n          <div className=\"SRC-description-dataset\">\n            <p className=\"SRC-description-text\">\n              {summary}\n            </p>\n            <div className=\"SRC-cardAction\">\n              <button className=\"SRC-datasetButton\" onClick={this.handleLinkClick(id)} type=\"button\">\n                Download Dataset\n              </button>\n            </div>\n          </div>\n          <div className=\"SRC-cardAnnotations\">\n            <Utils.ChipContainer chips={[tumorType, diseaseFocus]} />\n          </div>\n        </div>\n        <Utils.CardFooter secondaryLabelLimit={this.props.secondaryLabelLimit} values={values} />\n      </div>\n    )\n  }\n}\nexport default Dataset\n","import * as React from 'react'\n\nimport ctfSvg from '../../assets/logos/ctf.svg'\nimport dhartSvg from '../../assets/logos/dhart.svg'\nimport ntapSvg from  '../../assets/logos/ntap.svg'\n\nconst logoLinks = {\n  CTF: ctfSvg,\n  'DHART SPORE':dhartSvg,\n  NTAP: ntapSvg\n}\n\ntype FunderProps = {\n  data?: any\n  schema?: any\n}\n\nexport default class Funder extends React.Component<FunderProps, {}> {\n  constructor(props: FunderProps) {\n    super(props)\n    this.handleLinkClick = this.handleLinkClick.bind(this)\n  }\n  public handleLinkClick = (link: string) => (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    window.open(link, '_blank')\n  }\n  public render() {\n    const { data, schema } = this.props\n    const organizationName = data[schema.organizationName]\n    const organizationPath = data[schema.organizationPath]\n    const summary = data[schema.summary]\n    const website = data[schema.website]\n    const abbreviation = data[schema.abbreviation]\n    const logo = logoLinks[abbreviation]\n    const orgPath = `${window.location.origin}/#${organizationPath}`\n    // remove leading http(s):// and trailing /\n    let websiteDisplayName = website.replace('https://', '')\n    websiteDisplayName = websiteDisplayName.replace('http://', '')\n    if (websiteDisplayName.charAt(websiteDisplayName.length - 1) === '/') {\n      websiteDisplayName = websiteDisplayName.substring(0, websiteDisplayName.length - 1)\n    }\n    const isOnOrgPath = window.location.hash.substring(1) === organizationPath\n    const style: any = {}\n    let showOrgLink\n    if (!isOnOrgPath) {\n      showOrgLink = (\n        <div className=\"SRC-marginAuto SRC-cardAction\">\n          <button onClick={this.handleLinkClick(orgPath)} type=\"button\">\n            View Funded Research\n          </button>\n        </div>\n        )\n    } else {\n      style.paddingBottom = '42px'\n    }\n    return (\n        <div className=\"SRC-portalCard SRC-typeFunder \" style={style}>\n            <div className=\"SRC-cardContent\">\n                <div className=\"SRC-type\">Organization</div>\n                <div className=\"SRC-cardThumbnail\">\n                    <img alt=\"funder logo\" className=\"SRC-logo\" src={logo} />\n                </div>\n                <div className=\"SRC-title\">\n                    <h3>\n                        {isOnOrgPath && organizationName}\n                        {!isOnOrgPath && <a href={orgPath}>{organizationName}</a>}\n                    </h3>\n                </div>\n                <div className=\"SRC-website\">\n                    <a rel=\"noopener noreferrer\" target=\"_blank\" href={website}>\n                        {websiteDisplayName}\n                    </a>\n                </div>\n                <div className=\"SRC-description\">{summary}</div>\n            </div>\n            {showOrgLink}\n        </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { PUBLICATION } from '../../utils/SynapseConstants'\nimport * as Utils from './utils'\n\ntype PublicationState = {\n  showMore: boolean\n}\n\ntype PublicationProps = {\n  data?: any\n  schema?: any\n  secondaryLabelLimit?:number\n}\n\nclass Publication extends React.Component<PublicationProps, PublicationState> {\n\n  constructor(props: PublicationProps) {\n    super(props)\n    this.state = {\n      showMore: false\n    }\n  }\n\n  public render() {\n    const { data, schema } = this.props\n    const citation = data[schema.citation]\n    const tumorType = data[schema.tumorType]\n    const diseaseFocus = data[schema.diseaseFocus]\n    const doi = data[schema.doi]\n    const fundingAgency = data[schema.fundingAgency]\n    const projectName = data[schema.projectName]\n    const values = [['DOI', doi], ['FUNDER', fundingAgency], ['STUDY', projectName]]\n    return (\n      <div className=\"SRC-portalCard SRC-typePublication  \">\n          <div className=\"SRC-cardThumbnail\">\n              <Utils.Icon type={PUBLICATION} />\n          </div>\n          <div className=\"SRC-cardContent\">\n              <div className=\"SRC-type\">Publication</div>\n              <div className=\"SRC-title\">\n                  <h3>\n                      <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://dx.doi.org/${doi}`}>\n                          {citation}\n                      </a>\n                  </h3>\n              </div>\n              <div className=\"SRC-cardAnnotations\">\n                  <Utils.ChipContainer chips={[tumorType, diseaseFocus]} />\n              </div>\n          </div>\n          <Utils.CardFooter secondaryLabelLimit={this.props.secondaryLabelLimit} values={values} />\n      </div>\n    )\n  }\n}\nexport default Publication\n","import * as React from 'react'\nimport { STUDY_ACTIVE, STUDY_COMPLETE } from '../../utils/SynapseConstants'\nimport * as Utils from './utils/index'\n\ntype StudyState = {\n  showMore: boolean\n  hasCreatedIndex: boolean\n}\n\ntype StudyProps = {\n  data?: any\n  schema?: any\n  secondaryLabelLimit?:number\n}\n\nexport default class Study extends React.Component<StudyProps, StudyState> {\n\n  constructor(props: StudyProps) {\n    super(props)\n    this.state = {\n      hasCreatedIndex: false,\n      showMore: false\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  public handleClick(_event: React.SyntheticEvent) {\n    this.setState({\n      showMore: !this.state.showMore\n    })\n  }\n\n  public render() {\n    const { data, schema } = this.props\n    const projectName: string = data[schema.projectName]\n    const projectLeads: string = data[schema.projectLeads] && data[schema.projectLeads].split(';').join(' / ')\n    const summary: string = data[schema.summary]\n    const diseaseFocus: string = data[schema.diseaseFocus]\n    const tumorType: string = data[schema.tumorType]\n    const projectStatus: string = data[schema.projectStatus]\n    const fundingAgency: string = data[schema.fundingAgency]\n    const dataStatus: string = data[schema.dataStatus]\n    const id: string = data[schema.id]\n    const link: string = `https://www.synapse.org/#!Synapse:${id}`\n    const values: string [][] = [\n      ['STATUS', projectStatus],\n      ['FUNDER', fundingAgency],\n      ['DATA', dataStatus]\n    ]\n    const chips: string [] = [tumorType, diseaseFocus]\n    return (\n      <div className=\"SRC-portalCard SRC-typeStudy  \">\n          <div className=\"SRC-cardThumbnail\">\n              <Utils.Icon type={projectStatus === 'Active' ? STUDY_ACTIVE : STUDY_COMPLETE}/>\n              <div>{projectStatus}</div>\n          </div>\n          <div className=\"SRC-cardContent\">\n              <div className=\"SRC-type\">Study</div>\n              <div className=\"SRC-title\">\n                  {' '}\n                  <h3>\n                      {' '}\n                      <a target=\"_self\" href={link}>\n                          {projectName}\n                      </a>{' '}\n                  </h3>{' '}\n              </div>\n              <div className=\"SRC-author\">{projectLeads}</div>\n              <span className=\"SRC-font-size-base\">\n                  <Utils.ShowMore onClick={this.handleClick} summary={summary} />\n              </span>\n              <div className=\"SRC-cardAnnotations\">\n                  <Utils.ChipContainer chips={chips} />\n              </div>\n          </div>\n          <Utils.CardFooter secondaryLabelLimit={this.props.secondaryLabelLimit} values={values} />\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { TOOL } from '../../utils/SynapseConstants'\nimport * as Utils from './utils'\n\ntype ToolProps = {\n  data?: any\n  schema?: any\n}\n\nexport default class Tool extends React.Component<ToolProps, {}> {\n\n  constructor(props: ToolProps) {\n    super(props)\n    this.handleLinkClick = this.handleLinkClick.bind(this)\n  }\n\n  public handleLinkClick = (link: string) => (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    window.open(link, '_blank')\n  }\n\n  public render() {\n    const { data, schema } = this.props\n    const softwareName = data[schema.softwareName]\n    const summary = data[schema.summary]\n    const softwareLink = data[schema.softwareLink]\n    return (\n            <div className=\"SRC-portalCard SRC-typeTool  \">\n                <div className=\"SRC-cardThumbnail\">\n                    <Utils.Icon type={TOOL} />\n                </div>\n                <div className=\"SRC-cardContent\">\n                    <div className=\"SRC-type\">Tool</div>\n                    <div className=\"SRC-title\">\n                        <h3>\n                            <a href={softwareLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                                {softwareName}\n                            </a>\n                        </h3>\n                    </div>\n                    <div className=\"SRC-description\">{summary}</div>\n                </div>\n                <div className=\"SRC-cardAction\">\n                    <button onClick={this.handleLinkClick(softwareLink)} type=\"button\">\n                        Open Tool\n                    </button>\n                </div>\n            </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport * as Utils from '../utils'\nimport projectSvg from '../../../assets/icons/project.svg'\n\ntype ProjectState = {\n  showMore: boolean\n  hasCreatedIndex: boolean\n}\n\ntype ProjectProps = {\n  data?: any\n  schema?: any\n  secondaryLabelLimit?: number\n}\n\nexport default class Project extends React.Component<ProjectProps, ProjectState> {\n\n  constructor(props: ProjectProps) {\n    super(props)\n    this.state = {\n      hasCreatedIndex: false,\n      showMore: false,\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  public handleClick(_event: React.SyntheticEvent) {\n    this.setState({\n      showMore: !this.state.showMore\n    })\n  }\n\n  public render() {\n    const { data, schema } = this.props\n\n    const abstract = data[schema.summary]\n        // const consortium = data[schema.Consortium]\n    const grantNumber = data[schema.grantNumber]\n    const investigators = data[schema.keyInvestigators]\n    const link = `https://www.synapse.org/#!Synapse:${data[schema.id]}`\n    const name = data[schema.name]\n    const subtitle = `${data[schema.grantType]} | ${data[schema.institution]}`\n    const consortium = data[schema.consortium]\n    const values: string[][] = [[]]\n    if (grantNumber) {\n      values.push(['GRANT', grantNumber])\n    }\n    if (investigators) {\n      values.push(['INVESTIGATORS', investigators])\n    }\n    if (consortium) {\n      values.push(['PROGRAM', consortium])\n    }\n\n    return (\n      <div className=\"SRC-portalCard SRC-typeStudy  \">\n        <div className=\"SRC-cardThumbnail\">\n          <img className=\"iconImg\" alt=\"\" src={projectSvg}/>\n        </div>\n        <div className=\"SRC-cardContent\">\n            <div className=\"SRC-type\">Project</div>\n            <div className=\"SRC-title\">\n              <h3>\n                <a className=\"SRC-primary-text-color\" target=\"_self\" href={link}>\n                  {name}\n                </a>\n              </h3>\n            </div>\n            <div className=\"SRC-author\">{subtitle}</div>\n            <span className=\"SRC-font-size-base\">\n                <Utils.ShowMore onClick={this.handleClick} summary={abstract} />\n            </span>\n        </div>\n        <Utils.CardFooter secondaryLabelLimit={this.props.secondaryLabelLimit} values={values} />\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport ampIconHeaderSvg from '../../../assets/icons/AMP_AD/consortia-icons/amp-icon-header.svg'\nimport ampIconSvg from '../../../assets/icons/AMP_AD/consortia-icons/amp-icon.svg'\nimport moveIconHeaderSvg from '../../../assets/icons/AMP_AD/consortia-icons/move-icon-header.svg'\nimport moveIconSvg from '../../../assets/icons/AMP_AD/consortia-icons/move-icon.svg'\nimport ModelADIconHeaderSvg from '../../../assets/icons/AMP_AD/consortia-icons/ModelAD-icon-header.svg'\nimport ModelADIconSvg from '../../../assets/icons/AMP_AD/consortia-icons/ModelAD-icon.svg'\nimport resilienceIconHeaderSvg from '../../../assets/icons/AMP_AD/consortia-icons/resilience-icon-header.svg'\nimport resilienceIconSvg from '../../../assets/icons/AMP_AD/consortia-icons/resilience-icon.svg'\n\ntype ConsortiumState = {\n  showMore: boolean\n}\n\ntype ConsortiumProps = {\n  isHeader?: boolean\n  data?: any\n  schema?: any\n  secondaryLabelLimit?: number\n}\n\nexport default class Consortium extends React.Component<ConsortiumProps, ConsortiumState> {\n\n  constructor(props: ConsortiumProps) {\n    super(props)\n    this.state = {\n      showMore: false\n    }\n    this.handleClick = this.handleClick.bind(this)\n    this.getIcon = this.getIcon.bind(this)\n  }\n\n  public handleClick(_event: React.SyntheticEvent) {\n    this.setState({\n      showMore: !this.state.showMore\n    })\n  }\n\n  public getIcon(org: string, isHeader: boolean) {\n    // This CAN NOT be refactored below -- dynamic imports are currently not supported\n    // in es6, so the code below already has static references to the files below\n    // even though its baked into if else clauses.\n    const ampIconDescription = \"amp-ad icon\"\n    const moveIconDescription = \"M2OVE icon\"\n    const modelIconDescription = \"Model icon\"\n    const resillienceIconDescription = \"Resillience icon\"\n    switch (org) {\n      case 'AMP-AD':\n        if (isHeader) {\n          return <img alt={ampIconDescription} src={ampIconHeaderSvg}/>\n        }\n        return <img alt={ampIconDescription} src={ampIconSvg}/>\n      case 'M2OVE-AD':\n        if (isHeader) {\n          return <img alt={moveIconDescription} src={moveIconHeaderSvg}/>\n        }\n        return <img alt={moveIconDescription} src={moveIconSvg}/>\n      case 'MODEL-AD':\n        if  (isHeader) {\n          return <img alt={modelIconDescription} src={ModelADIconHeaderSvg}/>\n        }\n        return <img alt={modelIconDescription} src={ModelADIconSvg}/>\n      case 'Resilience-AD':\n        if (isHeader) {\n          return <img alt={resillienceIconDescription} src={resilienceIconHeaderSvg}/>\n        }\n        return <img alt={resillienceIconDescription} src={resilienceIconSvg}/>\n      default:\n        return (false)\n    }\n  }\n\n  public render() {\n    const { data, schema } = this.props\n\n    const description = data[schema['Short Description']]\n    const name = data[schema['Full Name']]\n    const org = data[schema.Program]\n\n    const path = data[schema.Path]\n    const orgPath = `${window.location.origin}/#${path}`\n\n    const isOnOrgPath = window.location.hash.substring(1) === path\n\n    return (\n      <div\n          style={{ paddingBottom: '32px' }}\n          className=\"SRC-portalCard SRC-typeStudy  \"\n      >\n        <div className=\"SRC-cardThumbnail\">\n          {this.getIcon(org, isOnOrgPath)}\n        </div>\n        <div className=\"SRC-cardContent\">\n          <div className=\"SRC-type\">Program</div>\n          <div className=\"SRC-title\">\n            <h3>\n                {!isOnOrgPath && <a target=\"_blank\" rel=\"noopener noreferrer\" href={orgPath}> {name} </a>}\n                {isOnOrgPath && name}\n            </h3>\n          </div>\n          <span className=\"SRC-font-size-base\">\n              {description}\n          </span>\n        </div>\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { PUBLICATION } from '../../../utils/SynapseConstants'\nimport * as Utils from './../utils'\n\ntype CSBCPublicationState = {\n  showMore: boolean\n}\n\ntype CSBCPublicationProps = {\n  data?: any\n  schema?: any\n  secondaryLabelLimit?:number\n}\n\nclass CSBCPublication extends React.Component<CSBCPublicationProps, CSBCPublicationState> {\n\n  constructor(props: CSBCPublicationProps) {\n    super(props)\n    this.state = {\n      showMore: false\n    }\n  }\n\n  public render() {\n    const { data, schema } = this.props\n    const title = data[schema.Title]\n    const authors = data[schema.Authors]\n    const experimentalStrategy = data[schema.experimentalStrategy]\n    const doi = data[schema.doi]\n    const consortum = data[schema.Consortum]\n    const datasets = data[schema.datasets]\n    const journal = data[schema.Journal]\n    const year = data[schema['Publication Year']]\n    const grantType = data[schema.grantType]\n    const theme = data[schema.Theme]\n    const diseaseType = data[schema.diseaseType]\n    const studies = data[schema.studies]\n\n    const values = [\n      ['Journal', journal],\n      ['Publication Year', year],\n      ['Consortium', consortum],\n      ['Grant Type', grantType],\n      ['Theme', theme],\n      ['Disease', diseaseType],\n      ['Assay', experimentalStrategy],\n      ['datasets', datasets],\n      ['studies', studies]\n    ]\n    return (\n      <div className=\"SRC-portalCard SRC-typePublication  \">\n          <div className=\"SRC-cardThumbnail\">\n              <Utils.Icon type={PUBLICATION} />\n          </div>\n          <div className=\"SRC-cardContent\">\n              <div className=\"SRC-type\">Publication</div>\n              <div className=\"SRC-title\">\n                <h3 className=\"SRC-boldText SRC-blackText\" style={{ margin: 'none' }}>\n                  {\n                    doi &&\n                    (<a className=\"SRC-primary-text-color\" rel=\"noopener noreferrer\" target=\"_blank\" href={doi ? `https://dx.doi.org/${doi}` : undefined}>\n                      {title}\n                    </a>)\n                  }\n                  {\n                    !doi &&\n                    title\n                  }\n                </h3>\n              </div>\n              <p>\n                <i>\n                  {authors}\n                </i>\n              </p>\n          </div>\n          <Utils.CardFooter secondaryLabelLimit={this.props.secondaryLabelLimit} values={values} />\n      </div>\n    )\n  }\n}\nexport default CSBCPublication\n","import * as React from 'react'\nimport { STUDY } from '../../../utils/SynapseConstants'\nimport * as Utils from './../utils'\n\ntype CSBCPublicationState = {\n  showMore: boolean\n}\n\ntype CSBCPublicationProps = {\n  data?: any\n  schema?: any\n}\n\nclass CSBCPublication extends React.Component<CSBCPublicationProps, CSBCPublicationState> {\n\n  constructor(props: CSBCPublicationProps) {\n    super(props)\n    this.state = {\n      showMore: false,\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  public handleClick(_event: React.SyntheticEvent) {\n    this.setState({\n      showMore: !this.state.showMore\n    })\n  }\n\n  public render() {\n    const { data, schema } = this.props\n    const name = data[schema.name]\n    const assay = data[schema.experimentalStrategy]\n    const consortium = data[schema.consortium]\n    const diseaseType = data[schema.tumorType]\n    const centerName = data[schema.centerName]\n    const grantType = data[schema.grantType]\n    const theme = data[schema.Theme]\n    const id = data[schema.id]\n    const description = data[schema.description]\n\n    const values = [\n      ['Theme', theme],\n      ['Assay', assay],\n      ['Disease Type', diseaseType],\n      ['Grant Type', grantType],\n      ['Program', consortium],\n    ]\n\n    return (\n      <div className=\"SRC-portalCard SRC-typePublication  \">\n          <div className=\"SRC-cardThumbnail\">\n              <Utils.Icon type={STUDY} />\n          </div>\n          <div className=\"SRC-cardContent\">\n              <div className=\"SRC-type\"> Study </div>\n              <div className=\"SRC-title\">\n                <h3 className=\"SRC-boldText SRC-blackText\" style={{ margin: 'none' }}>\n                  {\n                    id &&\n                    (<a className=\"SRC-primary-text-color\" target=\"_self\" href={id ? `https://www.synapse.org/#!Synapse:${id}` : undefined}>\n                      {name}\n                    </a>)\n                  }\n                  {\n                    !id &&\n                    name\n                  }\n                </h3>\n              </div>\n              <div className=\"SRC-author\"> {centerName} </div>\n              <span className=\"SRC-font-size-base\">\n                {description}\n              </span>\n          </div>\n          <Utils.CardFooter  values={values} />\n      </div>\n    )\n  }\n}\nexport default CSBCPublication\n","import * as React from 'react'\nimport { DATASET } from '../../../utils/SynapseConstants'\nimport calculateFriendlyFileSize from '../../calculateFriendlyFileSize'\nimport * as Utils from '../utils'\n\ntype DatasetProps = {\n  data?: any\n  schema?: any\n  secondaryLabelLimit?: number\n}\n\nclass CSBCDataset extends React.Component<DatasetProps, {}> {\n\n  public render() {\n    const { data, schema } = this.props\n    const name = data[schema.name]\n    const assay = data[schema.experimentalStrategy]\n    const consortium = data[schema.consortium]\n    const platform = data[schema.platform]\n    const diseaseType = data[schema.tumorType]\n    const centerName = data[schema.centerName]\n    const grantType = data[schema.grantType]\n    const theme = data[schema.Theme]\n    const id = data[schema.id]\n    const summary = data[schema.summary]\n    const species = data[schema.species]\n    const fileSize = calculateFriendlyFileSize(data[schema.fileSize])\n    const values = [\n      ['Disease Type', diseaseType],\n      ['Assay', assay],\n      ['Platform', platform],\n      ['Theme', theme],\n      ['Species', species],\n      ['Program', consortium],\n      ['Grant Type', grantType],\n      ['Grant', centerName]\n    ]\n    return (\n      <div className=\"SRC-portalCard  \">\n        <div className=\"SRC-cardThumbnail\">\n          <Utils.Icon type={DATASET} />\n          <div>{fileSize}</div>\n        </div>\n        <div className=\"SRC-cardContent\">\n          <div className=\"SRC-type\">Dataset </div>\n          <div className=\"SRC-title\">\n            <h3>\n              <a target=\"_self\" href={`https://www.synapse.org/#!Synapse:${id}`}>\n                {name}\n              </a>\n            </h3>\n          </div>\n          <div className=\"SRC-downloadData SRC-floatRight\">\n            <a className=\"download\" href={`https://www.synapse.org/#!Synapse:${id}`}>\n              Download Dataset\n            </a>\n          </div>\n          <div className=\"SRC-description\"> {summary} </div>\n        </div>\n        <Utils.CardFooter secondaryLabelLimit={this.props.secondaryLabelLimit} values={values} />\n      </div>\n    )\n  }\n}\nexport default CSBCDataset\n","import * as React from 'react'\nimport { CardFooter, Icon } from './row_renderers/utils'\n\nexport type IconOptions = {\n  [index: string]: string\n}\nexport type HeaderCardProps = {\n  iconOptions?: IconOptions\n  backgroundColor?: string\n  type: string\n  title: string\n  subTitle: string\n  description: string\n  iconValue: string\n  secondaryLabelLimit?: number\n  values?: string [][]\n}\n\nconst HeaderCard:React.FunctionComponent<HeaderCardProps> = ({\n  type,\n  title,\n  subTitle,\n  description,\n  iconOptions,\n  iconValue,\n  backgroundColor,\n  values,\n  secondaryLabelLimit\n}) => {\n  const style: React.CSSProperties = {\n    background: backgroundColor,\n  }\n  return (\n    <div\n      style={style}\n      className={'SRC-portalCardHeader'}\n    >\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md-1 iconContainer\">\n            <Icon value={iconValue} iconOptions={iconOptions} type={type} />\n          </div>\n          <div className=\"SRC-cardContent col-md-10\">\n            <div className=\"SRC-type\">{type}</div>\n            <div className=\"SRC-title\">\n              <h3 className=\"SRC-boldText SRC-blackText\" style={{ margin: 'none' }}>\n                {title}\n              </h3>\n            </div>\n            {subTitle && <div className=\"SRC-author\"> {subTitle} </div>}\n            <span className=\"SRC-font-size-base\">\n              {description}\n            </span>\n            <div style={{ borderTop: '1px solid rgba(26, 28, 41, 0.2)', marginTop: '15px', paddingTop: '5px' }}>\n              {values && <CardFooter secondaryLabelLimit={secondaryLabelLimit} values={values}/>}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default HeaderCard\n","import * as React from 'react'\nimport HeaderCard from './HeaderCard'\nimport { CardFooter, ShowMore, Icon } from './row_renderers/utils'\nimport { InternalLinkConfiguration } from './CardContainerLogic'\n\nexport type KeyToAlias = {\n  key: string\n  alias?: string\n}\n\nexport type KeyToAliasMap = {\n  [index: number]: KeyToAlias\n  [index: string]: KeyToAlias\n}\n\nexport type GenericCardSchema = {\n  type: string\n  title: string\n  subTitle?: string\n  description?: string\n  icon?: string\n  secondaryLabels?: KeyToAliasMap\n  link?: string\n}\n\nexport type IconOptions = {\n  [index: string]: string\n}\nexport type GenericCardProps = {\n  iconOptions?: IconOptions\n  backgroundColor?: string\n  isHeader?: boolean\n  genericCardSchema: GenericCardSchema,\n  schema: any,\n  data: any\n  secondaryLabelLimit?: number\n  hasInternalLink?: boolean\n  internalLinkConfiguration?: InternalLinkConfiguration\n}\n\nexport type GenericCardState = {\n  showMoreDescription: boolean\n}\n\n// doi regex here - https://www.crossref.org/blog/dois-and-matching-regular-expressions/\n// note - had to add an escape character for the second slash in the regex above\nconst DOI_REGEX = /^10.\\d{4,9}\\/[-._;()/:a-z0-9]+$/\n// check for 'syn' followed and ended by a digit of unlimited length\nconst SYNAPSE_REGX = /syn\\d+$/\n\nexport default class GenericCard extends React.Component<GenericCardProps, GenericCardState> {\n\n  constructor(props: GenericCardProps) {\n    super(props)\n    this.state = {\n      showMoreDescription: false,\n    }\n  }\n\n  public toggleShowMoreDescription = (_event: React.SyntheticEvent) => {\n    this.setState({\n      showMoreDescription: !this.state.showMoreDescription\n    })\n  }\n\n  public getLink (link: string, internalLinkConfiguration?: InternalLinkConfiguration, data?: string [], schema?: any) {\n    let linkDisplay = link\n    let target = '_self'\n    if (link.match(SYNAPSE_REGX)) {\n      // its a synId\n      linkDisplay = `https://www.synapse.org/#!Synapse:${link}`\n    } else if (link.match(DOI_REGEX)) {\n      target = '_blank'\n      linkDisplay = `https://dx.doi.org/${link}`\n    } else if (!internalLinkConfiguration) {\n      target = '_blank'\n    } else if (internalLinkConfiguration) {\n      if (!data || !schema) {\n        throw Error('Must specify internalLinkConfiguration and data for linking to work')\n      }\n      const columnValuesLength = internalLinkConfiguration.columnValues.length\n      const urlParams = internalLinkConfiguration.columnValues.map(\n        (el, index) => {\n          if (!schema.hasOwnProperty(el)) {\n            console.error(`Could not find match for data: ${data} with columnName ${el}`)\n          }\n          const stringEnd = index < columnValuesLength - 1 ? '&' : ''\n          return `${el}=${data[schema[el]]}${stringEnd}`\n        }\n      ).join('')\n      // tested this link on the browser, there's no need to encode the URL, the browser picks up on that automatically\n      linkDisplay = `#/${internalLinkConfiguration.baseURL}?${urlParams}`\n    }\n    return { linkDisplay, target }\n  }\n\n  render() {\n    const {\n      schema,\n      data,\n      genericCardSchema,\n      secondaryLabelLimit,\n      backgroundColor,\n      iconOptions,\n      isHeader = false,\n      internalLinkConfiguration\n    } = this.props\n    const { link = '' } = genericCardSchema\n    const type = genericCardSchema.type\n    const title = data[schema[genericCardSchema.title]]\n    const subTitle = genericCardSchema.subTitle && data[schema[genericCardSchema.subTitle]]\n    const description = data[schema[genericCardSchema.description || '']]\n    const iconValue = data[schema[genericCardSchema.icon || '']]\n    // wrap link in parens because undefined would throw an error\n    const linkValue: string = data[schema[link]] || ''\n    const { linkDisplay, target } = this.getLink(linkValue.toLowerCase(), internalLinkConfiguration, data, schema)\n    const values: string [][] = []\n    if (genericCardSchema.secondaryLabels) {\n      for (let i = 0; i < Object.keys(genericCardSchema.secondaryLabels).length; i += 1) {\n        if (!genericCardSchema.secondaryLabels[i]) {\n          throw Error(`Keys in genericCardSchema.secondaryLabels must be sequential, missing key: ${i}`)\n        }\n        const { key, alias = '' } =  genericCardSchema.secondaryLabels[i]\n        const displayValue = alias ? alias : key\n        const keyValue = [displayValue, data[schema[key]]]\n        values.push(keyValue)\n      }\n    }\n\n    const style: React.CSSProperties = {\n      background: backgroundColor,\n      // undefined, take default value from class\n      marginTop: isHeader ? '0px' : undefined,\n      marginBottom: isHeader ? '0px' : undefined\n    }\n    if (isHeader) {\n      return (\n        <HeaderCard\n          type={type}\n          title={title}\n          subTitle={subTitle}\n          backgroundColor={backgroundColor}\n          description={description}\n          iconValue={iconValue}\n          iconOptions={iconOptions}\n          values={values}\n          secondaryLabelLimit={secondaryLabelLimit}\n        />\n      )\n    }\n    return (\n      <div\n        style={style}\n        className={'SRC-portalCard'}\n      >\n        <div className=\"SRC-cardThumbnail\">\n          <Icon iconOptions={iconOptions} value={iconValue} type={type} />\n        </div>\n        <div className=\"SRC-cardContent\">\n          <div className=\"SRC-type\">{type}</div>\n          <div className=\"SRC-title\">\n            <h3 className=\"SRC-boldText SRC-blackText\" style={{ margin: 'none' }}>\n              {linkDisplay ?\n                <a className=\"SRC-primary-text-color\" target={target} href={linkDisplay}>\n                  {title}\n                </a>\n                :\n                title\n              }\n            </h3>\n          </div>\n          {subTitle && <div className=\"SRC-author\"> {subTitle} </div>}\n          {\n            description &&\n              <span className=\"SRC-font-size-base\">\n                <ShowMore onClick={this.toggleShowMoreDescription} summary={description} />\n              </span>\n          }\n        </div>\n        {genericCardSchema.secondaryLabels && <CardFooter secondaryLabelLimit={secondaryLabelLimit} values={values}/>}\n      </div>\n    )\n  }\n}\n","import { SynapseClient } from '../utils'\nimport { UserProfile } from '../utils/jsonResponses/UserProfile'\n\n/*\n  Utility functions for UserCards\n*/\n\nfunction getUserProfileWithProfilePicAttached(principalIds: string [], token?: string) {\n  return SynapseClient.getUserProfiles(principalIds).then(\n    (data) => {\n      // people will either have a profile pic file handle id\n      // or they won't. Have to break this down into two groups.\n      const withProfilePic = data.list.filter(\n        (value: any) => {\n          return value.profilePicureFileHandleId !== undefined\n        }\n      )\n      if (withProfilePic.length === 0) {\n        return data\n      }\n      const fileHandleAssociationList = withProfilePic.map(\n        (value) => {\n          return {\n            associateObjectId: value.ownerId,\n            associateObjectType: 'UserProfileAttachment',\n            fileHandleId: value.profilePicureFileHandleId\n          }\n        })\n      const request: any = {\n        includeFileHandles: false,\n        includePreSignedURLs: true,\n        includePreviewPreSignedURLs: false,\n        requestedFiles: fileHandleAssociationList\n      }\n      return SynapseClient.getFiles(request, token)\n        .then(\n          (fileHandleList) => {\n            // we retrieve all the persons with profile pic file handles\n            // so we next loop through them, find the original person in the data.list\n            // and add a field with their pre-signed url\n            fileHandleList.requestedFiles.forEach(\n              (fileHandle) => {\n                const matchingPersonIndex = data.list.findIndex(\n                  (el) => {\n                    return fileHandle.fileHandleId === el.profilePicureFileHandleId\n                  }\n                )\n                data.list[matchingPersonIndex].clientPreSignedURL = fileHandle.preSignedURL\n              })\n            return Promise.resolve(data)\n          })\n        .catch((err) => {\n          return err\n        })\n    })\n}\n\ntype UserProfileAndImg = {\n  userProfile: UserProfile\n  preSignedURL: string\n}\nfunction getUserProfileWithProfilePic(ownerId: string, token?: string): Promise<UserProfileAndImg> {\n  return SynapseClient.getUserProfileById(token, ownerId).then(\n    (userProfile: UserProfile) => {\n      // people will either have a profile pic file handle id\n      // or they won't. Have to break this down into two groups.\n      if (!userProfile.profilePicureFileHandleId) {\n        return Promise.resolve({ userProfile }) as any\n      }\n\n      const fileHandleAssociationList = [{\n        associateObjectId: ownerId,\n        associateObjectType: 'UserProfileAttachment',\n        fileHandleId: userProfile.profilePicureFileHandleId\n      }]\n\n      const request: any = {\n        includeFileHandles: false,\n        includePreSignedURLs: true,\n        includePreviewPreSignedURLs: false,\n        requestedFiles: fileHandleAssociationList\n      }\n\n      return SynapseClient.getFiles(request, token)\n        .then(\n          (fileHandleList) => {\n            // we retrieve all the persons with profile pic file handles\n            // so we next loop through them, find the original person in the data.list\n            // and add a field with their pre-signed url\n            const firstElement = fileHandleList.requestedFiles[0]\n            return Promise.resolve({\n              userProfile,\n              preSignedURL: firstElement.preSignedURL\n            })\n          })\n        .catch((err) => {\n          console.log({ err })\n        })\n    })\n}\n\nconst COLORS: string[] = [\n  'chocolate',\n  'black',\n  'firebrick',\n  'maroon',\n  'olive',\n  'green',\n  'forestgreen',\n  'darkturquoise',\n  'teal',\n  'blue',\n  'navy',\n  'darkmagenta',\n  'purple',\n  'blue',\n  'orangered',\n  'blueviolet'\n]\n\nconst hash = (userName: string) => {\n  const val = userName\n  .split('')\n  .reduce((prevHash, currVal) => (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0, 0)\n  return Math.abs(val)\n}\n\nconst getColor = (userName: string) => {\n  const hashedUserName = hash(userName)\n  return COLORS[hashedUserName % COLORS.length]\n}\n\nexport { getUserProfileWithProfilePicAttached, getColor, getUserProfileWithProfilePic }\nexport default { getUserProfileWithProfilePicAttached, getColor, getUserProfileWithProfilePic }\n","import * as React from 'react'\n// ignore because this is rollup requiring imports be named a certain way\n// tslint:disable-next-line\nimport ReactTooltip from \"react-tooltip\"\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCircle,  } from '@fortawesome/free-solid-svg-icons'\nimport { UserProfile } from '../utils/jsonResponses/UserProfile'\nimport { getColor } from './getUserData'\n\nlibrary.add(faCircle)\n\nexport type UserCardSmallProps = {\n  userProfile: UserProfile\n  preSignedURL?: string\n  hideText?: boolean\n  hideTooltip?: boolean\n  link?: string\n}\n\nexport const UserCardSmall: React.FunctionComponent<UserCardSmallProps> = (\n  { userProfile, hideText = false, hideTooltip = false, preSignedURL, link }\n) => {\n  const linkLocation = link ? link : `https://www.synapse.org/#!Profile:${userProfile.ownerId}`\n  let img\n  let marginLeft\n  let label = ''\n  if (!hideTooltip) {\n    if (userProfile.displayName) {\n      label += userProfile.displayName\n    } else if (userProfile.firstName && userProfile.lastName) {\n      label += (`${userProfile.firstName} ${userProfile.lastName}`)\n    }\n    if (userProfile.userName) {\n      label += ` (${userProfile.userName})`\n    }\n    if (userProfile.position) {\n      label += ` <br/>${userProfile.position}`\n    }\n    if (userProfile.location) {\n      label += ` <br/>${userProfile.location}`\n    }\n  }\n\n  if (preSignedURL) {\n    marginLeft = '3px'\n    img = (\n      <div\n        className=\"SRC-userImgSmall\"\n        style={{ backgroundImage: `url(${preSignedURL})` }}\n        data-for={label}\n        data-tip={label}\n      />\n    )\n  } else {\n    const color = getColor(userProfile.userName)\n    marginLeft = '3px'\n    img = (\n      <div style={{ background: color }} className=\"SRC-userImgSmall SRC-centerContentInline\">\n        {(userProfile.firstName && userProfile.firstName[0]) || userProfile.userName[0]}\n      </div>\n    )\n  }\n  return (\n    <a\n      href={linkLocation}\n      className=\"SRC-userCard SRC-primary-text-color SRC-no-underline-on-hover\"\n    >\n      {img}\n        <ReactTooltip delayShow={1000} id={label} multiline={true}/>\n        {!hideText && <span className=\"SRC-primary-text-color SRC-underline-on-hover\" style={{ marginLeft, whiteSpace: 'nowrap' }}>{`@${userProfile.userName}`}</span>}\n    </a>\n  )\n}\n","import * as React from 'react'\nimport { UserProfile } from '../utils/jsonResponses/UserProfile'\nimport { SEPERATOR } from '../utils/SynapseConstants'\n\nexport type MenuAction = {\n  field: string\n  callback?: (userProfile: UserProfile) => void\n}\n\nexport type UserCardContextMenuProps = {\n  userProfile : UserProfile\n  menuActions: MenuAction []\n}\n\nconst UserCardContextMenu:React.SFC<UserCardContextMenuProps> = (props: UserCardContextMenuProps) => {\n  const { menuActions = [], userProfile } = props\n  return (\n    <div className=\"dropdown open\">\n      <ul className=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownMenu1\">\n        {\n          menuActions.map(\n            (menuAction, index) => {\n              const callback = () => menuAction.callback!(userProfile)\n              if (menuAction.field === SEPERATOR) {\n                return <hr className=\"SRC-break\" key={menuAction.field + index}/>\n              }\n              return (\n                <li\n                  key={menuAction.field}\n                  style={{ listStyle: 'none' }}\n                  className=\"\n                    SRC-menu-item SRC-table-dropdown-list SRC-primary-background-color-hover SRC-nested-color\n                  \"\n                  onClick={callback}\n                  onKeyPress={callback}\n                >\n                  <a role=\"button\" tabIndex={0} className=\"SRC-menuAction\">\n                    {menuAction.field}\n                  </a>\n                </li>\n              )\n            }\n          )\n        }\n      </ul>\n    </div>\n  )\n}\n\nexport default UserCardContextMenu\n","import * as React from 'react'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCircle, faEllipsisV, faCopy } from '@fortawesome/free-solid-svg-icons'\nimport { UserProfile } from '../utils/jsonResponses/UserProfile'\n\nlibrary.add(faCircle)\nlibrary.add(faEllipsisV)\nlibrary.add(faCopy)\n\ntype UserCardLargeProps = {\n  userProfile: UserProfile\n}\n\n/**\n * UserCardLarge wraps around UserCardMedium\n *\n * @export UserCardLarge\n * @param {UserCardLargeProps} { userProfile }\n */\n// Disable function name because compiler has to know that its a class\n// tslint:disable-next-line:function-name\nexport function UserCardLarge({ userProfile }: UserCardLargeProps) {\n\n  const {\n    summary,\n    industry,\n    location,\n    url\n  } = userProfile\n\n  return (\n    <div className=\"SRC-cardMetaData\">\n      {\n        summary && (\n          <div>\n            <p className=\"SRC-card-metadata-title\"> Bio </p>\n            <p>\n              {summary}\n            </p>\n          </div>\n        )\n      }\n      {\n        url && (\n          <div>\n            <p className=\"SRC-card-metadata-title\"> More Info </p>\n            <p>\n              {url}\n            </p>\n          </div>\n        )\n      }\n      {\n        industry &&\n        <div>\n            <p className=\"SRC-card-metadata-title\"> Industry </p>\n            <p>\n              {industry}\n            </p>\n          </div>\n      }\n      {\n        location &&\n        <div>\n            <p className=\"SRC-card-metadata-title\"> Location </p>\n            <p>\n              {location}\n            </p>\n          </div>\n      }\n    </div>\n  )\n}\n","import * as React from 'react'\n\nconst svg = (\n  <svg width=\"12\" height=\"14\" viewBox=\"0 0 12 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      // tslint:disable-next-line:max-line-length\n      d=\"M10.7368 12.7273H3.78947V3.81818H10.7368V12.7273ZM10.7368 2.54545H3.78947C3.45446 2.54545 3.13317 2.67954 2.89629 2.91823C2.6594 3.15691 2.52632 3.48063 2.52632 3.81818V12.7273C2.52632 13.0648 2.6594 13.3885 2.89629 13.6272C3.13317 13.8659 3.45446 14 3.78947 14H10.7368C11.0719 14 11.3931 13.8659 11.63 13.6272C11.8669 13.3885 12 13.0648 12 12.7273V3.81818C12 3.48063 11.8669 3.15691 11.63 2.91823C11.3931 2.67954 11.0719 2.54545 10.7368 2.54545V2.54545ZM8.8421 0H1.26316C0.928148 0 0.606858 0.134091 0.36997 0.372773C0.133082 0.611456 0 0.935179 0 1.27273V10.1818H1.26316V1.27273H8.8421V0Z\"\n      fill=\"#DCDCDC\"\n    />\n  </svg>\n)\nexport default svg\n","import * as React from 'react'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCircle, faEllipsisV, faCopy } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { getColor } from './getUserData'\nimport { UserProfile } from '../utils/jsonResponses/UserProfile'\nimport UserCardContextMenu, { MenuAction } from './UserCardContextMenu'\nimport { UserCardLarge } from './UserCardLarge'\nimport IconCopy  from '../assets/icons/IconCopy'\n\nlibrary.add(faCircle)\nlibrary.add(faEllipsisV)\nlibrary.add(faCopy)\n\ntype UserCardState = {\n  showModal: boolean\n  isContextMenuOpen: boolean\n}\n\nexport type UserCardMediumProps = {\n  userProfile: UserProfile\n  menuActions?: MenuAction []\n  preSignedURL?: string\n  hideEmail?: boolean\n  isLarge?: boolean\n  link?: string\n  disableLink?: boolean\n}\n\nexport default class UserCardMedium extends React.Component<UserCardMediumProps, UserCardState> {\n\n  public htmlDivRef = React.createRef<HTMLDivElement>()\n\n  constructor(props: UserCardMediumProps) {\n    super(props)\n    this.state = {\n      showModal: false,\n      isContextMenuOpen: false\n    }\n  }\n\n  /**\n   * Function handles copying to clipboard the user's email address\n   *\n   * @param {string} value the email address of the user\n   * @returns\n   */\n  public copyToClipboard = (value: string) => (event: React.SyntheticEvent) => {\n    event.preventDefault()\n    // https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f\n    // this copies the email to the clipoard\n    const el = document.createElement('textarea')\n    el.value = value\n    el.setAttribute('readonly', '')\n    el.style.position = 'absolute'\n    el.style.left = '-9999px'\n    this.htmlDivRef.current!.appendChild(el)\n    el.select()\n    document.execCommand('copy')\n    this.htmlDivRef.current!.removeChild(el)\n    // show modal and hide after 4 seconds, the timing is per Material Design\n    this.setState({ showModal: true })\n    // hide after 4 seconds\n    setTimeout(\n      () => {\n        this.setState({ showModal: false })\n      },\n      4000\n    )\n  }\n\n  public toggleContextMenu = (_event: any) => {\n    this.setState({ isContextMenuOpen: !this.state.isContextMenuOpen })\n  }\n\n  public componentDidMount() {\n    // SWC-4778: https://stackoverflow.com/questions/23821768/how-to-listen-for-click-events-that-are-outside-of-a-component\n    window.addEventListener('mouseup', this.pageClick, false)\n  }\n\n  public componentWillUnmount() {\n    window.removeEventListener('mouseup', this.pageClick, false)\n  }\n\n  public pageClick = (_event: any) => {\n    if (!this.state.isContextMenuOpen) {\n      return\n    }\n    // hide content menu (deferred, to allow menu action to process)\n    setTimeout(\n      () => {\n        if (this.state.isContextMenuOpen) {\n          this.toggleContextMenu(_event)\n        }\n      },\n      10\n    )\n  }\n\n  render () {\n    const {\n      userProfile,\n      menuActions,\n      isLarge = false,\n      preSignedURL,\n      hideEmail = false,\n      disableLink = false,\n      link\n    } = this.props\n    const { isContextMenuOpen, showModal } = this.state\n    const {\n      displayName,\n      userName,\n      firstName,\n      lastName,\n      position,\n      company\n    } = userProfile\n    let img\n    let name = ''\n    const linkLocation = link ? link : `https://www.synapse.org/#!Profile:${userProfile.ownerId}`\n    // linkLocation is overriden by custom click handler\n    const email = `${userName}@synapse.org`\n    if (displayName) {\n      name = displayName\n    } else if (firstName && lastName) {\n      name = `${firstName} ${lastName}`\n    } else if (userName) {\n      name = userName\n    }\n    if (preSignedURL) {\n      img = (\n        <div\n          style={{ backgroundImage: `url(${preSignedURL})` }}\n          className=\"SRC-userImg\"\n        />\n      )\n    } else {\n      img = (\n        <div style={{ background: getColor(userName) }} className=\"SRC-userImg SRC-centerContentInline\">\n          {userProfile.firstName && (userProfile.firstName[0] || userProfile.userName[0])}\n        </div>\n      )\n    }\n    const mediumCard = (\n      <React.Fragment>\n        {\n          !hideEmail\n          &&\n          <TransitionGroup>\n          {\n            showModal\n            &&\n            <CSSTransition\n              key={email}\n              classNames=\"SRC-card\"\n              timeout={{ enter: 500, exit: 300 }}\n            >\n            <div key={email} className=\"SRC-modal\"> Email address copied to clipboard </div>\n            </CSSTransition>\n          }\n          </TransitionGroup>\n        }\n        {\n          disableLink\n          &&\n          img\n        }\n        {\n          !disableLink\n          &&\n          <a\n            href={linkLocation}\n            className={`SRC-no-underline-on-hover ${isLarge ? 'SRC-isLargeCard' : ''}`}\n          >\n            {img}\n          </a>\n        }\n        <div className=\"SRC-cardContent\">\n          <p className=\"SRC-eqHeightRow SRC-userCardName\">\n            {/*\n              if its a medium component the header should be clickable (unless disableLink is set),\n              if its large then it should NOT be clickable\n            */}\n            {/* make SRC-whiteText overridable with a good name! */}\n            {(isLarge || disableLink) ?\n              <span className={isLarge ? 'SRC-whiteText' :  'SRC-blackText'}> {name} </span>\n              :\n                // consolidate click events\n                <a\n                  href={linkLocation}\n                  tabIndex={0}\n                  className={'SRC-hand-cursor SRC-primary-text-color'}\n                >\n                  {name}\n                </a>}\n          </p>\n          {\n            (position || company) &&\n            <p className={`${isLarge ? 'SRC-whiteText' : ''}`}>\n              {position} {position ? ' / ' : ''} {company}\n            </p>\n          }\n          {\n            !hideEmail\n            &&\n            <p\n              className={`${isLarge ? 'SRC-whiteText' : 'SRC-primary-text-color SRC-primary-color-hover'}\n              SRC-hand-cursor SRC-eqHeightRow SRC-inlineFlex SRC-emailText SRC-cardSvg`}\n              onClick={this.copyToClipboard(email)}\n              onKeyPress={this.copyToClipboard(email)}\n              tabIndex={0}\n              ref={this.htmlDivRef}\n            >\n              <span style={{ paddingRight: '5px' }}>\n              {`${userName}@synapse.org`}\n              </span>\n              {IconCopy}\n            </p>\n          }\n        </div>\n        {/* conditionally render menu actions, if its not defined then we don't show the button */}\n        {\n          menuActions &&\n          <span\n            className={`SRC-extraPadding SRC-hand-cursor SRC-primary-background-color-hover SRC-inlineBlock\n            SRC-cardMenuButton ${isContextMenuOpen ? 'SRC-primary-background-color' : ''}`}\n            style={{ outline: 'none' }}\n            tabIndex={0}\n            onClick={this.toggleContextMenu}\n            onKeyPress={this.toggleContextMenu}\n          >\n            <FontAwesomeIcon\n              className={isContextMenuOpen || isLarge ? 'SRC-whiteText' : 'SRC-primary-text-color'}\n              icon=\"ellipsis-v\"\n              fixedWidth={true}\n            />\n            {\n              isContextMenuOpen\n              &&\n              <UserCardContextMenu menuActions={menuActions} userProfile={userProfile}/>\n            }\n          </span>\n        }\n        {\n          !menuActions &&\n          <span\n            style={{ padding: '0px 0px 0px 35px' }}\n          />\n        }\n      </React.Fragment>\n    )\n\n    if (!isLarge) {\n      return (\n        <div\n          style={{ border: '1px solid #DDDDDF' }}\n          className={`SRC-userCard SRC-userCardMediumUp ${isContextMenuOpen ? 'SRC-hand-cursor' : ''}`}\n          onClick={isContextMenuOpen ? this.toggleContextMenu : undefined}\n        >\n          {mediumCard}\n        </div>\n      )\n    }\n    // else return medium card inside large component\n    // when the component is large we have to set the click handler to wrap both the top and bottom portion\n    return (\n      <div\n        style={{ boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.25)' }}\n        className={isContextMenuOpen ? 'SRC-hand-cursor' : ''}\n        onClick={isContextMenuOpen ? this.toggleContextMenu : undefined}\n      >\n        <div className={`SRC-primary-background-color SRC-userCard SRC-userCardMediumUp ${isContextMenuOpen ? 'SRC-hand-cursor' : ''}`}>\n          {mediumCard}\n        </div>\n        {isLarge ? <UserCardLarge userProfile={userProfile}/> : false}\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { getUserProfileWithProfilePic } from './getUserData'\nimport { getPrincipalAliasRequest } from '../utils/SynapseClient'\nimport { MenuAction } from './UserCardContextMenu'\nimport { UserProfile } from '../utils/jsonResponses/UserProfile'\nimport { SynapseConstants } from '../utils/'\nimport { UserCardSmall } from './UserCardSmall'\nimport UserCardMedium from './UserCardMedium'\n\ntype UserCardState = {\n  userProfile: UserProfile | undefined\n  preSignedURL: string\n  isLoading: boolean\n}\n\nexport type UserCardProps = {\n  // Note - either specify userProfile OR (alias or ownerId)\n  userProfile?: UserProfile\n  loadingScreen?: JSX.Element\n  hideEmail?: boolean\n  preSignedURL?: string\n  alias?: string\n  ownerId?: string\n  size: string\n  hideText?: boolean\n  hideTooltip?: boolean\n  menuActions? : MenuAction[]\n  link?: string\n  disableLink?: boolean\n}\n\nexport default class UserCard extends React.Component<UserCardProps, UserCardState> {\n  constructor(props: any) {\n    super(props)\n    this.state = { userProfile: undefined, isLoading: true, preSignedURL: '' }\n    this.getUserProfile = this.getUserProfile.bind(this)\n  }\n\n  public componentDidMount() {\n    const { userProfile, ownerId, alias } = this.props\n    if (userProfile) {\n      return\n    }\n    if (alias) {\n      getPrincipalAliasRequest('', alias, 'USER_NAME')\n      .then(\n        (aliasData: any) => {\n          this.getUserProfile(aliasData.principalId!)\n        }\n      )\n    } else {\n      // check for ownerId!\n      this.getUserProfile(ownerId!)\n    }\n  }\n\n  public getUserProfile(ownerId: string) {\n    getUserProfileWithProfilePic(ownerId!, '')\n    .then(\n      (data) => {\n        const { userProfile, preSignedURL } = data\n        this.setState({ userProfile, preSignedURL, isLoading: false })\n      }\n    ).catch(\n      (err) => {\n        console.log('failed to get user bundle ', err)\n      }\n    )\n  }\n\n  public render() {\n    const { userProfile, loadingScreen = <span/>, preSignedURL, size, ...rest } = this.props\n    let userProfileAtRender\n    let preSignedURLAtRender\n    if (!userProfile) {\n      // userProfile wans't passed in from props\n      if (this.state.isLoading) {\n        // still making the API call\n        return loadingScreen\n      }\n      userProfileAtRender = this.state.userProfile\n      preSignedURLAtRender = this.state.preSignedURL\n    } else {\n      // otherwise we have the profile from props\n      userProfileAtRender = userProfile\n      preSignedURLAtRender = preSignedURL\n    }\n    const propsForChild = {\n      userProfile: userProfileAtRender!,\n      preSignedURL: preSignedURLAtRender,\n      ...rest\n    }\n    switch (size) {\n      case SynapseConstants.SMALL_USER_CARD:\n        return <UserCardSmall {...propsForChild}/>\n      case SynapseConstants.MEDIUM_USER_CARD:\n        return <UserCardMedium {...propsForChild}/>\n      case SynapseConstants.LARGE_USER_CARD:\n        return <UserCardMedium isLarge={true} {...propsForChild} />\n      default:\n        return <span/>\n    }\n  }\n}\n","import * as React from 'react'\nimport { UserProfile } from '../utils/jsonResponses/UserProfile'\nimport UserCard from './UserCard'\nimport { MEDIUM_USER_CARD } from '../utils/SynapseConstants'\nimport { getUserProfileWithProfilePicAttached } from './getUserData'\nimport { UserProfileList } from '../utils/SynapseClient'\nimport { QueryResultBundle } from '../utils/jsonResponses/Table/QueryResultBundle'\n\nexport type UserCardListProps = {\n  list: string []\n  size?: string\n  // Data should not be needed, however, it gives the option to fill in a user profile with other column\n  // fields. This is required specifically by AMP-AD Explore/People page\n  data?: QueryResultBundle\n}\n\ntype MapOwnerIdToUserProfile = {\n  [index: number]: UserProfile\n}\nexport type UserCardListState = {\n  userProfileMap: MapOwnerIdToUserProfile\n}\nexport default class UserCardList extends React.Component<UserCardListProps, UserCardListState> {\n\n  constructor(props: UserCardListProps) {\n    super(props)\n    this.state = {\n      userProfileMap: {}\n    }\n    this.update = this.update.bind(this)\n  }\n\n  componentDidMount() {\n    const { list } = this.props\n    this.update(list)\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#Implementing_basic_set_operations\n  difference(setA: Set<String>, setB: Set<String>) {\n    const _difference = new Set(setA)\n    for (const elem of Array.from(setB)) {\n      _difference.delete(elem)\n    }\n    return _difference\n  }\n\n  componentDidUpdate(prevProps: UserCardListProps) {\n    // Note - Set object not fully supported by IE11, additionally there are a few caveats to using the Set object\n    // described here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n    // the use below with primitives is well defined.\n    const priorListOfIds = new Set(prevProps.list)\n    const curListOfIds = new Set(this.props.list.filter(el => el))\n    // check that the props have changed by seeing that at least one element is different\n    if (this.difference(curListOfIds, priorListOfIds).size > 0) {\n      const internalData = new Set(Object.keys(this.state.userProfileMap))\n      // get the set difference between the current list and whats stored in state, describes what\n      // needs to get looked up.\n      const difference = Array.from(this.difference(curListOfIds, internalData)) as string []\n      if (difference.length > 0) {\n        this.update(difference)\n      }\n    }\n  }\n\n  update (list: string []) {\n    getUserProfileWithProfilePicAttached(list.filter(el => el)).then(\n      (data: UserProfileList) => {\n        const newEntries = {}\n        data.list.forEach(\n          (el) => {\n            const { ownerId } = el\n            newEntries[ownerId] = el\n          }\n        )\n        this.setState({\n          userProfileMap: { ...this.state.userProfileMap, ...newEntries }\n        })\n      }\n    ).catch(\n      (err: string) => {\n        console.log('Error on batch call =', err)\n      }\n    )\n  }\n\n  /**\n   * Given data this will find rows where there is no userId columnType and create faux user profiles\n   * using firstName, lastName, and instituion (company in UserProfile object).\n   * @param {QueryResultBundle} data\n   * @returns list of UserProfiles with firstName, lastName, company, userName (first letter of firstName) filled out.\n   * @memberof UserCardList\n   */\n  manuallyExtractData(data: QueryResultBundle) {\n    const firstNameIndex = data.queryResult.queryResults.headers.findIndex(el => el.name === 'firstName')\n    const lastNameIndex = data.queryResult.queryResults.headers.findIndex(el => el.name === 'lastName')\n    const institutionIndex = data.queryResult.queryResults.headers.findIndex(el => el.name === 'institution')\n    const ownerId = data.queryResult.queryResults.headers.findIndex(el => el.columnType === 'USERID')\n    const nullOwnerIdsRows = data.queryResult.queryResults.rows.filter(el => !el.values[ownerId])\n    return nullOwnerIdsRows.map<UserProfile>(\n      (el) => {\n        const values = el.values\n        return {\n          firstName: values[firstNameIndex],\n          lastName: values[lastNameIndex],\n          company: values[institutionIndex],\n          ownerId: '',\n          userName: values[firstNameIndex][0]\n        }\n      }\n    )\n  }\n\n  render() {\n    const { size = MEDIUM_USER_CARD, data, list } = this.props\n    const { userProfileMap = {} } = this.state\n    const fauxUserProfilesList = data && this.manuallyExtractData(data)\n    let fauxUserProfileIndex = 0\n    return (\n      <div className=\"SRC-card-grid-row SRC-adjust-for-bootstrap-margin\">\n        {\n          // we loop through the list from the props because thats the 'active set of data' whereas the data stored in state could be stale\n          list.map(\n            (ownerId) => {\n              const userProfile = userProfileMap[ownerId]\n              if (userProfile) {\n                return (\n                  <div key={JSON.stringify(userProfile)} className=\"SRC-grid-item SRC-narrow-grid-item\">\n                    <UserCard size={size} preSignedURL={userProfile.clientPreSignedURL} userProfile={userProfile}/>\n                  </div>\n                )\n              }\n              const fauxUserProfile = fauxUserProfilesList && fauxUserProfilesList[fauxUserProfileIndex]\n              if (!fauxUserProfile) {\n                // This could happen in one of two cases:\n                // - The props just updated with a new userlist where the data is being gathered for this particular user\n                //   OR there is no mapping for this user\n                return false\n              }\n              fauxUserProfileIndex += 1\n              return (\n                <div key={JSON.stringify(fauxUserProfile)} className=\"SRC-grid-item SRC-narrow-grid-item\">\n                  <UserCard\n                    disableLink={true}\n                    hideEmail={true}\n                    size={size}\n                    userProfile={fauxUserProfile}\n                  />\n                </div>\n              )\n            }\n          )\n        }\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { QueryBundleRequest } from '../utils/jsonResponses/Table/QueryBundleRequest'\nimport { QueryResultBundle } from '../utils/jsonResponses/Table/QueryResultBundle'\nimport {\n  AMP_CONSORTIUM,\n  DATASET,\n  FUNDER,\n  PUBLICATION,\n  STUDY,\n  TOOL,\n  CSBC_PROJECT,\n  CSBC_PUBLICATION,\n  CSBC_STUDY,\n  CSBC_DATASET,\n  GENERIC_CARD,\n  MEDIUM_USER_CARD\n} from '../utils/SynapseConstants'\nimport { Dataset, Funder, Publication, Study, Tool } from './row_renderers'\nimport { Consortium } from './row_renderers/AMPAD'\nimport CSBCProject from './row_renderers/CSBC/CSBCProject'\nimport CSBCPublication from './row_renderers/CSBC/CSBCPublication'\nimport CSBCStudy from './row_renderers/CSBC/CSBCStudy'\nimport CSBCDataset from './row_renderers/CSBC/CSBCDataset'\nimport GenericCard from './GenericCard'\nimport UserCardList from './UserCardList'\nimport { TotalQueryResults } from './TotalQueryResults'\nimport { CommonCardProps } from './CardContainerLogic'\n\nconst PAGE_SIZE: number = 25\n\nexport type CardContainerProps = {\n  data?: QueryResultBundle,\n  limit?: number,\n  isHeader?: boolean\n  getLastQueryRequest?: () => QueryBundleRequest\n  getNextPageOfData?: (queryRequest: QueryBundleRequest) => void\n  isLoading?: boolean\n  filter?: string\n  unitDescription?: string\n  totalResultsNoFacet?: number\n  hasMoreData?: boolean\n  loadingScreen?: React.FunctionComponent | JSX.Element\n  backgroundColor?: string\n  showBarChart?: boolean\n} & CommonCardProps\n\ntype CardContainerState = {\n  cardLimit: number\n}\n\nexport class CardContainer extends React.Component<CardContainerProps, CardContainerState> {\n\n  constructor(props: CardContainerProps) {\n    super(props)\n    this.handleViewMore = this.handleViewMore.bind(this)\n  }\n\n  /**\n   * Handle a click on next or previous\n   *\n   * @memberof SynapseTable\n   */\n  public handleViewMore() {\n    const queryRequest = this.props.getLastQueryRequest!()\n    let offset = queryRequest.query.offset!\n    // paginate forward\n    offset += PAGE_SIZE\n    queryRequest.query.offset = offset\n    this.props.getNextPageOfData!(queryRequest)\n  }\n\n  public renderCard = (props: any, type: string) => {\n    switch (type) {\n      case STUDY:\n        return <Study {...props} />\n      case DATASET:\n        return <Dataset {...props} />\n      case FUNDER:\n        return <Funder {...props} />\n      case PUBLICATION:\n        return <Publication {...props} />\n      case TOOL:\n        return <Tool {...props} />\n      case AMP_CONSORTIUM:\n        return <Consortium {...props} />\n      case CSBC_PROJECT:\n        return <CSBCProject {...props} />\n      case CSBC_PUBLICATION:\n        return <CSBCPublication {...props} />\n      case CSBC_STUDY:\n        return <CSBCStudy {...props} />\n      case CSBC_DATASET:\n        return <CSBCDataset {...props} />\n      case GENERIC_CARD:\n        return <GenericCard {...props} />\n      default:\n        return (<div />) // this should never happen\n    }\n  }\n  public render() {\n    const {\n      data,\n      limit = Infinity,\n      isHeader = false,\n      filter,\n      unitDescription,\n      type,\n      isLoading,\n      loadingScreen,\n      secondaryLabelLimit = 3,\n      genericCardSchema,\n      backgroundColor,\n      iconOptions,\n      internalLinkConfiguration,\n      showBarChart = true\n    } = this.props\n    // the cards only show the loading screen on initial load, this occurs when data is undefined\n    if (!data) {\n      return (\n        <div>\n         {isLoading && loadingScreen}\n        </div>\n      )\n    }\n    const schema = {}\n    data.queryResult.queryResults.headers.forEach(\n      (element, index) => {\n        schema[element.name] = index\n      })\n\n    // We want to hide the view more button if:\n    //     1. The data fed in has !== PAGE_SIZE number of results\n    //     2. The hasMoreData prop is false\n    //     3. The limit is set to less than PAGE_SIZE\n    // below we show the view more button by following the opposite logic from above.\n    let showViewMore: boolean = limit >= PAGE_SIZE && data.queryResult.queryResults.rows.length >= PAGE_SIZE\n    showViewMore = showViewMore && this.props.hasMoreData!\n\n    const showViewMoreButton = (\n      showViewMore\n      &&\n      (\n        <div>\n          <button\n            onClick={this.handleViewMore}\n            className=\"pull-right SRC-primary-background-color-hover SRC-next-color SRC-viewMoreButton\"\n          >\n            View More\n          </button>\n        </div>\n      )\n    )\n    let cards\n    if (type === MEDIUM_USER_CARD) {\n      // Hard coding ownerId as a column name containing the user profile ownerId\n      // for each row, grab the column with the ownerId\n      const userIdColumnIndex = data.queryResult.queryResults.headers.findIndex(\n        el => el.columnType === 'USERID'\n      )\n      if (userIdColumnIndex === -1) {\n        throw Error('Type MEDIUM_USER_CARD specified but no columnType USERID found')\n      }\n      const listIds = data.queryResult.queryResults.rows.map(el => el.values[userIdColumnIndex])\n      cards = <UserCardList data={data} list={listIds} size={MEDIUM_USER_CARD}/>\n    } else {\n      // render the cards\n      cards = data.queryResult.queryResults.rows.map(\n        (rowData: any, index) => {\n          if (index < limit) {\n            const key = JSON.stringify(rowData.values)\n            const propsForCard = {\n              key,\n              type,\n              internalLinkConfiguration,\n              schema,\n              isHeader,\n              genericCardSchema,\n              secondaryLabelLimit,\n              backgroundColor,\n              iconOptions,\n              data: rowData.values,\n            }\n            return this.renderCard(propsForCard, type)\n          }\n          return false\n        }\n      )\n    }\n\n    return (\n      <div>\n        {(unitDescription && showBarChart) &&\n          <TotalQueryResults\n            data={data}\n            filter={filter}\n            unitDescription={unitDescription!}\n            isLoading={isLoading!}\n          />\n        }\n        {/* ReactCSSTransitionGroup adds css fade in property for cards that come into view */}\n        {cards}\n        {showViewMoreButton}\n      </div>\n    )\n  }\n}\n\nexport default CardContainer\n","import { library } from '@fortawesome/fontawesome-svg-core'\nimport { faAngleLeft, faAngleRight } from '@fortawesome/free-solid-svg-icons'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport * as React from 'react'\nimport { SynapseConstants } from '../utils/'\nimport { getColorPallette } from './ColorGradient'\nimport { Facets } from './Facets'\nimport QueryCount from './QueryCount'\nimport QueryWrapper from './QueryWrapper'\nimport StackedBarChart from './StackedBarChart'\nimport SynapseTable, { SynapseTableProps } from './SynapseTable'\nimport CardContainer from './CardContainer'\nimport { CommonCardProps } from './CardContainerLogic'\nimport { StackedBarChartProps } from './StackedBarChart'\nimport { KeyValue } from '../utils/modules/sqlFunctions'\nimport { FacetColumnValuesRequest } from '../utils/jsonResponses/Table/FacetColumnRequest'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMinus, faPlus } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faAngleLeft)\nlibrary.add(faAngleRight)\nlibrary.add(faMinus)\nlibrary.add(faPlus)\n\ntype MenuState = {\n  activeMenuIndex: number\n  visibleAccordionIndex: number | undefined\n  lastAccordionIndexWithSelection: number,\n  hasClickedMenuItemOnce: boolean\n}\n\nexport type MenuConfig = {\n  sql: string\n  facetName: string\n  facetDisplayValue?: string\n  facetAliases?: {}\n}\n\ninterface MenuSearchParams extends KeyValue {\n  menuIndex: string\n  facetValue: string\n}\n\ntype CommonMenuProps = {\n  tableConfiguration?: SynapseTableProps\n  cardConfiguration?: CommonCardProps\n  stackedBarChartConfiguration?: StackedBarChartProps\n  showBarChart?: boolean\n}\n\ntype AccordionConfig = {\n  menuConfig: MenuConfig []\n  name: string\n} & CommonMenuProps\n\nexport type QueryWrapperMenuProps = {\n  menuConfig: MenuConfig []\n  accordionConfig?: AccordionConfig []\n  isConsistent?: boolean\n  token?: string\n  rgbIndex: number\n  unitDescription?: string\n  searchParams?: MenuSearchParams\n  name: string\n} & CommonMenuProps\n\ntype Info = {\n  isSelected: boolean\n  originalColor: string\n  hoverWhiteTextClass?: string\n}\n\nexport default class QueryWrapperMenu extends React.Component<QueryWrapperMenuProps, MenuState> {\n\n  constructor(props: QueryWrapperMenuProps) {\n    super(props)\n    // See note about initializing props from state here\n    //  - https://stackoverflow.com/questions/40063468/react-component-initialize-state-from-props/47341539#47341539\n    \n    const { searchParams } = this.props\n    const indexFromURLOrDefaultZero = (searchParams && Number(searchParams.menuIndex)) || 0\n    const activeMenuIndex = indexFromURLOrDefaultZero\n    this.state = {\n      activeMenuIndex,\n      visibleAccordionIndex: undefined,\n      lastAccordionIndexWithSelection: 0,\n      hasClickedMenuItemOnce: false\n    }\n    this.handleHoverLogic = this.handleHoverLogic.bind(this)\n    this.switchFacet = this.switchFacet.bind(this)\n  }\n\n  componentDidUpdate(prevProps: QueryWrapperMenuProps, _prevState: MenuState) {\n    /*\n      Update the row count or the menu index if the props changed by looking at whether the sql or the rgbIndex\n      changed\n    */\n    const { rgbIndex } = this.props\n    if (rgbIndex !== prevProps.rgbIndex) {\n      this.setState({\n        visibleAccordionIndex: undefined,\n        lastAccordionIndexWithSelection: 0,\n        activeMenuIndex: 0,\n        \n      })\n    }\n  }\n\n  /**\n   * Handle the user hovering over a facet selection, it must be programatically\n   * handled because the color used is dynamic\n   *\n   * @memberof Menu\n   */\n  public handleHoverLogic = (info: Info) => (event: React.MouseEvent<HTMLDivElement>) => {\n    if (!info.isSelected && event.currentTarget.tagName === 'DIV') {\n      event.currentTarget.style.backgroundColor = info.originalColor\n      if (info.hoverWhiteTextClass) {\n        event.currentTarget.classList.add(info.hoverWhiteTextClass)\n      } else {\n        event.currentTarget.classList.remove('SRC-hoverWhiteText')\n      }\n    }\n  }\n\n  /**\n   * Handle user clicking menu item, event isn't used so we denote it as an _\n   *\n   * @memberof Menu\n   */\n  public switchFacet = (menuIndexIn: number, accordionIndexIn: number) => (_: React.SyntheticEvent<HTMLDivElement>) => {\n    const { activeMenuIndex, lastAccordionIndexWithSelection } = this.state\n    // there's an odd bug where clicking a menu item twice will select the first tab,\n    // this is a fix for that, but this shouldn't be necessary\n    const isClickingCurrentSelection = lastAccordionIndexWithSelection === accordionIndexIn && activeMenuIndex === menuIndexIn\n    if (!isClickingCurrentSelection) {\n      this.setState({ activeMenuIndex: menuIndexIn, lastAccordionIndexWithSelection: accordionIndexIn })\n    }\n    if (!this.state.hasClickedMenuItemOnce) {\n      this.setState({\n        hasClickedMenuItemOnce: true\n      })\n    }\n  }\n\n  /**\n   * Handle user clicking menu item, event isn't used so we denote it as an _\n   *\n   * @memberof Menu\n   */\n  public toggleSelectionLevel = (accordionIndexIn: number) => (_: React.SyntheticEvent<HTMLDivElement>) => {\n    const { visibleAccordionIndex } = this.state\n    if (visibleAccordionIndex === accordionIndexIn) {\n      this.setState({\n        // all are closed in this case\n        visibleAccordionIndex: undefined\n      })\n    } else {\n      this.setState({\n        visibleAccordionIndex: accordionIndexIn\n      })\n    }\n  }\n\n  public render() {\n    const { stackedBarChartConfiguration, name, menuConfig, accordionConfig } = this.props\n    const { lastAccordionIndexWithSelection, activeMenuIndex } = this.state\n    let sql = ''\n    if (accordionConfig) { \n      sql = accordionConfig[lastAccordionIndexWithSelection].menuConfig[activeMenuIndex].sql\n    } else if (accordionConfig) {\n      sql = menuConfig[activeMenuIndex].sql\n    }\n    const menuDropdown = this.renderMenuDropdown()\n    const queryWrapper = this.renderQueryChildren()\n    const showBarChart = stackedBarChartConfiguration !== undefined\n    return (\n      <React.Fragment>\n        <h3 id=\"exploreCount\" className=\"SRC-boldText\">\n          <QueryCount token={this.props.token} name={name} sql={sql} />\n        </h3>\n        <div className=\"break\">\n          <hr/>\n        </div>\n        <div className={`col-xs-2 SRC-menuLayout ${showBarChart ? 'SRC-menuPadding' : 'SRC-menuPaddingLess'}`}>\n          {menuDropdown}\n        </div>\n        <div className=\"col-xs-10\">\n          {queryWrapper}\n        </div>\n      </React.Fragment>\n    )\n  }\n\n  private renderMenuConfig(menuConfig: MenuConfig [], queryConfig: CommonMenuProps)  {\n    const {\n      token,\n      rgbIndex = 0,\n      isConsistent = false,\n      unitDescription = '',\n      searchParams,\n    } = this.props\n\n    const {\n      cardConfiguration,\n      tableConfiguration,\n      stackedBarChartConfiguration,\n    } = queryConfig\n    \n    const { activeMenuIndex } = this.state\n\n    let facetValue = ''\n    let menuIndexFromProps = ''\n    if (searchParams) {\n      ({ facetValue = '', menuIndex: menuIndexFromProps } = searchParams)\n    }\n    const showBarChart = stackedBarChartConfiguration !== undefined\n    return menuConfig.map((config: MenuConfig, index: number) => {\n      const isSelected: boolean = activeMenuIndex === index\n      const {\n        facetName,\n        facetAliases,\n        sql,\n      } = config\n      let className = ''\n      if (!isSelected) {\n        className = 'SRC-hidden'\n      }\n      let selectedFacets: FacetColumnValuesRequest [] = []\n      if (Number(menuIndexFromProps) === index && facetName && facetValue) {\n        selectedFacets = [\n          {\n            concreteType: 'org.sagebionetworks.repo.model.table.FacetColumnValuesRequest',\n            facetValues: [facetValue],\n            columnName: facetName\n          }\n        ]\n      }\n      const loadNow = isSelected\n      return (\n        <span key={facetName} className={className}>\n          <QueryWrapper\n            showBarChart={showBarChart}\n            loadNow={loadNow}\n            showMenu={true}\n            initQueryRequest={{\n              concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n              partMask: SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n                SynapseConstants.BUNDLE_MASK_QUERY_FACETS |\n                SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n              query: {\n                sql,\n                selectedFacets,\n                isConsistent,\n                limit: 25,\n                offset: 0\n              }\n            }}\n            unitDescription={unitDescription}\n            facetName={facetName}\n            token={token}\n            rgbIndex={rgbIndex}\n            facetAliases={facetAliases}\n          >\n            {stackedBarChartConfiguration ? <StackedBarChart {...stackedBarChartConfiguration} /> : <React.Fragment/>}\n            <Facets />\n            {/*\n                Using a conditional render fails here because QueryWrapper can't clone an undefined element\n                which will happen if either configuration is undefined.\n            */}\n            {tableConfiguration ? <SynapseTable {...tableConfiguration}/> : <React.Fragment/>}\n            {cardConfiguration ? <CardContainer {...cardConfiguration}/> : <React.Fragment/>}\n          </QueryWrapper>\n        </span>\n      )\n    }\n    )\n  }\n\n  private renderQueryChildren() {\n    const {\n      accordionConfig,\n      menuConfig,\n    } = this.props\n    const {\n      lastAccordionIndexWithSelection,\n    } = this.state\n    if (accordionConfig) {\n      return accordionConfig.map(\n        (el, index) => {\n          return (\n            <div className={lastAccordionIndexWithSelection === index ? '' : 'SRC-hidden'}>\n              {this.renderMenuConfig(el.menuConfig, el)}\n            </div>\n          )\n        }\n      )\n    } else {\n      return this.renderMenuConfig(menuConfig, this.props)\n    }\n  }\n\n  private renderMenuDropdown() {\n    const { accordionConfig, menuConfig } = this.props\n    const { visibleAccordionIndex, lastAccordionIndexWithSelection, hasClickedMenuItemOnce } = this.state\n    const { rgbIndex } = this.props\n    const { colorPalette } = getColorPallette(rgbIndex, 5)\n    const lightColor = '#F5F5F5'\n    if (accordionConfig) {\n      return accordionConfig.map(\n        (el, index) => {\n          const doExpand = visibleAccordionIndex === index\n          const isLastActiveSelection = (lastAccordionIndexWithSelection === index) && hasClickedMenuItemOnce\n          const isActive = doExpand || isLastActiveSelection\n          const primaryColor = colorPalette[0]\n          let style: React.CSSProperties = {\n            background: isActive ? primaryColor : lightColor,\n            color: doExpand ? 'white' : '',\n          }\n          let indicatorClasses = isActive ? 'SRC-whiteText ' : ''\n          if (doExpand) {\n            indicatorClasses += 'SRC-pointed-triangle-down'\n            style.borderTopColor = primaryColor\n          } else if (isLastActiveSelection) {\n            indicatorClasses += 'SRC-pointed-triangle-right'\n            style.borderLeftColor = primaryColor\n          }\n          const hoverEnter: Info = {\n            isSelected: isActive,\n            originalColor: primaryColor,\n            hoverWhiteTextClass: 'SRC-hoverWhiteText'\n          }\n          const hoverLeave: Info = {\n            isSelected: isActive,\n            originalColor: lightColor\n          }\n          return (\n            <React.Fragment>\n              <div \n                style={style}\n                role=\"button\"\n                onMouseEnter={this.handleHoverLogic(hoverEnter)}\n                onMouseLeave={this.handleHoverLogic(hoverLeave)}\n                className={`SRC-accordion-key SRC-gap SRC-hand-cursor SRC-menu-button-base ${indicatorClasses}`}\n                onClick={this.toggleSelectionLevel(index)}\n              >\n                  {el.name}\n                  <span className=\"menu-icon\">\n                    <FontAwesomeIcon className={isActive ? '' : 'SRC-accordion-not-selected'} size={'xs'} color={isActive ? 'white': 'black'} icon={doExpand ? 'minus' : 'plus'} />\n                  </span>\n              </div>\n              <TransitionGroup>\n                {\n                  visibleAccordionIndex === index\n                  &&\n                  <CSSTransition\n                    key={JSON.stringify(el)}\n                    classNames=\"SRC-accordion-menu\"\n                    timeout={{ enter: 300, exit: 500 }}\n                  >\n                    <div className=\"SRC-accordion-menu\">\n                      {this.renderFacetMenu(el.menuConfig, index)}\n                    </div>\n                  </CSSTransition>\n                }\n              </TransitionGroup>\n            </React.Fragment>\n          )\n        }\n      )\n    }\n    return this.renderFacetMenu(menuConfig, 0)\n  }\n\n  private renderFacetMenu(menuConfig: MenuConfig [], curLevel: number) {\n    const { rgbIndex, accordionConfig } = this.props\n    const { colorPalette } = getColorPallette(rgbIndex, 5)\n    let originalColor = colorPalette[0]\n    let defaultColor = '#F5F5F5'\n    if (accordionConfig) {\n      originalColor = colorPalette[2]\n      defaultColor = colorPalette[4]\n    }\n    return menuConfig.map((config: MenuConfig, index: number) => {\n      const { facetName, facetAliases = {} } = config\n      const isSelected: boolean = this.state.activeMenuIndex === index && curLevel == this.state.lastAccordionIndexWithSelection\n      const style: any = {}\n      let selectedStyling: string = ''\n      if (isSelected) {\n        // we have to programatically set the style since the color is chosen from a color\n        // wheel\n        style.background = originalColor\n        // below has to be set so the pseudo element created will inherit its color\n        // appropriately\n        style.borderLeftColor = originalColor\n        selectedStyling = 'SRC-pointed-triangle-right SRC-whiteText'\n      } else {\n        // change background to class\n        selectedStyling = 'SRC-blackText'\n        style.background = defaultColor\n      }\n      const infoEnter: Info = { isSelected, originalColor, hoverWhiteTextClass: 'SRC-hoverWhiteText' }\n      const infoLeave: Info = { isSelected, originalColor: defaultColor }\n      const facetDisplayValue: string = facetAliases[facetName] || facetName\n      return (\n        <div\n          onMouseEnter={this.handleHoverLogic(infoEnter)}\n          onMouseLeave={this.handleHoverLogic(infoLeave)}\n          key={config.facetName}\n          className={`SRC-gap SRC-hand-cursor SRC-menu-button-base ${selectedStyling}`}\n          onClick={this.switchFacet(index, curLevel)}\n          onKeyPress={this.switchFacet(index, curLevel)}\n          role=\"button\"\n          tabIndex={0}\n          style={style}\n        >\n          {facetDisplayValue}\n        </div>\n      )\n    })\n  }\n\n}\n","import * as React from 'react'\nimport { FileEntity } from '../utils/jsonResponses/FileEntity'\nimport { uploadFile, createEntity, updateEntity, lookupChildEntity, getEntity } from '../utils/SynapseClient'\nimport { FileUploadComplete } from '../utils/jsonResponses/FileUploadComplete'\nimport { EntityId } from '../utils/jsonResponses/EntityId'\nimport { EntityLookupRequest } from '../utils/jsonResponses/EntityLookupRequest'\n\ntype UploaderState = {\n  token?: string,\n  error?: any,\n  totalFilesToUploadCount: number,\n  filesUploadedCount: number,\n  isUploading?: boolean,\n  successfullyUploaded: boolean\n}\n\nexport type UploaderProps = {\n  token?: string,\n  parentContainerId: string\n}\n\nexport default class Uploader extends React.Component<UploaderProps, UploaderState> {\n  private readonly inputOpenFileRef: React.RefObject<HTMLInputElement>\n\n  constructor(props: UploaderProps) {\n    super(props)\n    this.state = {\n      token: '',\n      isUploading: false,\n      filesUploadedCount: 0,\n      totalFilesToUploadCount: 0,\n      successfullyUploaded: false\n    }\n    this.inputOpenFileRef = React.createRef()\n  }\n\n  showOpenFileDlg = () => {\n    if (this.inputOpenFileRef && this.inputOpenFileRef.current) {\n      this.inputOpenFileRef.current.click()\n    }\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) {\n      this.handleFilesChanged(event.target.files)\n    }\n  }\n\n  finishedProcessingOneFile = () => {\n    const incrementedFilesUploadedCount = this.state.filesUploadedCount + 1\n    const isStillUploading = incrementedFilesUploadedCount < this.state.totalFilesToUploadCount\n    this.setState(\n      {\n        isUploading: isStillUploading,\n        filesUploadedCount: incrementedFilesUploadedCount,\n        successfullyUploaded: !isStillUploading\n      })\n  }\n\n  handleUploadError = (error: any) => {\n    this.finishedProcessingOneFile()\n    this.setState({ error })\n  }\n\n  handleFilesChanged = (selectorFiles: FileList) => {\n    this.setState(\n      {\n        error: undefined,\n        isUploading: true,\n        filesUploadedCount: 0,\n        totalFilesToUploadCount: selectorFiles.length,\n        successfullyUploaded: false,\n      })\n    Array.from(selectorFiles).forEach((file) => {\n      // check for existing filename in parent folder before upload (add new version if exists).\n      // note that the parent container (project/folder) is configurable.\n      const newFileEntity: FileEntity = {\n        parentId: this.props.parentContainerId,\n        name: file.name,\n        concreteType: 'org.sagebionetworks.repo.model.FileEntity',\n        dataFileHandleId: '',\n      }\n      const entityLookupRequest: EntityLookupRequest = { entityName: file.name, parentId: this.props.parentContainerId }\n      lookupChildEntity(entityLookupRequest, this.props.token).then((entityId: EntityId) => {\n        // ok, found an entity of the same name.\n        getEntity<FileEntity>(this.props.token, entityId.id).then((existingEntity: FileEntity) => {\n          if (existingEntity.concreteType === 'org.sagebionetworks.repo.model.FileEntity') {\n            this.updateEntityFile(existingEntity, file)\n          } else {\n            this.updateEntityFile(newFileEntity, file)\n          }\n        })\n      }).catch((error: any) => {\n        if (error.statusCode === 404) {\n          // great, it's a new file!\n          this.updateEntityFile(newFileEntity, file)\n        } else {\n          this.handleUploadError(error)\n        }\n      })\n    })\n  }\n\n  updateEntityFile = (fileEntity: FileEntity, file: File) => {\n    uploadFile(this.props.token, file.name, file).then((fileUploadComplete: FileUploadComplete) => {\n      const isCreate = fileEntity.dataFileHandleId === ''\n      fileEntity.dataFileHandleId = fileUploadComplete.fileHandleId\n      const createOrUpdate = isCreate ? createEntity : updateEntity\n      createOrUpdate(fileEntity, this.props.token).then(() => {\n        this.finishedProcessingOneFile()\n      })\n    }).catch((error: any) => {\n      this.handleUploadError(error)\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        {/** This input field is used for it's functionally (browse for files), the button acts as the UI. */}\n        <input\n          ref={this.inputOpenFileRef}\n          type=\"file\"\n          style={{ display: 'none' }}\n          onChange={this.handleChange}\n          multiple={true}\n        />\n        <button type=\"button\" onClick={this.showOpenFileDlg} className=\"SRC-uploadButton\">Browse...</button>\n        {\n          this.state.isUploading &&\n          <React.Fragment>\n            <span style={{ marginLeft: '10px' }}>\n              {this.state.filesUploadedCount} / {this.state.totalFilesToUploadCount} file(s)\n            </span>\n            <span style={{ marginLeft: '2px' }} className={'spinner'} />\n          </React.Fragment>\n        }\n        {\n          this.state.successfullyUploaded &&\n          <span style={{ marginLeft: '10px' }}>\n            Successfully uploaded {this.state.totalFilesToUploadCount} file(s) to\n            <a \n              style={{ marginLeft: '2px' }} \n              href={`https://www.synapse.org/#!Synapse:${this.props.parentContainerId}`} \n              rel=\"noopener noreferrer\" \n              target=\"_blank\">{this.props.parentContainerId}\n            </a>\n          </span>\n        }\n        {\n          this.state.error &&\n          <p>\n            Upload error!\n          </p>\n        }\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { FileEntity } from '../utils/jsonResponses/FileEntity'\nimport { getEntity, getFileEntityContent, uploadFile, updateEntity } from '../utils/SynapseClient'\nimport { Entity } from '../utils/jsonResponses/Entity'\nimport { FileUploadComplete } from '../utils/jsonResponses/FileUploadComplete'\n\ntype FileContentDownloadUploadDemoState = {\n  token?: string,\n  error?: any,\n  isLoading?: boolean,\n  fileContent?: string,\n  targetEntity?: FileEntity\n}\n\nexport type FileContentDownloadUploadDemoProps = {\n  token?: string,\n  targetEntityId: string\n}\n\nexport default class FileContentDownloadUploadDemo\n  extends React.Component<FileContentDownloadUploadDemoProps, FileContentDownloadUploadDemoState> {\n  constructor(props: FileContentDownloadUploadDemoProps) {\n    super(props)\n    this.state = {\n      token: '',\n      isLoading: false,\n    }\n  }\n\n  public componentDidMount() {\n    const { token, targetEntityId } = this.props\n    // must be logged in to download content\n    if (token) {\n      this.setState({ isLoading: true })\n      getEntity(token, targetEntityId).then((entity: Entity) => {\n        // if file entity\n        if (entity.concreteType === 'org.sagebionetworks.repo.model.FileEntity') {\n          const fileEntity: FileEntity = entity as FileEntity\n          getFileEntityContent(token, fileEntity).then((content) => {\n            this.setState({ fileContent: content, targetEntity: fileEntity, isLoading: false })\n          })\n        } else {\n          this.setState({ error: 'invalid type', isLoading: false })\n        }\n      }).catch((err) => {\n        this.setState({ error: err, isLoading: false })\n      })\n    }\n  }\n\n  updateFileContent = (event: React.MouseEvent<HTMLButtonElement>) => {\n    // create a new FileHandle, and update the FileEntity\n    if (this.props.token && this.state.targetEntity && this.state.fileContent) {\n      this.setState({ isLoading: true })\n      const newFileContent = new Blob([this.state.fileContent], {\n        type: 'text/plain'\n      })\n      uploadFile(this.props.token, this.state.targetEntity.name, newFileContent)\n        .then((fileUploadComplete: FileUploadComplete) => {\n          // now update the entity!\n          if (this.state.targetEntity) {\n            this.state.targetEntity.dataFileHandleId = fileUploadComplete.fileHandleId\n            updateEntity(this.state.targetEntity, this.props.token).then((entity: Entity) => {\n              const fileEntity = entity as FileEntity\n              // updated the target entity, force it to get the updated entity\n              this.setState({ targetEntity: fileEntity, isLoading: false })\n            }).catch((err: string) => {\n              this.setState({ error: err, isLoading: false })\n            })\n          }\n        }).catch((err: string) => {\n          this.setState({ error: err, isLoading: false })\n        })\n    }\n  }\n  handleContentChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ fileContent: event.target.value })\n  }\n\n  render() {\n    return (\n      <div>\n        {\n          this.state.fileContent &&\n          <React.Fragment>\n            <div>\n              <textarea\n                style={{ width: '100%', height: '300px' }}\n                value={this.state.fileContent}\n                onChange={this.handleContentChange}\n              />\n            </div>\n            <button onClick={this.updateFileContent}>Update File Content...</button>\n          </React.Fragment>\n        }\n        {\n          this.state.isLoading &&\n          <span style={{ marginLeft: '2px' }} className={'spinner'} />\n        }\n\n        {\n          this.state.error &&\n          <p>\n            Download error!\n          </p>\n        }\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport Login from '../../lib/containers/Login'\nimport { SynapseVersion } from '../../lib/utils/jsonResponses/SynapseVersion'\nimport { SynapseClient, SynapseConstants } from '../../lib/utils/'\nimport './App.css'\nimport EntityForm from '../../lib/containers/EntityForm'\nimport QueryWrapperMenu, { MenuConfig } from '../../lib/containers/QueryWrapperMenu'\nimport Uploader from '../../lib/containers/Uploader'\nimport FileContentDownloadUploadDemo from '../../lib/containers/FileContentDownloadUploadDemo'\n\ntype DemoState = {\n  token: string\n  ownerId: string\n  isLoading: boolean\n  showMarkdown: boolean\n  version: number\n  cardSelection: string\n  cardSql: string\n  tabOne: any\n  tabTwo: any\n  showTabOne: boolean\n  userFormDataSynId?: string\n}\n\n/**\n * Demo of features that can be used from src/demo/utils/SynapseClient\n * module\n\n */\nclass Demo extends React.Component<{}, DemoState> {\n  entityFormRef: any\n  /**\n   * Maintain internal state of user session\n   */\n  constructor(props: any) {\n    super(props)\n    this.entityFormRef = React.createRef()\n    this.state = {\n      isLoading: true,\n      ownerId: '',\n      showMarkdown: true,\n      token: '',\n      version: 0,\n      cardSql: 'SELECT * FROM syn16859448',\n      cardSelection: SynapseConstants.TOOL,\n      showTabOne: false,\n      tabOne:\n      {\n        menuConfig: [\n          {\n            title: 'Data',\n            facetDisplayValue: 'Organism',\n            facetName: 'dataStatus',\n            sql: 'SELECT projectStatus, dataStatus, tumorType, diseaseFocus FROM syn16787123',\n            synapseId: 'syn16787123',\n            unitDescription: 'dataStatus'\n          },\n          {\n            title: 'Data',\n            facetDisplayValue: 'Study',\n            facetName: 'projectStatus',\n            sql: 'SELECT * FROM syn16787123',\n            synapseId: 'syn16787123',\n            unitDescription: 'projectStatus',\n            visibleColumnCount: 5,\n          }\n        ],\n        rgbIndex: 2\n      }\n    ,\n      tabTwo: {\n        menuConfig: [\n          {\n            facetName: 'assay',\n            sql:\n            // tslint:disable-next-line:max-line-length\n            'SELECT * FROM syn16858331',\n            // facetAliases: {\n            //   id: 'File ID',\n            //   fundingAgency: 'Funding Agency',\n            //   assay: 'Assay',\n            //   dataType: 'Data Type'\n            // },\n            synapseId: 'syn16858331',\n            title: 'title',\n            unitDescription: 'datum'\n          },\n          {\n            facetName: 'dataType',\n            sql: 'SELECT id, fundingAgency, assay, diagnosis, dataType FROM syn16858331',\n          },\n          {\n            facetName: 'diagnosis',\n            sql: 'SELECT id, fundingAgency, assay, diagnosis, dataType FROM syn16858331',\n            title: 'title'\n          }\n        ] as MenuConfig[]\n        ,\n        rgbIndex: 5\n      }\n    }\n    this.makeSampleQueryCall = this.makeSampleQueryCall.bind(this)\n    this.getVersion = this.getVersion.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.removeHandler = this.removeHandler.bind(this)\n    this.handleCardSelection = this.handleCardSelection.bind(this)\n    this.onSubmitEntityForm = this.onSubmitEntityForm.bind(this)\n    this.onEntityFormSubmitted = this.onEntityFormSubmitted.bind(this)\n  }\n\n  public onSubmitEntityForm() {\n    this.entityFormRef.current.submitForm()\n  }\n\n  public onEntityFormSubmitted(synId: string) {\n    this.setState({ userFormDataSynId: synId })\n  }\n\n  /**\n   * Get the current version of Synapse\n   */\n  public getVersion(): void {\n    // IMPORTANT: Your component should have a property (with default) to change the endpoint.  This is necessary for Synapse.org integration.\n    // Pass your endpoint through to the rpc call:\n    // SynapseClient.getVersion('https://repo-staging.prod.sagebase.org')\n    SynapseClient.getVersion()\n      .then((data: SynapseVersion) => this.setState({ version: data.version }))\n      .catch((error: any) => {\n        // Handle HTTPError.  Has statusCode and message.\n        console.error('Get version failed', error)\n      })\n  }\n  /**\n   * Make a query on synapse\n   */\n  public makeSampleQueryCall(): void {\n    // Example table (view) query.\n    // See https://docs.synapse.org/rest/POST/entity/id/table/query/async/start.html\n    const QUERY = {\n      entityId: 'syn12335586',\n      partMask:\n        SynapseConstants.BUNDLE_MASK_QUERY_RESULTS |\n        SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n        SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n        SynapseConstants.BUNDLE_MASK_QUERY_FACETS,\n      query: {\n        includeEntityEtag: true,\n        isConsistent: false,\n        limit: 100,\n        offset: 0,\n        sql: 'SELECT * FROM syn12335586'\n      },\n    }\n    SynapseClient.getQueryTableResults(QUERY)\n      .then((data: any) => console.log(data))\n      .catch((error: any) => {\n        console.error(error)\n      })\n  }\n  /**\n   * Update internal state\n   * @param {Object} updatedState new state to be updated by the component\n   */\n  public handleChange(updatedState: {}): void {\n    this.setState(updatedState)\n  }\n\n  public removeHandler(): void {\n    this.setState({ showMarkdown: !this.state.showMarkdown })\n  }\n\n  public handleCardSelection = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const value = event.target.value\n    let sql = ''\n    switch (value) {\n      case SynapseConstants.AMP_CONSORTIUM:\n        sql = 'SELECT * FROM syn17024173'\n        break\n      case SynapseConstants.DATASET:\n        sql = 'SELECT * FROM syn16859580'\n        break\n      case SynapseConstants.TOOL:\n        sql = 'SELECT * FROM syn16859448'\n        break\n      // peculiar edge case here that breaks the app..\n      // react doesn't set state when this sql statement is used below\n      // case SynapseConstants.FUNDER:\n      //   sql = 'SELECT * FROM syn16858699'\n      //   break\n      case SynapseConstants.PUBLICATION:\n        sql = 'SELECT * FROM syn16857542'\n        break\n    }\n    this.setState(\n      {\n        cardSql: sql,\n        cardSelection: value\n      }\n    )\n  }\n\n  public componentDidMount() {\n    // Note:  All portals should do this once on the initial app load.\n    // This looks for the session token cookie (HttpOnly, unable to directly access), and initialize the session if it does exists.\n    SynapseClient.detectSSOCode()\n    SynapseClient.getSessionTokenFromCookie()\n    .then((sessionToken: any) => this.handleChange({ token: sessionToken }))\n    .catch((error: any) => {\n      console.error(error)\n    })\n  }\n  public render(): JSX.Element {\n    let token: string | undefined = ''\n    token = ''\n    const userFormSynLink = `https://www.synapse.org/#!Synapse:${this.state.userFormDataSynId}`\n    return (\n      <div>\n        <p className=\"App-intro text-center\">Synapse production version: {this.state.version}</p>\n        {\n            (this.state.token && this.state.token !== '') &&\n            <div className=\"bg-success text-center\" role=\"alert\">\n              You are logged in.&nbsp;\n              <button\n                onClick={SynapseClient.signOut}\n              >\n                  <span aria-hidden=\"true\">Sign out</span>\n              </button>\n            </div>\n        }\n        {\n          (!this.state.token || this.state.token === '') &&\n          <div>\n            <Login\n              token={SynapseClient.IS_DEV_ENV ? token : this.state.token}\n              theme={'light'}\n              icon={true}\n            />\n            <hr />\n          </div>\n        }\n        {\n          (this.state.token && this.state.token !== '') &&\n          <div className=\"container\">\n            <EntityForm\n              parentContainerId=\"syn20355732\"\n              token={this.state.token!}\n              formSchemaEntityId=\"syn20184776\"\n              formUiSchemaEntityId=\"syn20184771\"\n              initFormData={false}\n              ref={this.entityFormRef}\n              synIdCallback={this.onEntityFormSubmitted}\n            />\n          </div>\n        }\n        {\n          (this.state.token && this.state.token !== '') &&\n          !this.state.userFormDataSynId &&\n          <div className=\"container\">\n            <button\n              onClick={this.onSubmitEntityForm}\n              className=\"btn btn-info\"\n            >\n              Programmatically Call Submit\n            </button>\n          </div>\n        }\n        {\n          (this.state.token && this.state.token !== '') &&\n          this.state.userFormDataSynId &&\n          <div className=\"container\">\n            <a href={userFormSynLink} target=\"_blank\">User Form Data Synapse FileEntity created/updated</a>\n          </div>\n        }\n        {\n          (this.state.token && this.state.token !== '') &&\n          <div className=\"container\">\n            <h5>Upload File(s) Demo</h5>\n            <Uploader\n              token={this.state.token!}\n              parentContainerId=\"syn18987891\"\n            />\n            <hr />\n          </div>\n        }\n        {\n          (this.state.token && this.state.token !== '') &&\n          <div className=\"container\">\n            <h5>Download File Content Demo (syn12196718)</h5>\n            <FileContentDownloadUploadDemo\n              token={this.state.token!}\n              targetEntityId=\"syn12196718\"\n            />\n            <hr />\n          </div>\n        }\n        {this.state.isLoading ? <div className=\"container\"> Loading markdown.. </div> : ''}\n        <div className=\"container\">\n          <form>\n            <label>\n              Pick a card type\n            <select value={this.state.cardSelection} onChange={this.handleCardSelection}>\n                <option value={SynapseConstants.AMP_CONSORTIUM}>{SynapseConstants.AMP_CONSORTIUM}</option>\n                <option value={SynapseConstants.DATASET}>{SynapseConstants.DATASET}</option>\n                <option value={SynapseConstants.TOOL}>{SynapseConstants.TOOL}</option>\n                {/* <option value={SynapseConstants.FUNDER}>{SynapseConstants.FUNDER}</option> */}\n                <option value={SynapseConstants.PUBLICATION}>{SynapseConstants.PUBLICATION}</option>\n              </select>\n            </label>\n          </form>\n        </div>\n\n        <div className=\"container\">\n          <button\n            className=\"btn btn-default\"\n            onClick={() => {this.setState({showTabOne: !this.state.showTabOne})}}\n          >\n            toggle tabs for query wrapper menu\n          </button>\n          <a href=\"#table\"> Table Demo </a>\n          <QueryWrapperMenu\n            isConsistent={true}\n            name={'Demo'}\n            token={SynapseClient.IS_DEV_ENV ? token! : this.state.token!}\n            menuConfig={this.state.showTabOne ? this.state.tabOne.menuConfig : this.state.tabTwo.menuConfig}\n            rgbIndex={this.state.showTabOne ? this.state.tabOne.rgbIndex : this.state.tabTwo.rgbIndex}\n            stackedBarChartConfiguration={\n              {\n                loadingScreen: <div/>\n              }\n            }\n          />\n        </div>\n      </div>\n    )\n  }\n}\nexport default Demo\n","import * as React from 'react'\n\ntype BookmarksProps = {\n  footnotes: string\n}\n\nclass Bookmarks extends React.Component<BookmarksProps, {}> {\n\n  constructor(props: BookmarksProps) {\n    super(props)\n    this.renderBookmarks = this.renderBookmarks.bind(this)\n  }\n\n  /**\n   * Returns bookmarks\n   *\n   * @returns JSX for the embedded bookmarks in the markdown passed in as a prop\n   * @memberof Bookmarks\n   */\n  public renderBookmarks() {\n    const copyFootnotes: string = String(this.props.footnotes)\n\n    // find all the links embedded in the markdown below\n    const regex = /Synapse widget&gt;<\\/span>(.*)</g\n    let matchedGroup: RegExpExecArray | null\n    const output = []\n    // below we use regex.exec to find the find matched group containing the citation source\n    while ((matchedGroup = regex.exec(copyFootnotes))) {\n      output.push(matchedGroup[1])\n    }\n\n    // return all the links formatted accordingly\n    return output.map(\n      (el, index) => {\n        const isBeforeLastElement = index < output.length - 1\n        return (\n          <React.Fragment key={index}>\n            <span>\n              <a href={''} id={`bookmark${index}`}>[{index + 1}]</a>\n            </span>\n            {el}\n            {isBeforeLastElement && <br/>}\n          </React.Fragment>\n        )\n      }\n    )\n  }\n\n  public render() {\n    return (\n      <React.Fragment>\n        <hr />\n        {this.renderBookmarks()}\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Bookmarks\n","import * as React from 'react'\nimport { BatchFileResult } from '../../utils/jsonResponses/BatchFileResult'\nimport { FileEntity } from '../../utils/jsonResponses/FileEntity'\nimport { FileHandle } from '../../utils/jsonResponses/FileHandle'\nimport { getEntity, getFiles } from '../../utils/SynapseClient'\n\ntype SynapseImageProps = {\n  wikiId?: string\n  synapseId?: string\n  token?: string\n  fileName?: string\n  fileResults?: FileHandle []\n  params: any\n}\n\ntype SynapseImageState = {\n  isLoaded: boolean\n  preSignedURL: string\n}\n\nclass SynapseImage extends React.Component<SynapseImageProps, SynapseImageState> {\n\n  constructor(props: SynapseImageProps) {\n    super(props)\n    this.getEntity = this.getEntity.bind(this)\n    this.getSynapseFiles = this.getSynapseFiles.bind(this)\n    this.compareById = this.compareById.bind(this)\n    this.state = {\n      isLoaded: false,\n      preSignedURL: ''\n    }\n  }\n\n  public compareById(fileName: string, key: string) {\n    return (element: any) => element[key] === fileName\n  }\n\n    /**\n     * Attach markdown to wiki attachments\n     */\n  public matchToHandle(comparator: any , objectList: any) {\n    if (objectList) {\n            // make sure the files have loaded\n      const filtered = objectList.filter(comparator)\n      return filtered\n    }\n    return []\n  }\n\n  public getEntity() {\n    const { token, synapseId } = this.props\n    getEntity<FileEntity>(token, synapseId!).then(\n      // https://docs.synapse.org/rest/org/sagebionetworks/repo/model/FileEntity.html\n      (data: FileEntity) => {\n        const fileHandleAssociationList = [\n          {\n            associateObjectId: synapseId,\n            associateObjectType: 'FileEntity',\n            fileHandleId: data.dataFileHandleId\n          }\n        ]\n        this.getSynapseFiles(fileHandleAssociationList, data.dataFileHandleId)\n      }\n    )\n  }\n  public getSynapseFiles(fileHandleAssociationList: any, id: string) {\n    // overload the method for two different use cases, one where\n    // the image is attached to an entity and creates a list on the spot,\n    // the other where list is passed in from componentDidMount in MarkdownSynapse\n    const request: any = {\n      includeFileHandles: false,\n      includePreSignedURLs: true,\n      includePreviewPreSignedURLs: false,\n      requestedFiles: fileHandleAssociationList\n    }\n    getFiles(request, this.props.token).then(\n      (data: BatchFileResult) => {\n        const match = this.matchToHandle(this.compareById(id, 'fileHandleId'), data.requestedFiles)\n        this.setState({\n          preSignedURL: match[0].preSignedURL\n        })\n      }\n    )\n  }\n  public componentDidMount() {\n    if (!this.props.hasOwnProperty('wikiId')) {\n      // Can get presigned url right away\n      this.getEntity()\n    } else {\n      // Can get presigned url right away, otherwise make extra API call to get this image's\n      // fileHandle ID.\n      const { fileName, fileResults } = this.props\n      const match = this.matchToHandle(this.compareById(fileName!, 'fileName'), fileResults!)\n      const fileHandleAssociationList = [\n        {\n          associateObjectId: this.props.wikiId,\n          associateObjectType: 'WikiAttachment',\n          fileHandleId: match[0].id\n        }\n      ]\n      this.getSynapseFiles(fileHandleAssociationList, match[0].id)\n    }\n  }\n  public render() {\n    const imgStyle: any = {}\n    const { params } = this.props\n    if (params && params.align) {\n      imgStyle.float = params.align.toLowerCase()\n    }\n    if (this.state.isLoaded || !this.state.preSignedURL) {\n      return null\n    }\n    return (\n      <React.Fragment>\n        <img\n          alt=\"synapse\"\n          className=\"img-fluid\"\n          src={this.state.preSignedURL}\n          style={imgStyle}\n        />\n      </React.Fragment>\n    )\n  }\n}\nexport default SynapseImage\n","import * as React from 'react'\n// tslint:disable-next-line:import-name\nimport Plotly from 'plotly.js-basic-dist'\n// tslint:disable-next-line:import-name\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { QueryResultBundle } from '../../utils/jsonResponses/Table/QueryResultBundle'\nimport { getFullQueryTableResults } from '../../utils/SynapseClient'\nimport { SynapseConstants } from '../../utils/'\nconst Plot = createPlotlyComponent(Plotly)\n\ntype SynapsePlotProps = {\n  token?: string\n  ownerId?: string\n  wikiId?: string\n  widgetparamsMapped?: any\n}\n\ntype SynapsePlotState = {\n  isLoaded: boolean\n  queryData: QueryResultBundle\n}\n\nclass SynapsePlot extends React.Component<SynapsePlotProps, SynapsePlotState> {\n\n  constructor(props: SynapsePlotProps) {\n    super(props)\n    this.state = {\n      isLoaded: false,\n      queryData: {} as QueryResultBundle\n    }\n    this.fetchPlotlyData = this.fetchPlotlyData.bind(this)\n    this.showPlot = this.showPlot.bind(this)\n  }\n\n  public componentDidMount() {\n    this.fetchPlotlyData()\n  }\n  /**\n   * Get data for plotly\n   *\n   * @returns data corresponding to plotly widget\n   */\n  public fetchPlotlyData() {\n    const { token } = this.props\n    const { query } = this.props.widgetparamsMapped\n    const queryRequest = {\n      concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n      partMask: SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n      query: {\n        sql: query\n      }\n    }\n    getFullQueryTableResults(queryRequest, token).then(\n      (data: QueryResultBundle) => {\n        this.setState({\n          isLoaded: true,\n          queryData: data\n        })\n      }\n    ).catch(\n      (err: any) => {\n        console.log('Error on full table query ', err)\n      }\n    )\n  }\n\n  public showPlot() {\n    if (!this.state.isLoaded) {\n      return\n    }\n    const {\n            title,\n            xtitle,\n            ytitle,\n            type,\n            xaxistype,\n            showlegend\n        } = this.props.widgetparamsMapped\n    const queryData = this.state\n    const isHorizontal = this.props.widgetparamsMapped.horizontal.toLowerCase()\n    const layout: any = {\n      showlegend,\n      title\n    }\n    if (xtitle) {\n      layout.xaxis = {\n        title: xtitle\n      }\n    }\n    if (xaxistype) {\n      layout.xaxis = {\n        ...layout.xaxis,\n        xaxistype: xaxistype.toLowerCase()\n      }\n    }\n    if (ytitle) {\n      layout.yaxis = {\n        title: ytitle\n      }\n    }\n    // init plot_data\n    const plotData: any = []\n    const orientation = isHorizontal ? 'v' : 'h'\n    const headers = queryData.queryData.queryResult.queryResults.headers\n    for (let i = 0; i < headers.length - 1; i += 1) {\n      // make an entry for each set of data points\n      plotData[i] = {\n        orientation,\n        name: headers[i + 1].name,\n        type: type.toLowerCase(),\n        x: [],\n        y: []\n      }\n    }\n    // grab all the data\n    for (const row of queryData.queryData.queryResult.queryResults.rows) {\n      for (let j = 1; j < row.values.length; j += 1) {\n        // create pairs of data\n        const rowValues: any = row.values\n        plotData[j - 1].x.push(rowValues[0])\n        plotData[j - 1].y.push(rowValues[j])\n      }\n    }\n    return <Plot layout={layout} data={plotData} />\n  }\n\n  public render() {\n    if (!this.state.isLoaded) {\n      return null\n    }\n    return (this.showPlot())\n  }\n}\nexport default SynapsePlot\n","import * as React from 'react'\nimport { FileHandleResults } from '../utils/jsonResponses/FileHandleResults'\nimport { WikiPage } from '../utils/jsonResponses/WikiPage'\nimport { SynapseClient, SynapseConstants } from '../utils/'\nimport Bookmarks from './widgets/Bookmarks'\nimport SynapseImage from './widgets/SynapseImage'\nimport SynapsePlot from './widgets/SynapsePlot'\nimport UserCard from './UserCard'\nconst TOC_CLASS = {\n  1: 'toc-indent1',\n  2: 'toc-indent2',\n  3: 'toc-indent3',\n  4: 'toc-indent4',\n  5: 'toc-indent5',\n  6: 'toc-indent6'\n}\n\ndeclare var katex: any\n\ndeclare var markdownitSynapse: any\ndeclare var markdownit: any\ndeclare var markdownitSub: any\ndeclare var markdownitSup: any\ndeclare var markdownitCentertext: any\ndeclare var markdownitSynapseHeading: any\ndeclare var markdownitSynapseTable: any\ndeclare var markdownitStrikethroughAlt: any\ndeclare var markdownitContainer: any\ndeclare var markdownitEmphasisAlt: any\ndeclare var markdownitInlineComments: any\ndeclare var markdownitBr: any\ndeclare var sanitizeHtml: any\n\ndeclare var markdownitMath: any\n\nexport type MarkdownSynapseProps = {\n  errorMessageView?: JSX.Element;\n  token?: string;\n  ownerId?: string;\n  wikiId?: string;\n  markdown?: string;\n  hasSynapseResources?: boolean;\n  updateLoadState?: any;\n}\nconst md = markdownit({ html: true })\n\ntype MarkdownSynapseState = {\n  md: any;\n  text: string;\n  fileHandles?: FileHandleResults;\n  errorMessage: string;\n}\n/**\n * Basic Markdown functionality for Synapse, supporting Images/Plots/References/Bookmarks/buttonlinks\n *\n * @class Markdown\n * @extends {React.Component}\n */\nexport default class MarkdownSynapse extends React.Component<MarkdownSynapseProps, MarkdownSynapseState> {\n  public markupRef: React.RefObject<HTMLInputElement>\n\n  /**\n   * Creates an instance of Markdown.\n   * @param {*} props\n   */\n  constructor(props: MarkdownSynapseProps) {\n    super(props)\n    // markdownitSynapse wraps around markdownit object and uses its own dependencies\n    markdownitSynapse.init_markdown_it(md,\n                                       markdownitSub,\n                                       markdownitSup,\n                                       markdownitCentertext,\n                                       markdownitSynapseHeading,\n                                       markdownitSynapseTable,\n                                       markdownitStrikethroughAlt,\n                                       markdownitContainer,\n                                       markdownitEmphasisAlt,\n                                       markdownitInlineComments,\n                                       markdownitBr\n    )\n\n    const mathSuffix = ''\n    // Update the internal markdownit object with the wrapped synapse object\n    md.use(markdownitSynapse, mathSuffix).use(markdownitMath, mathSuffix)\n    this.state = {\n      md,\n      errorMessage: '',\n      fileHandles: undefined,\n      text: ''\n    }\n    this.markupRef = React.createRef()\n    this.handleLinkClicks = this.handleLinkClicks.bind(this)\n    // handle widgets and math markdown\n    this.processWidgets = this.processWidgets.bind(this)\n    this.processWidgetOrDomElement = this.processWidgetOrDomElement.bind(this)\n    this.processMath = this.processMath.bind(this)\n    // handle init calls to get wiki related items\n    this.getWikiAttachments = this.getWikiAttachments.bind(this)\n    this.getWikiPageMarkdown = this.getWikiPageMarkdown.bind(this)\n    // handle rendering widgets\n    this.renderWidget = this.renderWidget.bind(this)\n    this.renderSynapseButton = this.renderSynapseButton.bind(this)\n    this.renderSynapseImage = this.renderSynapseImage.bind(this)\n    this.renderSynapsePlot = this.renderSynapsePlot.bind(this)\n    this.renderSynapseTOC = this.renderSynapseTOC.bind(this)\n    this.getErrorView = this.getErrorView.bind(this)\n    this.createMarkup = this.createMarkup.bind(this)\n    this.addBookmarks = this.addBookmarks.bind(this)\n    this.addIdsToReferenceWidgets = this.addIdsToReferenceWidgets.bind(this)\n    this.addIdsToTocWidgets = this.addIdsToTocWidgets.bind(this)\n  }\n\n  public componentWillUnmount() {\n    // @ts-ignore TODO: find better documentation on typescript/react event params\n    this.markupRef.current!.removeEventListener('click', this.handleLinkClicks)\n  }\n\n  // Manually handle clicks to anchor tags where the scrollto isn't handled by page hash\n  public handleLinkClicks(event: React.MouseEvent<HTMLElement>) {\n\n    const genericElement = event.target as HTMLElement\n    if (genericElement.tagName === 'A') {\n      const anchor = event.target as HTMLAnchorElement\n      if (anchor.id.substring(0, 3) === 'ref') {\n        event.preventDefault()\n        // its a reference, so we scroll to the appropriate bookmark\n        const referenceNumber = Number(event.currentTarget.id.substring(3)) // e.g. ref2 => '2'\n        const goTo = this.markupRef.current!.querySelector(\n          `#bookmark${referenceNumber}`\n        )\n        try {\n          goTo!.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center',\n            inline: 'center'\n          })\n        } catch (e) {\n          console.log('error on scroll', e)\n        }\n      } else if (event.currentTarget.id !== null && anchor.getAttribute('data-anchor')) {\n        event.preventDefault()\n        // handle table of contents widget\n        const idOfContent = anchor.getAttribute('data-anchor')\n        const goTo = this.markupRef.current!.querySelector(`#${idOfContent}`)\n        try {\n          goTo!.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center',\n            inline: 'center'\n          })\n        } catch (e) {\n          console.log('error on scroll', e)\n        }\n      }\n    }\n  }\n\n  /**\n   * Given input text, generate markdown object to be passed onto inner html of some container.\n   * @param {String} text The text being written in plain markdown\n   * @returns {Object} Dictionary to be passed into dangerouslySetInnerHTML with markdown text\n   */\n  public createMarkup(text: string) {\n    const initText = this.state.md.render(text)\n    const cleanText = sanitizeHtml(initText, {\n      allowedAttributes: {\n        a: ['href', 'target'],\n        button: ['class'],\n        div: ['class', 'style'],\n        h1: ['toc'],\n        h2: ['toc'],\n        h3: ['toc'],\n        h4: ['toc'],\n        h5: ['toc'],\n        h6: ['toc'],\n        li: ['class'],\n        ol: ['class'],\n        span: ['*'],\n        table: ['class'],\n        th: ['class'],\n        thead: ['class'],\n        ul: ['class']\n      },\n      allowedTags: [\n        'span',\n        'code',\n        'h1',\n        'h2',\n        'h3',\n        'h4',\n        'h5',\n        'p',\n        'b',\n        'i',\n        'em',\n        'strong',\n        'a',\n        'id',\n        'table',\n        'tr',\n        'td',\n        'tbody',\n        'th',\n        'thead',\n        'button',\n        'div',\n        'image',\n        'ol',\n        'ul',\n        'li',\n        'svg',\n        'g',\n        'br',\n        'hr',\n        'summary',\n        'details'\n      ]\n    })\n    return { __html: cleanText }\n  }\n\n  /**\n   * Find all math identified elements of the form [id^=\\\"mathjax-\\\"]\n   * (e.g. <dom element id=\"mathjax-10\"> text </dom element>)\n   * and transform them to their math markedown equivalents\n   */\n  public processMath() {\n    if (!this.markupRef.current) {\n      return\n    }\n    // use regex to grab all elements\n    const mathExpressions = this.markupRef.current.querySelectorAll(\n      '[id^=\"mathjax-\"]'\n    )\n    // go through all obtained elements and transform them with katex\n    mathExpressions.forEach((element: any) => {\n      katex.render(element.textContent, element, {\n        delimiters: [\n          {\n            display: true,\n            left: '$$',\n            right: '$$'\n          },\n          {\n            display: false,\n            left: '\\\\(',\n            right: '\\\\)'\n          },\n          {\n            display: true,\n            left: '\\\\[',\n            right: '\\\\]'\n          }\n        ],\n        throwOnError: false\n      })\n    })\n  }\n  /**\n   * Process all the corresponding bookmark tags of the references made throughout the page\n   *\n   * @memberof MarkdownSynapse\n   */\n  public addBookmarks() {\n    markdownitSynapse.resetFootnotes()\n    this.createMarkup(this.state.text)\n    const footnotesHtml = this.createMarkup(markdownitSynapse.footnotes()).__html\n    if (footnotesHtml.length > 0) {\n      return (<Bookmarks footnotes={footnotesHtml} />)\n    }\n    // ts doesn't like functions without explicit return statements\n    return\n  }\n\n  /**\n   * Call Synapse REST API to get AMP-AD wiki portal markdown as demo of API call\n   */\n  public getWikiPageMarkdown(override: boolean = false) {\n    if (this.state.text.length === 0 || override) {\n      SynapseClient.getEntityWiki(\n        this.props.token,\n        this.props.ownerId,\n        this.props.wikiId\n        )\n        .then((data: WikiPage) => {\n          // on success grab text and append to the default text\n          this.setState({\n            text: data.markdown\n          })\n          if (this.props.updateLoadState) {\n            this.props.updateLoadState({ isLoading: false })\n          }\n        })\n        .catch((err) => {\n          console.log('Error on wiki markdown load\\n', err)\n        })\n    }\n    // else the wiki page was retrieved accordingly or it was passed down\n    // as a prop\n  }\n  public getWikiAttachments() {\n    // bang operator on ownerId and wikiId b/c this will only get called if we had found out above\n    // that this was specified\n    SynapseClient.getWikiAttachmentsFromEntity(\n      this.props.token,\n      this.props.ownerId!,\n      this.props.wikiId!\n    )\n      .then((data) => {\n        this.setState({ fileHandles: data, errorMessage: '' })\n      })\n      .catch((err) => {\n        this.setState({\n          errorMessage: err.reason\n        })\n        console.log('Error on wiki attachment load ', err)\n      })\n  }\n  /**\n   * If theres an error loading the wiki page show an informative message\n   * likely a priveledge issue -- (e.g. not signed-in)\n   *\n   * @returns view that presents error message on error, otherwise null\n   */\n  public getErrorView() {\n    if (this.state.errorMessage && this.props.errorMessageView) {\n      const errorViewWithProps = React.cloneElement(this.props.errorMessageView, {\n        message: this.state.errorMessage\n      })\n      return (\n        <React.Fragment>\n          {errorViewWithProps}\n        </React.Fragment>\n      )\n    }\n    return\n  }\n\n  public addIdsToReferenceWidgets(text: string) {\n    const referenceRegex = /<span id=\"wikiReference.*?<span data-widgetparams.*?span>/g\n    let referenceCount = 1\n\n    return text.replace(\n      referenceRegex,\n      () => {\n        // replace all reference tags with id's of the form id=\"ref<number>\"\" that we can read onClick\n        const current = referenceCount\n        referenceCount += 1\n        return `<a href=\"\" id=\"ref${current}\">[${current}]</a>`\n      }\n    )\n  }\n\n  public addIdsToTocWidgets(text: string) {\n    const tocId = 'SRC-header-'\n    let tocIdCount = 1\n    const TOC_HEADER_REGEX = /<h[1-6] toc=\"true\">.*<\\/h[1-6]>/gm\n\n    return text.replace(TOC_HEADER_REGEX, (match: string) => {\n      // replace with id of the form id=\"toc\" so we can read them with onclick events\n      const curTocId = tocIdCount\n      tocIdCount += 1\n      const matchWithId = `${match.substring(0, 3)} id=\"${tocId}${curTocId}\"${match.substring(3)}`\n      return matchWithId\n    })\n  }\n\n  /**\n   * The 'main' method of this class that process all the markdown and transforms it to the appropriate\n   * Synapse widgets.\n   *\n   * @returns JSX of the markdown into widgets\n   * @memberof MarkdownSynapse\n   */\n  public processWidgets() {\n    // create initial markup\n    let markup = this.createMarkup(this.state.text).__html\n    // process reference widgets\n    markup = this.addIdsToReferenceWidgets(markup)\n    // process table of contents widgets\n    markup = this.addIdsToTocWidgets(markup)\n\n    // capture and process all other widgets\n    // (<span data-widgetparams.*?span>) captures widgets\n    const widgetRegex = /(<span data-widgetparams.*?span>)/\n    // widgets is an array of either plain text/html or specific synapse markdown\n    const widgets = markup.split(widgetRegex)\n    if (widgets.length > 0) {\n      return this.processWidgetOrDomElement(widgets, markup)\n    }\n    return\n  }\n\n  /**\n   *  When the markdown string is transfered over the network certain characters get transformed,\n   * this does a simple transformation back to the original user's string.\n   *\n   * @param {string} xml\n   * @returns\n   * @memberof MarkdownSynapse\n   */\n  public decodeXml(xml: string) {\n    const escapedOneToXmlSpecialMap = {\n      '&amp;': '&',\n      '&gt;': '>',\n      '&lt;': '<',\n      '&quot;': '\"'\n    }\n    return xml.replace(/(&quot;|&lt;|&gt;|&amp;)/g, (str, item) => {\n      return escapedOneToXmlSpecialMap[item]\n    })\n  }\n\n  /**\n   * Given widgetMap renders it in a React component (or originalMarkup in special cases.)\n   *\n   * @param {string} widgetMatch The synapse widget to be rendered\n   * @param {string} originalMarkup The original markup text, this is a special case for widgets that\n   * are html specific.\n   * @returns JSX of the widget to render\n   * @memberof MarkdownSynapse\n   */\n  public processWidgetMappings(widgetMatch: string, originalMarkup: string) {\n    // General workflow -\n    //   1. Capture widget parameters\n    //   2. Transform any widget xml parameters to standard text\n    //   3. Split those parameters into a map\n    //   4. Render that widget based on its parameters\n\n    // steps 1,2\n    const widgetParamsRegex = /data-widgetparams=(\"(.*?)\")/\n    const widgetParamsMatchWithXML = widgetMatch.match(widgetParamsRegex)\n    const widgetParamsString = this.decodeXml(widgetParamsMatchWithXML![2])\n\n    // widgetParamsString look like {<widget>?param1=xxx&param2=yyy}\n    const questionIndex = widgetParamsString.indexOf('?')\n    if (questionIndex === -1) {\n      // e.g. toc is passed, there are no params\n      return this.renderWidget(widgetParamsString, {}, originalMarkup)\n    }\n    const widgetType = widgetParamsString.substring(0, questionIndex)\n    const widgetparamsMapped = {}\n    // map out params and their values\n    widgetParamsString\n      .substring(questionIndex + 1)\n      .split('&')\n      .forEach((keyPair) => {\n        let [key, value] = keyPair.split('=')\n        value = decodeURIComponent(value)\n        widgetparamsMapped[key] = value\n      })\n    return this.renderWidget(widgetType, widgetparamsMapped, originalMarkup)\n  }\n\n  /**\n   * Takes in widgetsToBe and parse it out to its respective html element\n   *\n   * @param {string[]} widgetsToBe This is an array of either synapse widgets, e.g. {plot?=...} or plain html\n   * that is not going to be process further.\n   * @param {string} originalMarkup This is the original markup that's maintained only because the table of contents\n   * widget renderer relies on it.\n   * @returns\n   * @memberof MarkdownSynapse\n   */\n  public processWidgetOrDomElement(widgetsToBe: string[], originalMarkup: string) {\n    const widgets = []\n    let index = 0\n    for (const text of widgetsToBe) {\n      // test if widget is present\n      if (text.indexOf('<span data-widgetparams') !== -1) {\n        // process widget\n        widgets.push(this.processWidgetMappings(text, originalMarkup))\n      } else {\n        // Else its plain html/text.\n        // Note-- this line below introduces an issue which is that there can be no inline synapse\n        // widgets as react only allows you to set 'innerHTML' (as opposed to outerHTML), this creates a span\n        // between two inline widgets\n        const key = index.toString() + text\n        widgets.push(\n          <span key={key} dangerouslySetInnerHTML={{ __html: text }} />\n        )\n        index += 1\n      }\n    }\n    return widgets\n  }\n\n  /**\n   *  Given widgetType renders the apppropriate widget\n   *\n   * @param {string} widgetType The type of synapse widget. (e.g. 'image', 'plot')\n   * @param {*} widgetparamsMapped The parameters for this widget\n   * @param {string} originalMarkup The original markup.\n   * @returns\n   * @memberof MarkdownSynapse\n   */\n  public renderWidget(\n    widgetType: string,\n    widgetparamsMapped: any,\n    originalMarkup: string\n  ) {\n    // we make keys out of the widget params\n    const key = JSON.stringify(widgetparamsMapped)\n    widgetparamsMapped.reactKey = key\n    switch (widgetType) {\n      case 'buttonlink':\n        return this.renderSynapseButton(widgetparamsMapped)\n      case 'image':\n        return this.renderSynapseImage(widgetparamsMapped)\n      case 'plot':\n        return this.renderSynapsePlot(widgetparamsMapped)\n      case 'toc':\n        return this.renderSynapseTOC(originalMarkup)\n      case 'badge':\n        return this.renderUserBadge(widgetparamsMapped)\n      default:\n        return\n    }\n  }\n\n  public renderSynapseButton(widgetparamsMapped: any) {\n    return (\n      <a\n        key={widgetparamsMapped.reactKey}\n        href={widgetparamsMapped.url}\n        className=\"btn btn-lg btn-info\"\n        role=\"button\"\n      >\n        {widgetparamsMapped.text}\n      </a>\n    )\n  }\n  public renderSynapsePlot(widgetparamsMapped: any) {\n    return (\n      <SynapsePlot\n        key={widgetparamsMapped.reactKey}\n        token={this.props.token}\n        ownerId={this.props.ownerId}\n        wikiId={this.props.wikiId}\n        widgetparamsMapped={widgetparamsMapped}\n      />\n    )\n  }\n\n  public renderSynapseImage(widgetparamsMapped: any) {\n    if (!this.state.fileHandles) {\n      // ensure files are loaded\n      return\n    }\n    const { reactKey } = widgetparamsMapped\n    if (widgetparamsMapped.fileName) {\n      // if file name is attached then the fileHandle ID is located\n      // in this wiki's file attachment list\n      return (\n        <SynapseImage\n          params={widgetparamsMapped}\n          key={reactKey}\n          token={this.props.token}\n          fileName={widgetparamsMapped.fileName}\n          wikiId={this.props.wikiId}\n          fileResults={this.state.fileHandles.list}\n        />\n      )\n    }\n    if (widgetparamsMapped.synapseId) {\n      // otherwise this image's fileHandle ID is not located\n      // in the file attachment list and will be loaded first\n      return (\n        <SynapseImage\n          params={widgetparamsMapped}\n          key={reactKey}\n          token={this.props.token}\n          synapseId={widgetparamsMapped.synapseId}\n        />\n      )\n    }\n    return\n  }\n  public renderSynapseTOC(originalMarkup: string) {\n    const elements: any[] = []\n    const TOC_HEADER_REGEX_WITH_ID = /<h([1-6]) id=\"(.*)\" .*toc=\"true\">(.*)<\\/h[1-6]>/gm\n    let text = ''\n    originalMarkup.replace(TOC_HEADER_REGEX_WITH_ID, (p1, p2, p3, p4) => {\n      text += p4\n      elements.push(\n        <div key={p4}>\n          <a className={`link ${TOC_CLASS[Number(p2)]}`} data-anchor={p3}>\n            {' '}{p4}{' '}\n          </a>\n        </div>\n      )\n      return ''\n    })\n    return (<div key={text}>{elements}</div>)\n  }\n\n  public renderUserBadge(widgetparamsMapped: any) {\n    return (\n      <UserCard\n        key={JSON.stringify(widgetparamsMapped)}\n        size={SynapseConstants.SMALL_USER_CARD}\n        alias={widgetparamsMapped.alias}\n      />\n    )\n  }\n\n  public componentDidMount() {\n    if (this.props.markdown) {\n      this.setState({\n        text: this.props.markdown\n      })\n    }\n    // we use this.markupRef.current && because in testing environment refs aren't defined\n    // @ts-ignore\n    this.markupRef.current && this.markupRef.current!.addEventListener('click', this.handleLinkClicks)\n    // unpack and set default value if not specified\n    const { hasSynapseResources = true } = this.props\n    if (hasSynapseResources) {\n      // get wiki attachments\n      this.getWikiAttachments()\n      this.getWikiPageMarkdown()\n    }\n    this.processMath()\n  }\n\n  // on component update find and re-render the math/widget items accordingly\n  public componentDidUpdate(prevProps: any) {\n    const { hasSynapseResources = true } = this.props\n\n    let shouldUpdate = this.props.token !== prevProps.token\n    shouldUpdate = shouldUpdate || (this.props.ownerId !== prevProps.ownerId)\n    shouldUpdate = shouldUpdate || (this.props.wikiId !== prevProps.wikiId)\n\n    // we have to carefully update the component so it doesn't encounter an infinite loop\n    if (shouldUpdate && hasSynapseResources) {\n      this.getWikiAttachments()\n      this.getWikiPageMarkdown(true)\n    }\n    this.processMath()\n  }\n\n  public render() {\n    return (\n      <div className=\"markdown\" ref={this.markupRef}>\n        {this.getErrorView()}\n        <span>{this.processWidgets()}</span>\n        <div>{this.addBookmarks()}</div>\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport CardContainer from './CardContainer'\nimport { QueryBundleRequest } from '../utils/jsonResponses/Table/QueryBundleRequest'\nimport { QueryResultBundle } from '../utils/jsonResponses/Table/QueryResultBundle'\nimport { SynapseClient, SynapseConstants } from '../utils'\nimport { cloneDeep } from '../utils/modules'\nimport { getNextPageOfData } from '../utils/modules/queryUtils'\nimport { GenericCardSchema, IconOptions } from './GenericCard'\nimport { insertWhereClauseFromURL, KeyValue } from '../utils/modules/sqlFunctions'\n\nexport type InternalLinkConfiguration = {\n  baseURL: string\n  columnValues: string []\n}\n\nexport type CommonCardProps = {\n  type: string\n  genericCardSchema?: GenericCardSchema\n  hasInternalLink?: boolean\n  iconOptions?: IconOptions\n  secondaryLabelLimit?: number\n  internalLinkConfiguration?: InternalLinkConfiguration\n  loadingScreen?: React.FunctionComponent | JSX.Element\n}\n\nexport type CardContainerLogicProps = {\n  token?: string\n  limit?: number\n  unitDescription?: string\n  searchParams?: KeyValue\n  filter?: string\n  loadingScreen?: JSX.Element\n  genericCardSchema?: GenericCardSchema\n  backgroundColor?:string\n  isHeader?:boolean\n  sql: string\n} & CommonCardProps\n\ntype State = {\n  data: QueryResultBundle | undefined\n  isLoading: boolean\n  queryRequest: QueryBundleRequest\n  totalResultsNoFacet: number,\n  hasMoreData: boolean\n}\n\n/**\n * Class wraps around CardContainer and serves as a standalone logic container for rendering cards.\n * This same logic exists in QueryWrapper, but the two serve two distinct purposes, making this component\n * sufficiently distinct.\n *\n * @class CardContainerLogic\n * @extends {React.Component}\n */\nexport default class CardContainerLogic extends React.Component<CardContainerLogicProps, State> {\n\n  public static defaultProps = {\n    token: ''\n  }\n\n  public static defaultState = {\n    data: undefined,\n    isLoading: true,\n    queryRequest: {} as QueryBundleRequest,\n    totalResultsNoFacet: 0,\n    hasMoreData: true\n  }\n\n  constructor(props: CardContainerLogicProps) {\n    super(props)\n    this.executeInitialQueryRequest = this.executeInitialQueryRequest.bind(this)\n    this.getLastQueryRequest = this.getLastQueryRequest.bind(this)\n    this.getNextPageOfData = this.getNextPageOfData.bind(this)\n    this.state = CardContainerLogic.defaultState\n  }\n\n  /**\n   * Compute default query request\n   *\n   * @memberof QueryWrapper\n   */\n  public componentDidMount() {\n    this.executeInitialQueryRequest()\n  }\n\n  /**\n   * @memberof QueryWrapper\n   *\n   */\n  public componentDidUpdate(prevProps: CardContainerLogicProps) {\n    /**\n     *  If component updates and the token has changed (they signed in) then the data should be pulled in. Or if the\n     *  sql query has changed of the component then perform an update.\n     */\n\n    if (this.props.token !== '' && prevProps.token === '') {\n      this.executeInitialQueryRequest()\n    }\n    if (prevProps.sql !== this.props.sql) {\n      this.executeInitialQueryRequest()\n    }\n  }\n\n  /**\n   * Pass down a deep clone (so no side affects on the child's part) of the\n   * last query request made\n   *\n   * @returns\n   * @memberof QueryWrapper\n   */\n  public getLastQueryRequest(): QueryBundleRequest {\n    return cloneDeep(this.state.queryRequest)\n  }\n\n  /**\n   * Grab the next page of data, pulling in 25 more rows.\n   *\n   * @param {*} queryRequest Query request as specified by\n   *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n   * @memberof QueryWrapper\n   */\n  public async getNextPageOfData(queryRequest: QueryBundleRequest) {\n    this.setState({\n      isLoading: true\n    })\n\n    await getNextPageOfData(queryRequest, this.state.data!, this.props.token)\n    .then(\n      (newState) => {\n        this.setState({\n          ...newState,\n          isLoading: false,\n          queryRequest: cloneDeep(queryRequest)\n        })\n      }\n    )\n  }\n\n  /**\n   * Execute the initial query passed into the component\n   *\n   * @param {*} queryRequest Query request as specified by\n   *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n   * @memberof QueryWrapper\n   */\n  public executeInitialQueryRequest() {\n    this.setState({\n      isLoading: true,\n    })\n\n    let sqlUsed = this.props.sql\n    if (this.props.searchParams) {\n      sqlUsed = insertWhereClauseFromURL(this.props.searchParams!, this.props.sql)\n    }\n\n    // we don't set this in the state because it hardcodes the sql query, on componentDidUpdate\n    // we need the sql to change\n    const initQueryRequest = {\n      concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n      partMask:\n        SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n        SynapseConstants.BUNDLE_MASK_QUERY_FACETS |\n        SynapseConstants.BUNDLE_MASK_QUERY_RESULTS |\n        SynapseConstants.BUNDLE_MASK_QUERY_COUNT\n        ,\n      query: {\n        sql: sqlUsed,\n        isConsistent: false,\n        limit: 25,\n        offset: 0,\n      }\n    }\n\n    SynapseClient\n      .getQueryTableResults(initQueryRequest, this.props.token)\n      .then(\n        (data: QueryResultBundle) => {\n          const queryRequestWithoutCount = cloneDeep(initQueryRequest)\n          queryRequestWithoutCount.partMask = (\n            SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n            SynapseConstants.BUNDLE_MASK_QUERY_FACETS |\n            SynapseConstants.BUNDLE_MASK_QUERY_RESULTS\n          )\n\n          const hasMoreData = data.queryResult.queryResults.rows.length === SynapseConstants.PAGE_SIZE\n          const newState = {\n            hasMoreData,\n            data,\n            queryRequest: queryRequestWithoutCount,\n            isLoading: false,\n            totalResultsNoFacet: data.queryCount!\n          }\n          this.setState(newState)\n        }\n      ).catch((err) => {\n        console.log('Failed to get data ', err)\n      })\n  }\n\n  /**\n   * Render the children without any formatting\n   */\n  public render() {\n    // only forward the necessary props\n    const {\n      sql,\n      searchParams,\n      token,\n      ...rest\n    } = this.props\n    return (\n      <CardContainer\n        {...rest}\n        data={this.state.data}\n        totalResultsNoFacet={this.state.totalResultsNoFacet}\n        getLastQueryRequest={this.getLastQueryRequest}\n        getNextPageOfData={this.getNextPageOfData}\n        hasMoreData={this.state.hasMoreData}\n        isLoading={this.state.isLoading}\n      />\n    )\n  }\n\n}\n","import * as React from 'react'\nimport { SynapseClient } from '../../../lib'\nimport QueryWrapperMenu, { MenuConfig, QueryWrapperMenuProps } from '../../../lib/containers/QueryWrapperMenu'\nimport { SynapseConstants } from '../../../lib/utils'\nimport '../App.css'\nimport { GenericCardSchema } from 'lib/containers/GenericCard'\n\ntype DemoState = {\n  token: string\n  ownerId: string\n  isLoading: boolean\n  showMarkdown: boolean\n  version: number\n  tabOne: any\n  tabTwo: QueryWrapperMenuProps\n  showTabOne: boolean\n}\n/**\n * Demo of features that can be used from src/demo/utils/SynapseClient\n * module\n */\nclass QueryWrapperMenuDemo extends React.Component<{rgbIndex: number}, DemoState> {\n  /**\n   * Maintain internal state of user session\n   */\n  constructor(props: any) {\n    super(props)\n    const experimentalSql = \"SELECT * FROM syn20337467 WHERE toolType = 'experimental'\" \n    const computationalSql = \"SELECT * FROM syn20337467 WHERE toolType = 'computational'\" \n    const genericCardSchema: GenericCardSchema = {\n      title: 'Title',\n      type: 'Generic Tool',\n      subTitle: 'softwareType',\n      description: 'summary',\n      icon: 'icon',\n      secondaryLabels: {\n        0: { key: 'contributor', alias: 'Contributor' },\n        1: { key: 'diagnosis', alias: 'Diagnosis' },\n        2: { key: 'program', alias: 'Program' }\n      }\n    }\n    this.state = {\n      isLoading: true,\n      ownerId: '',\n      showMarkdown: true,\n      showTabOne: false,\n      tabTwo:\n      {\n        showBarChart: false,\n        name: 'Demo',\n        unitDescription: 'persons',\n        cardConfiguration: {\n          genericCardSchema,\n          type: SynapseConstants.MEDIUM_USER_CARD,\n          loadingScreen: <div style={{height: 450}}> I'm loading as fast I can! </div>\n        },\n        rgbIndex: 1,\n        accordionConfig: [\n          {\n            name: 'Clinical',\n            cardConfiguration: {\n              genericCardSchema,\n              type: SynapseConstants.GENERIC_CARD,\n              loadingScreen: <div style={{height: 450}}> I'm loading as fast I can! </div>\n            },  \n            menuConfig: [\n              {\n                facetName: 'grant',\n                sql: computationalSql,\n              },\n              {\n                facetName: 'diagnosis',\n                sql: `${computationalSql} LIMIT 1 `,\n              },\n              {\n                facetName: 'modelType',\n                sql: `${computationalSql} LIMIT 2`,\n              },\n            ],\n          },\n          {\n            name: 'Experimental',\n            cardConfiguration: {\n              genericCardSchema,\n              type: SynapseConstants.GENERIC_CARD,\n              loadingScreen: <div style={{height: 450}}> I'm loading as fast I can! </div>\n            },  \n            menuConfig: [\n              {\n                facetName: 'program',\n                sql: experimentalSql,\n              },\n              {\n                facetName: 'reagentType',\n                sql: `${experimentalSql} LIMIT 1`,\n              },\n              {\n                facetName: 'softwareType',\n                sql: `${experimentalSql} LIMIT 2`,\n              },\n            ],\n          },\n        ],\n        menuConfig: [\n          {\n            facetName: 'institution',\n            sql: 'SELECT ownerID as ownerId, firstName, lastName, institution from syn13897207',\n          },\n        ],\n      }\n    ,\n      tabOne: {\n        tableConfiguration: {\n          title: 'title',\n          unitDescription: 'datum'\n        },\n        menuConfig: [\n          {\n            facetName: 'diagnosis',\n            sql: 'SELECT study, assay, count(distinct id) AS files, concat(organ) AS organs' +\n              ' FROM syn17024112 WHERE species=\\'Human\\' AND assay=\\'rnaSeq\\' group by 1,2 order by 3 desc',\n          },\n          {\n            facetName: 'study',\n            sql: 'SELECT * FROM syn11346063',\n          },\n          // {\n          //   facetName: 'dataType',\n          //   sql: 'SELECT id, fundingAgency, assay, diagnosis, dataType FROM syn16858331',\n          //   synapseId: 'syn16858331',\n          //   title: 'title',\n          //   unitDescription: 'descriptive unit'\n          // },\n        ] as MenuConfig[]\n        ,\n        rgbIndex: 5\n      }\n      ,\n      token: '',\n      version: 0\n    }\n    this.makeSampleQueryCall = this.makeSampleQueryCall.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.removeHandler = this.removeHandler.bind(this)\n    this.rgba2rgb = this.rgba2rgb.bind(this)\n  }\n\n  public rgba2rgb(background: number[], color: number[]) {\n    const alpha = color[3]\n    return [\n      Math.floor((1 - alpha) * background[0] + alpha * color[0] + 0.5),\n      Math.floor((1 - alpha) * background[1] + alpha * color[1] + 0.5),\n      Math.floor((1 - alpha) * background[2] + alpha * color[2] + 0.5)\n    ]\n  }\n\n  /**\n   * Make a query on synapse\n   */\n  public makeSampleQueryCall(): void {\n    // Example table (view) query.\n    // See https://docs.synapse.org/rest/POST/entity/id/table/query/async/start.html\n    const QUERY = {\n      entityId: 'syn12335586',\n      partMask:\n        SynapseConstants.BUNDLE_MASK_QUERY_RESULTS |\n        SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n        SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n        SynapseConstants.BUNDLE_MASK_QUERY_FACETS,\n      query: {\n        includeEntityEtag: true,\n        isConsistent: false,\n        limit: 100,\n        offset: 0,\n        sql: 'SELECT * FROM syn12335586'\n      }\n    }\n    SynapseClient.getQueryTableResults(QUERY)\n      .then((data: any) => console.log(data))\n      .catch((error: any) => {\n        console.error(error)\n      })\n  }\n  /**\n   * Update internal state\n   * @param {Object} updatedState new state to be updated by the component\n   */\n  public handleChange(updatedState: {}): void {\n    this.setState(updatedState)\n  }\n\n  public removeHandler(): void {\n    this.setState({ showMarkdown: !this.state.showMarkdown })\n  }\n\n  public render(): JSX.Element {\n\n    const props = this.state.showTabOne ? this.state.tabOne : this.state.tabTwo\n    return (\n      <div className=\"container\">\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {this.setState({showTabOne: !this.state.showTabOne})}}\n        >\n          toggle tabs\n        </button>\n        <h2>Demo of table</h2>\n          <QueryWrapperMenu\n            token={''}\n            name={'Studies'}\n            isConsistent={true}\n            {...props}\n            rgbIndex={this.state.showTabOne ? 1 : this.state.tabTwo.rgbIndex}\n            loadingScreen={<div>loading... </div>}\n          />\n        </div>\n    )\n  }\n}\nexport default QueryWrapperMenuDemo\n","import * as React from 'react'\nimport CardContainerLogic from '../../../lib/containers/CardContainerLogic'\nimport { SynapseConstants } from '../../../lib'\nimport { GenericCardSchema } from '../../../lib/containers/GenericCard'\nimport brainSvg from './icons/brain.svg'\nimport circleSvg from './icons/circle.svg'\nimport mouseSvg from './icons/mouse.svg'\nimport resilienceadSvg from './icons/resiliencead.svg'\n\nexport default class CardContainerLogicDemo extends React.Component {\n\n  constructor(props: any) {\n    super(props)\n    this.state = {}\n  }\n\n  render() {\n    const iconOptions = {\n      'AMP-AD': circleSvg,\n      'M2OVE-AD': brainSvg,\n      'MODEL-AD': mouseSvg,\n      'Resilience-AD': resilienceadSvg\n    }\n    // @ts-ignore\n    const genericToolSchema: GenericCardSchema = {\n      type: 'Tool',\n      title: 'name',\n      subTitle: 'contact',\n      description: 'summary',\n      icon: 'type',\n      link: 'link',\n      secondaryLabels: {\n        0: { key: 'subtype', alias: 'Subtype' },\n        1: { key: 'disease', alias: 'Disease' },\n        2: { key: 'manifestation', alias: 'Manifestation' },\n        3: { key: 'Sample_Type', alias: 'Tissue' },\n        4: { key: 'fundingAgency', alias: 'Funding Agency' },\n        5: { key: 'studyName', alias: 'Study Name' }\n      }\n    }\n    const genericCardSchemaHeader: GenericCardSchema = {\n      type: 'PROGRAM',\n      title: 'Full Name',\n      subTitle: 'Short Description',\n      description: 'Long Description',\n      icon: 'Program',\n      secondaryLabels: {\n        0: { key: 'Full Name' }\n      }\n    }\n    // @ts-ignore\n    const genericCardSchema: GenericCardSchema = {\n      type: 'Study',\n      title: 'Study_Name',\n      subTitle: 'Data_Contributor',\n      description: 'Study_Description',\n      icon: 'Access_Type',\n      secondaryLabels: {\n        0: { key: 'DataType_All', alias: 'Data Types' },\n        1: { key: 'Diagnosis_or_Model_System', alias: 'Diagnosis' },\n        2: { key: 'Number_of_Individuals', alias: 'Individuals' },\n        3: { key: 'Sample_Type', alias: 'Tissue' },\n        4: { key: 'Species ' },\n        5: { key: 'Cohort_Type', alias: 'Cohort Type' },\n        6: { key: 'Study_Status', alias: 'Study Status' },\n        7: { key: 'Consortium', alias: 'Program' },\n        8: { key: 'Grant' },\n      }\n    }\n    return (\n      <div>\n        <hr/>\n        <p> Generic Card Rendering </p>\n        <CardContainerLogic\n          type={SynapseConstants.GENERIC_CARD}\n          // tslint:disable-next-line\n          sql={\"SELECT * FROM syn17024173\"}\n          searchParams={{ Program: 'AMP-AD' }}\n          genericCardSchema={genericCardSchemaHeader}\n          backgroundColor={'#5960a5'}\n          isHeader={true}\n          iconOptions={iconOptions}\n        />\n        {/* <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-md-10 col-md-offset-1\">\n              <CardContainerLogic\n                type={SynapseConstants.GENERIC_CARD}\n                sql={'SELECT * FROM syn16859448'}\n                unitDescription=\"studies\"\n                genericCardSchema={genericToolSchema}\n                secondaryLabelLimit={3}\n              />\n            </div>\n          </div>\n        </div> */}\n        <CardContainerLogic\n          type={SynapseConstants.MEDIUM_USER_CARD}\n          sql={'SELECT ownerID as ownerId FROM syn13897207'}\n          loadingScreen={<div> Im loading as fast I can !!! </div>}\n        />\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faSearch, faArrowRight } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nlibrary.add(faSearch)\nlibrary.add(faArrowRight)\n\ntype SearchDemoState = {\n  searchText: string\n  isFocusedOnSearchBar: boolean\n}\n\nexport default class SearchDemo extends React.Component<{}, SearchDemoState> {\n\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      searchText: '',\n      isFocusedOnSearchBar: false\n    }\n    this.updateSearchText = this.updateSearchText.bind(this)\n    this.setSearchFocus = this.setSearchFocus.bind(this)\n    this.setSearchUnfocus = this.setSearchUnfocus.bind(this)\n    this.handleSearch = this.handleSearch.bind(this)\n  }\n\n  updateSearchText(event: React.FormEvent<HTMLInputElement>) {\n    const value = event.currentTarget.value\n    this.setState({\n      searchText: value\n    })\n  }\n\n  setSearchFocus() {\n    this.setState(\n      {\n        isFocusedOnSearchBar: true\n      }\n    )\n  }\n\n  setSearchUnfocus () {\n    this.setState(\n      {\n        isFocusedOnSearchBar: false\n      }\n    )\n  }\n\n  handleSearch () {\n    // TODO: Implement search\n  }\n\n  render() {\n    return (\n      <div>\n        <label htmlFor=\"searchBar\">\n          <input\n            id=\"searchBar\"\n            type=\"text\"\n            onChange={this.updateSearchText}\n            onFocus={this.setSearchFocus}\n            onBlur={this.setSearchUnfocus}\n            onKeyPress={this.handleSearch}\n          />\n          {\n            !this.state.searchText\n            &&\n            !this.state.isFocusedOnSearchBar\n            &&\n            <FontAwesomeIcon className=\"SRC-searchBar\" icon={'search'} />\n          }\n          {<span className=\"SRC-hand-cursor\" onClick={this.handleSearch} >\n              <FontAwesomeIcon className=\"SRC-arrowRight\" icon={'arrow-right'} />\n            </span>}\n        </label>\n      </div>\n    )\n  }\n\n}\n","import * as React from 'react'\nimport UserCard from '../../../lib/containers/UserCard'\nimport { SynapseConstants } from '../../../lib'\nimport MarkdownSynapse from '../../../lib/containers/MarkdownSynapse'\n\nexport default class UserBadgeSmallDemo extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props)\n  }\n  public render() {\n    const profiles = [\n      '3376985',\n      '1131050',\n      '273960',\n      '3346401',\n      '3374422',\n      '273950',\n      '273950',\n    ]\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <div className=\"row\">\n            <h3>User Card Small </h3>\n             <p> sans photo- </p>\n            <UserCard\n              ownerId={'273950'}\n              size={SynapseConstants.SMALL_USER_CARD}\n            />\n            <p> without text </p>\n            <UserCard\n              ownerId={'3374422'}\n              hideText={true}\n              size={SynapseConstants.SMALL_USER_CARD}\n            />\n            <hr/>\n             <p> with custom link- </p>\n            <UserCard\n              ownerId={'273950'}\n              size={SynapseConstants.SMALL_USER_CARD}\n              link={'https://google.com'}\n            />\n            <UserCard\n              ownerId={'3374422'}\n              hideText={true}\n              size={SynapseConstants.SMALL_USER_CARD}\n              link={'https://google.com'}\n            />\n            <hr/>\n            <p> without tooltip </p>\n            <div className=\"SRC-centerContent\">\n              <UserCard\n                ownerId={'3374422'}\n                hideTooltip={true}\n                size={SynapseConstants.SMALL_USER_CARD}\n              />\n              <UserCard\n                ownerId={'3346401'}\n                hideTooltip={true}\n                size={SynapseConstants.SMALL_USER_CARD}\n              />\n            </div>\n            <hr/>\n            <p> with photo- </p>\n            <UserCard\n              ownerId={'3346401'}\n              size={SynapseConstants.SMALL_USER_CARD}\n            />\n            <UserCard\n              ownerId={'1131050'}\n              size={SynapseConstants.SMALL_USER_CARD}\n            />\n            <p> without text- </p>\n            <UserCard\n              ownerId={'273960'}\n              hideText={true}\n              size={SynapseConstants.SMALL_USER_CARD}\n            />\n            <hr/>\n            <p>inside of markdown-</p>\n              <MarkdownSynapse\n                wikiId={'588827'}\n                ownerId={'syn18380882'}\n              />\n          </div>\n          <div className=\"row\">\n            <h3> User Card Large </h3>\n            <p> with photo- </p>\n            <UserCard\n              ownerId={'1131050'}\n              // tslint:disable-next-line:jsx-no-lambda\n              size={SynapseConstants.LARGE_USER_CARD}\n              menuActions={[\n                {\n                  field: 'Projects',\n                  callback: (userProfile) => { console.log(userProfile) }\n                },\n                {\n                  field: 'Profile',\n                  callback: (userProfile) => { console.log(userProfile) }\n                },\n                {\n                  field: 'SEPERATOR',\n                },\n                {\n                  field: 'Teams',\n                  callback: (userProfile) => { console.log(userProfile) }\n                }\n              ]}\n            />\n            <br/>\n            <p> sans photo- </p>\n            <br/>\n            <UserCard\n              ownerId={'3374422'}\n              size={SynapseConstants.LARGE_USER_CARD}\n            />\n            <br/>\n            <br/>\n            <UserCard\n              ownerId={'345424'}\n              size={SynapseConstants.LARGE_USER_CARD}\n              menuActions={[\n                {\n                  field: 'Projects',\n                  callback: (userProfile) => { console.log(userProfile) }\n                },\n                {\n                  field: 'Profile',\n                  callback: (userProfile) => { console.log(userProfile) }\n                },\n                {\n                  field: 'SEPERATOR',\n                },\n                {\n                  field: 'Teams',\n                  callback: (userProfile) => { console.log(userProfile) }\n                }\n              ]}\n            />\n          </div>\n        </div>\n        <h3> User Card Medium Wrapping Example </h3>\n        <div className=\"SRC-card-grid-row\">\n          {\n            [1, 2, 3, 4, 5].map(\n              (_el, index) => {\n                return (\n                  <div className=\"SRC-grid-item\" key={index}>\n                    <UserCard\n                      hideEmail={(index % 2) === 0}\n                      menuActions={[\n                        {\n                          field: 'Projects',\n                          callback: (userProfile) => { console.log(userProfile) }\n                        },\n                        {\n                          field: 'Profile',\n                          callback: (userProfile) => { console.log(userProfile) }\n                        },\n                        {\n                          field: 'SEPERATOR',\n                        },\n                        {\n                          field: 'Teams',\n                          callback: (userProfile) => { console.log(userProfile) }\n                        }\n                      ]}\n                      ownerId={profiles[index]}\n                      size={SynapseConstants.MEDIUM_USER_CARD}\n                      link={index % 2 ? 'https://google.com' : ''}\n                    />\n                  </div>\n                )\n              }\n            )\n          }\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n","import * as React from 'react'\nimport MarkdownSynapse from '../../../lib/containers/MarkdownSynapse'\n\nexport const MarkdownSynapseDemo:React.SFC = () => {\n  return (\n    <div className=\"container\">\n      {/* with details tag */}\n      <MarkdownSynapse\n        ownerId={'syn12666371'}\n        wikiId={'585317'}\n      />\n      {/*  with references */}\n      <MarkdownSynapse\n        ownerId={'syn17100797'}\n        wikiId={'587923'}\n      />\n      {/* with  toc */}\n      <MarkdownSynapse\n        ownerId={'syn18380882'}\n        wikiId={'588827'}\n      />\n    </div>\n  )\n}\n","import * as React from 'react'\nimport reactNativeRssParser from 'react-native-rss-parser'\n\ntype RssState = {\n  rssFeed: any,\n  isLoadingError: boolean\n}\n\nexport type RssFeedProps = {\n  url: string\n}\n\nexport default class RssFeed extends React.Component<RssFeedProps, RssState> {\n  constructor(props: RssFeedProps) {\n    super(props)\n    this.state = { rssFeed: {}, isLoadingError: false }\n  }\n\n  componentDidMount() {\n    const {\n      url\n    } = this.props\n    fetch(url)\n      .then(response => response.text())\n      .then(responseData => reactNativeRssParser.parse(responseData))\n      .then(rss => this.setState({ rssFeed: rss }))\n      .catch(err => this.setState({ isLoadingError: true }))\n  }\n\n  render() {\n    return (\n      <ul className=\"srcRssFeed\">\n        {\n          this.state.rssFeed.items &&\n          this.state.rssFeed.items.map((item: any) => {\n            return (\n              <li key={item.id} className=\"srcRssFeedItem\">\n                <a className=\"srcRssFeedItemTitle\" href={item.links[0].url}>\n                  {item.title}\n                </a>\n                <div className=\"srcRssFeedItemContent\" dangerouslySetInnerHTML={{ __html: item.content }} />\n              </li>\n            )\n          })\n        }\n        {\n          this.state.isLoadingError &&\n          <div>\n            Unable to load feed: {this.props.url}\n          </div>\n        }\n      </ul>\n    )\n  }\n}\n","import * as React from 'react'\nimport RssFeed from '../../../lib/containers/RssFeed'\n\nexport const NewsFeedDemo:React.SFC = () => {\n  return (\n    <div className=\"container\">\n      <RssFeed\n        url={'https://www.houstonzoo.org/feed'}\n      />\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { Link, Route, match } from 'react-router-dom'\nimport QueryWrapperMenuDemo from './QueryWrapperMenuDemo'\nimport CardContainerLogicDemo from './CardContainerLogicDemo'\nimport SearchDemo from './SearchDemo'\nimport UserCardDemo from './UserCardDemo'\nimport { MarkdownSynapseDemo } from './MarkdownSynapseDemo'\nimport { NewsFeedDemo } from './NewsFeedDemo'\n\n/**\n * Demo of features that can be used from src/demo/utils/SynapseClient\n * module\n */\nconst App = ({ match }: { match: match }) => {\n  return (\n      <div>\n        <h2>Links to components under development </h2>\n        <ul>\n          <li>\n            <Link to={`${match.url}/QueryWrapperMenuDemo`}>QueryWrapperMenuDemo</Link>\n          </li>\n          <li>\n            <Link to={`${match.url}/SearchDemo`}>SearchDemo</Link>\n          </li>\n          <li>\n            <Link to={`${match.url}/CardContainerLogicDemo`}>CardContainerLogicDemo</Link>\n          </li>\n          <li>\n            <Link to={`${match.url}/UserBadgeDemo`}>UserBadgeDemo</Link>\n          </li>\n          <li>\n            <Link to={`${match.url}/MarkdownSynapseDemo`}>MarkdownSynapseDemo</Link>\n          </li>\n          <li>\n            <Link to={`${match.url}/NewsFeedDemo`}>NewsFeedDemo</Link>\n          </li>\n        </ul>\n\n        <Route\n          exact={true}\n          path={`${match.url}/QueryWrapperMenuDemo`}\n          // tslint:disable-next-line:jsx-no-lambda\n          render={() => <QueryWrapperMenuDemo rgbIndex={0}/>}\n        />\n\n        <Route\n          exact={true}\n          path={`${match.url}/SearchDemo`}\n          // tslint:disable-next-line:jsx-no-lambda\n          render={() => <SearchDemo />}\n        />\n\n        <Route\n          exact={true}\n          path={`${match.url}/CardContainerLogicDemo`}\n          // tslint:disable-next-line:jsx-no-lambda\n          component={CardContainerLogicDemo}\n        />\n\n        <Route\n          exact={true}\n          path={`${match.url}/UserBadgeDemo`}\n          // tslint:disable-next-line:jsx-no-lambda\n          component={() => <UserCardDemo/>}\n        />\n\n        <Route\n          exact={true}\n          path={`${match.url}/MarkdownSynapseDemo`}\n          // tslint:disable-next-line:jsx-no-lambda\n          component={() => <MarkdownSynapseDemo/>}\n        />\n        <Route\n          exact={true}\n          path={`${match.url}/NewsFeedDemo`}\n          // tslint:disable-next-line:jsx-no-lambda\n          component={() => <NewsFeedDemo/>}\n        />\n\n        <Route\n          exact={true}\n          path={match.path}\n          // tslint:disable-next-line:jsx-no-lambda\n          component={() => <div/>}\n        />\n\n      </div>\n  )\n}\n\nexport default App\n","import * as React from 'react'\nimport { Link, BrowserRouter as Router, Route } from 'react-router-dom'\nimport logoSvg from '../../images/logo.svg'\nimport Demo from './Demo'\nimport Playground from './playground/Playground'\n\n/**\n * Demo of features that can be used from src/demo/utils/SynapseClient\n * module\n */\nconst App: React.SFC<{}> = () => {\n  return (\n    <Router\n      basename={process.env.PUBLIC_URL}\n    >\n      <div>\n      <div className=\"App-header text-center\">\n          <img src={logoSvg} className=\"App-logo\" alt=\"logo\" />\n          <h4 className=\"white-text\">Synapse React Client Demo</h4>\n        </div>\n        <ul>\n            <li>\n              <Link to=\"/\">Demo</Link>\n            </li>\n            <li>\n              <Link to=\"/Playground\">Playground</Link>\n            </li>\n        </ul>\n\n        <Route exact={true} path=\"/\" component={Demo}/>\n        <Route path=\"/Playground\" component={Playground}/>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport App from './demo/containers/App'\nimport './lib/style/Cards.css'\nimport './lib/style/Portal.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n","module.exports = __webpack_public_path__ + \"static/media/project.28806f03.svg\";"],"sourceRoot":""}